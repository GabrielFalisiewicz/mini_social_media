{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _asyncToGenerator = require(\"C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Architect = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst rxjs_1 = require(\"rxjs\");\nconst api_1 = require(\"./api\");\nconst jobs_1 = require(\"./jobs\");\nconst schedule_by_name_1 = require(\"./schedule-by-name\");\nconst inputSchema = require('./input-schema.json');\nconst outputSchema = require('./output-schema.json');\nfunction _createJobHandlerFromBuilderInfo(info, target, host, registry, baseOptions) {\n  const jobDescription = {\n    name: target ? `{${(0, api_1.targetStringFromTarget)(target)}}` : info.builderName,\n    argument: {\n      type: 'object'\n    },\n    input: inputSchema,\n    output: outputSchema,\n    info\n  };\n  function handler(argument, context) {\n    // Add input validation to the inbound bus.\n    const inboundBusWithInputValidation = context.inboundBus.pipe((0, rxjs_1.concatMap)( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (message) {\n        if (message.kind === jobs_1.JobInboundMessageKind.Input) {\n          const v = message.value;\n          const options = {\n            ...baseOptions,\n            ...v.options\n          };\n          // Validate v against the options schema.\n          const validation = yield registry.compile(info.optionSchema);\n          const validationResult = yield validation(options);\n          const {\n            data,\n            success,\n            errors\n          } = validationResult;\n          if (!success) {\n            throw new core_1.json.schema.SchemaValidationException(errors);\n          }\n          return {\n            ...message,\n            value: {\n              ...v,\n              options: data\n            }\n          };\n        } else {\n          return message;\n        }\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()),\n    // Using a share replay because the job might be synchronously sending input, but\n    // asynchronously listening to it.\n    (0, rxjs_1.shareReplay)(1));\n    // Make an inboundBus that completes instead of erroring out.\n    // We'll merge the errors into the output instead.\n    const inboundBus = (0, rxjs_1.onErrorResumeNext)(inboundBusWithInputValidation);\n    const output = (0, rxjs_1.from)(host.loadBuilder(info)).pipe((0, rxjs_1.concatMap)(builder => {\n      if (builder === null) {\n        throw new Error(`Cannot load builder for builderInfo ${JSON.stringify(info, null, 2)}`);\n      }\n      return builder.handler(argument, {\n        ...context,\n        inboundBus\n      }).pipe((0, rxjs_1.map)(output => {\n        if (output.kind === jobs_1.JobOutboundMessageKind.Output) {\n          // Add target to it.\n          return {\n            ...output,\n            value: {\n              ...output.value,\n              ...(target ? {\n                target\n              } : 0)\n            }\n          };\n        } else {\n          return output;\n        }\n      }));\n    }),\n    // Share subscriptions to the output, otherwise the the handler will be re-run.\n    (0, rxjs_1.shareReplay)());\n    // Separate the errors from the inbound bus into their own observable that completes when the\n    // builder output does.\n    const inboundBusErrors = inboundBusWithInputValidation.pipe((0, rxjs_1.ignoreElements)(), (0, rxjs_1.takeUntil)((0, rxjs_1.onErrorResumeNext)(output.pipe((0, rxjs_1.last)()))));\n    // Return the builder output plus any input errors.\n    return (0, rxjs_1.merge)(inboundBusErrors, output);\n  }\n  return (0, rxjs_1.of)(Object.assign(handler, {\n    jobDescription\n  }));\n}\n/**\n * A JobRegistry that resolves builder targets from the host.\n */\nclass ArchitectBuilderJobRegistry {\n  constructor(_host, _registry, _jobCache, _infoCache) {\n    this._host = _host;\n    this._registry = _registry;\n    this._jobCache = _jobCache;\n    this._infoCache = _infoCache;\n  }\n  _resolveBuilder(name) {\n    const cache = this._infoCache;\n    if (cache) {\n      const maybeCache = cache.get(name);\n      if (maybeCache !== undefined) {\n        return maybeCache;\n      }\n      const info = (0, rxjs_1.from)(this._host.resolveBuilder(name)).pipe((0, rxjs_1.shareReplay)(1));\n      cache.set(name, info);\n      return info;\n    }\n    return (0, rxjs_1.from)(this._host.resolveBuilder(name));\n  }\n  _createBuilder(info, target, options) {\n    const cache = this._jobCache;\n    if (target) {\n      const maybeHit = cache && cache.get((0, api_1.targetStringFromTarget)(target));\n      if (maybeHit) {\n        return maybeHit;\n      }\n    } else {\n      const maybeHit = cache && cache.get(info.builderName);\n      if (maybeHit) {\n        return maybeHit;\n      }\n    }\n    const result = _createJobHandlerFromBuilderInfo(info, target, this._host, this._registry, options || {});\n    if (cache) {\n      if (target) {\n        cache.set((0, api_1.targetStringFromTarget)(target), result.pipe((0, rxjs_1.shareReplay)(1)));\n      } else {\n        cache.set(info.builderName, result.pipe((0, rxjs_1.shareReplay)(1)));\n      }\n    }\n    return result;\n  }\n  get(name) {\n    const m = name.match(/^([^:]+):([^:]+)$/i);\n    if (!m) {\n      return (0, rxjs_1.of)(null);\n    }\n    return (0, rxjs_1.from)(this._resolveBuilder(name)).pipe((0, rxjs_1.concatMap)(builderInfo => builderInfo ? this._createBuilder(builderInfo) : (0, rxjs_1.of)(null)), (0, rxjs_1.first)(null, null));\n  }\n}\n/**\n * A JobRegistry that resolves targets from the host.\n */\nclass ArchitectTargetJobRegistry extends ArchitectBuilderJobRegistry {\n  get(name) {\n    const m = name.match(/^{([^:]+):([^:]+)(?::([^:]*))?}$/i);\n    if (!m) {\n      return (0, rxjs_1.of)(null);\n    }\n    const target = {\n      project: m[1],\n      target: m[2],\n      configuration: m[3]\n    };\n    return (0, rxjs_1.from)(Promise.all([this._host.getBuilderNameForTarget(target), this._host.getOptionsForTarget(target)])).pipe((0, rxjs_1.concatMap)(([builderStr, options]) => {\n      if (builderStr === null || options === null) {\n        return (0, rxjs_1.of)(null);\n      }\n      return this._resolveBuilder(builderStr).pipe((0, rxjs_1.concatMap)(builderInfo => {\n        if (builderInfo === null) {\n          return (0, rxjs_1.of)(null);\n        }\n        return this._createBuilder(builderInfo, target, options);\n      }));\n    }), (0, rxjs_1.first)(null, null));\n  }\n}\nfunction _getTargetOptionsFactory(host) {\n  return (0, jobs_1.createJobHandler)(target => {\n    return host.getOptionsForTarget(target).then(options => {\n      if (options === null) {\n        throw new Error(`Invalid target: ${JSON.stringify(target)}.`);\n      }\n      return options;\n    });\n  }, {\n    name: '..getTargetOptions',\n    output: {\n      type: 'object'\n    },\n    argument: inputSchema.properties.target\n  });\n}\nfunction _getProjectMetadataFactory(host) {\n  return (0, jobs_1.createJobHandler)(target => {\n    return host.getProjectMetadata(target).then(options => {\n      if (options === null) {\n        throw new Error(`Invalid target: ${JSON.stringify(target)}.`);\n      }\n      return options;\n    });\n  }, {\n    name: '..getProjectMetadata',\n    output: {\n      type: 'object'\n    },\n    argument: {\n      oneOf: [{\n        type: 'string'\n      }, inputSchema.properties.target]\n    }\n  });\n}\nfunction _getBuilderNameForTargetFactory(host) {\n  return (0, jobs_1.createJobHandler)( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(function* (target) {\n      const builderName = yield host.getBuilderNameForTarget(target);\n      if (!builderName) {\n        throw new Error(`No builder were found for target ${(0, api_1.targetStringFromTarget)(target)}.`);\n      }\n      return builderName;\n    });\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), {\n    name: '..getBuilderNameForTarget',\n    output: {\n      type: 'string'\n    },\n    argument: inputSchema.properties.target\n  });\n}\nfunction _validateOptionsFactory(host, registry) {\n  return (0, jobs_1.createJobHandler)( /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(function* ([builderName, options]) {\n      // Get option schema from the host.\n      const builderInfo = yield host.resolveBuilder(builderName);\n      if (!builderInfo) {\n        throw new Error(`No builder info were found for builder ${JSON.stringify(builderName)}.`);\n      }\n      const validation = yield registry.compile(builderInfo.optionSchema);\n      const {\n        data,\n        success,\n        errors\n      } = yield validation(options);\n      if (!success) {\n        throw new core_1.json.schema.SchemaValidationException(errors);\n      }\n      return data;\n    });\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), {\n    name: '..validateOptions',\n    output: {\n      type: 'object'\n    },\n    argument: {\n      type: 'array',\n      items: [{\n        type: 'string'\n      }, {\n        type: 'object'\n      }]\n    }\n  });\n}\nclass Architect {\n  constructor(_host, registry = new core_1.json.schema.CoreSchemaRegistry(), additionalJobRegistry) {\n    this._host = _host;\n    this._jobCache = new Map();\n    this._infoCache = new Map();\n    const privateArchitectJobRegistry = new jobs_1.SimpleJobRegistry();\n    // Create private jobs.\n    privateArchitectJobRegistry.register(_getTargetOptionsFactory(_host));\n    privateArchitectJobRegistry.register(_getBuilderNameForTargetFactory(_host));\n    privateArchitectJobRegistry.register(_validateOptionsFactory(_host, registry));\n    privateArchitectJobRegistry.register(_getProjectMetadataFactory(_host));\n    const jobRegistry = new jobs_1.FallbackRegistry([new ArchitectTargetJobRegistry(_host, registry, this._jobCache, this._infoCache), new ArchitectBuilderJobRegistry(_host, registry, this._jobCache, this._infoCache), privateArchitectJobRegistry, ...(additionalJobRegistry ? [additionalJobRegistry] : [])]);\n    this._scheduler = new jobs_1.SimpleScheduler(jobRegistry, registry);\n  }\n  has(name) {\n    return this._scheduler.has(name);\n  }\n  scheduleBuilder(name, options, scheduleOptions = {}) {\n    // The below will match 'project:target:configuration'\n    if (!/^[^:]+:[^:]+(:[^:]+)?$/.test(name)) {\n      throw new Error('Invalid builder name: ' + JSON.stringify(name));\n    }\n    return (0, schedule_by_name_1.scheduleByName)(name, options, {\n      scheduler: this._scheduler,\n      logger: scheduleOptions.logger || new core_1.logging.NullLogger(),\n      currentDirectory: this._host.getCurrentDirectory(),\n      workspaceRoot: this._host.getWorkspaceRoot()\n    });\n  }\n  scheduleTarget(target, overrides = {}, scheduleOptions = {}) {\n    return (0, schedule_by_name_1.scheduleByTarget)(target, overrides, {\n      scheduler: this._scheduler,\n      logger: scheduleOptions.logger || new core_1.logging.NullLogger(),\n      currentDirectory: this._host.getCurrentDirectory(),\n      workspaceRoot: this._host.getWorkspaceRoot()\n    });\n  }\n}\nexports.Architect = Architect;","map":{"version":3,"names":["_asyncToGenerator","require","default","Object","defineProperty","exports","value","Architect","core_1","rxjs_1","api_1","jobs_1","schedule_by_name_1","inputSchema","outputSchema","_createJobHandlerFromBuilderInfo","info","target","host","registry","baseOptions","jobDescription","name","targetStringFromTarget","builderName","argument","type","input","output","handler","context","inboundBusWithInputValidation","inboundBus","pipe","concatMap","_ref","message","kind","JobInboundMessageKind","Input","v","options","validation","compile","optionSchema","validationResult","data","success","errors","json","schema","SchemaValidationException","_x","apply","arguments","shareReplay","onErrorResumeNext","from","loadBuilder","builder","Error","JSON","stringify","map","JobOutboundMessageKind","Output","inboundBusErrors","ignoreElements","takeUntil","last","merge","of","assign","ArchitectBuilderJobRegistry","constructor","_host","_registry","_jobCache","_infoCache","_resolveBuilder","cache","maybeCache","get","undefined","resolveBuilder","set","_createBuilder","maybeHit","result","m","match","builderInfo","first","ArchitectTargetJobRegistry","project","configuration","Promise","all","getBuilderNameForTarget","getOptionsForTarget","builderStr","_getTargetOptionsFactory","createJobHandler","then","properties","_getProjectMetadataFactory","getProjectMetadata","oneOf","_getBuilderNameForTargetFactory","_ref2","_x2","_validateOptionsFactory","_ref3","_x3","items","CoreSchemaRegistry","additionalJobRegistry","Map","privateArchitectJobRegistry","SimpleJobRegistry","register","jobRegistry","FallbackRegistry","_scheduler","SimpleScheduler","has","scheduleBuilder","scheduleOptions","test","scheduleByName","scheduler","logger","logging","NullLogger","currentDirectory","getCurrentDirectory","workspaceRoot","getWorkspaceRoot","scheduleTarget","overrides","scheduleByTarget"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@angular-devkit/architect/src/architect.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Architect = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst rxjs_1 = require(\"rxjs\");\nconst api_1 = require(\"./api\");\nconst jobs_1 = require(\"./jobs\");\nconst schedule_by_name_1 = require(\"./schedule-by-name\");\nconst inputSchema = require('./input-schema.json');\nconst outputSchema = require('./output-schema.json');\nfunction _createJobHandlerFromBuilderInfo(info, target, host, registry, baseOptions) {\n    const jobDescription = {\n        name: target ? `{${(0, api_1.targetStringFromTarget)(target)}}` : info.builderName,\n        argument: { type: 'object' },\n        input: inputSchema,\n        output: outputSchema,\n        info,\n    };\n    function handler(argument, context) {\n        // Add input validation to the inbound bus.\n        const inboundBusWithInputValidation = context.inboundBus.pipe((0, rxjs_1.concatMap)(async (message) => {\n            if (message.kind === jobs_1.JobInboundMessageKind.Input) {\n                const v = message.value;\n                const options = {\n                    ...baseOptions,\n                    ...v.options,\n                };\n                // Validate v against the options schema.\n                const validation = await registry.compile(info.optionSchema);\n                const validationResult = await validation(options);\n                const { data, success, errors } = validationResult;\n                if (!success) {\n                    throw new core_1.json.schema.SchemaValidationException(errors);\n                }\n                return { ...message, value: { ...v, options: data } };\n            }\n            else {\n                return message;\n            }\n        }), \n        // Using a share replay because the job might be synchronously sending input, but\n        // asynchronously listening to it.\n        (0, rxjs_1.shareReplay)(1));\n        // Make an inboundBus that completes instead of erroring out.\n        // We'll merge the errors into the output instead.\n        const inboundBus = (0, rxjs_1.onErrorResumeNext)(inboundBusWithInputValidation);\n        const output = (0, rxjs_1.from)(host.loadBuilder(info)).pipe((0, rxjs_1.concatMap)((builder) => {\n            if (builder === null) {\n                throw new Error(`Cannot load builder for builderInfo ${JSON.stringify(info, null, 2)}`);\n            }\n            return builder.handler(argument, { ...context, inboundBus }).pipe((0, rxjs_1.map)((output) => {\n                if (output.kind === jobs_1.JobOutboundMessageKind.Output) {\n                    // Add target to it.\n                    return {\n                        ...output,\n                        value: {\n                            ...output.value,\n                            ...(target ? { target } : 0),\n                        },\n                    };\n                }\n                else {\n                    return output;\n                }\n            }));\n        }), \n        // Share subscriptions to the output, otherwise the the handler will be re-run.\n        (0, rxjs_1.shareReplay)());\n        // Separate the errors from the inbound bus into their own observable that completes when the\n        // builder output does.\n        const inboundBusErrors = inboundBusWithInputValidation.pipe((0, rxjs_1.ignoreElements)(), (0, rxjs_1.takeUntil)((0, rxjs_1.onErrorResumeNext)(output.pipe((0, rxjs_1.last)()))));\n        // Return the builder output plus any input errors.\n        return (0, rxjs_1.merge)(inboundBusErrors, output);\n    }\n    return (0, rxjs_1.of)(Object.assign(handler, { jobDescription }));\n}\n/**\n * A JobRegistry that resolves builder targets from the host.\n */\nclass ArchitectBuilderJobRegistry {\n    constructor(_host, _registry, _jobCache, _infoCache) {\n        this._host = _host;\n        this._registry = _registry;\n        this._jobCache = _jobCache;\n        this._infoCache = _infoCache;\n    }\n    _resolveBuilder(name) {\n        const cache = this._infoCache;\n        if (cache) {\n            const maybeCache = cache.get(name);\n            if (maybeCache !== undefined) {\n                return maybeCache;\n            }\n            const info = (0, rxjs_1.from)(this._host.resolveBuilder(name)).pipe((0, rxjs_1.shareReplay)(1));\n            cache.set(name, info);\n            return info;\n        }\n        return (0, rxjs_1.from)(this._host.resolveBuilder(name));\n    }\n    _createBuilder(info, target, options) {\n        const cache = this._jobCache;\n        if (target) {\n            const maybeHit = cache && cache.get((0, api_1.targetStringFromTarget)(target));\n            if (maybeHit) {\n                return maybeHit;\n            }\n        }\n        else {\n            const maybeHit = cache && cache.get(info.builderName);\n            if (maybeHit) {\n                return maybeHit;\n            }\n        }\n        const result = _createJobHandlerFromBuilderInfo(info, target, this._host, this._registry, options || {});\n        if (cache) {\n            if (target) {\n                cache.set((0, api_1.targetStringFromTarget)(target), result.pipe((0, rxjs_1.shareReplay)(1)));\n            }\n            else {\n                cache.set(info.builderName, result.pipe((0, rxjs_1.shareReplay)(1)));\n            }\n        }\n        return result;\n    }\n    get(name) {\n        const m = name.match(/^([^:]+):([^:]+)$/i);\n        if (!m) {\n            return (0, rxjs_1.of)(null);\n        }\n        return (0, rxjs_1.from)(this._resolveBuilder(name)).pipe((0, rxjs_1.concatMap)((builderInfo) => (builderInfo ? this._createBuilder(builderInfo) : (0, rxjs_1.of)(null))), (0, rxjs_1.first)(null, null));\n    }\n}\n/**\n * A JobRegistry that resolves targets from the host.\n */\nclass ArchitectTargetJobRegistry extends ArchitectBuilderJobRegistry {\n    get(name) {\n        const m = name.match(/^{([^:]+):([^:]+)(?::([^:]*))?}$/i);\n        if (!m) {\n            return (0, rxjs_1.of)(null);\n        }\n        const target = {\n            project: m[1],\n            target: m[2],\n            configuration: m[3],\n        };\n        return (0, rxjs_1.from)(Promise.all([\n            this._host.getBuilderNameForTarget(target),\n            this._host.getOptionsForTarget(target),\n        ])).pipe((0, rxjs_1.concatMap)(([builderStr, options]) => {\n            if (builderStr === null || options === null) {\n                return (0, rxjs_1.of)(null);\n            }\n            return this._resolveBuilder(builderStr).pipe((0, rxjs_1.concatMap)((builderInfo) => {\n                if (builderInfo === null) {\n                    return (0, rxjs_1.of)(null);\n                }\n                return this._createBuilder(builderInfo, target, options);\n            }));\n        }), (0, rxjs_1.first)(null, null));\n    }\n}\nfunction _getTargetOptionsFactory(host) {\n    return (0, jobs_1.createJobHandler)((target) => {\n        return host.getOptionsForTarget(target).then((options) => {\n            if (options === null) {\n                throw new Error(`Invalid target: ${JSON.stringify(target)}.`);\n            }\n            return options;\n        });\n    }, {\n        name: '..getTargetOptions',\n        output: { type: 'object' },\n        argument: inputSchema.properties.target,\n    });\n}\nfunction _getProjectMetadataFactory(host) {\n    return (0, jobs_1.createJobHandler)((target) => {\n        return host.getProjectMetadata(target).then((options) => {\n            if (options === null) {\n                throw new Error(`Invalid target: ${JSON.stringify(target)}.`);\n            }\n            return options;\n        });\n    }, {\n        name: '..getProjectMetadata',\n        output: { type: 'object' },\n        argument: {\n            oneOf: [{ type: 'string' }, inputSchema.properties.target],\n        },\n    });\n}\nfunction _getBuilderNameForTargetFactory(host) {\n    return (0, jobs_1.createJobHandler)(async (target) => {\n        const builderName = await host.getBuilderNameForTarget(target);\n        if (!builderName) {\n            throw new Error(`No builder were found for target ${(0, api_1.targetStringFromTarget)(target)}.`);\n        }\n        return builderName;\n    }, {\n        name: '..getBuilderNameForTarget',\n        output: { type: 'string' },\n        argument: inputSchema.properties.target,\n    });\n}\nfunction _validateOptionsFactory(host, registry) {\n    return (0, jobs_1.createJobHandler)(async ([builderName, options]) => {\n        // Get option schema from the host.\n        const builderInfo = await host.resolveBuilder(builderName);\n        if (!builderInfo) {\n            throw new Error(`No builder info were found for builder ${JSON.stringify(builderName)}.`);\n        }\n        const validation = await registry.compile(builderInfo.optionSchema);\n        const { data, success, errors } = await validation(options);\n        if (!success) {\n            throw new core_1.json.schema.SchemaValidationException(errors);\n        }\n        return data;\n    }, {\n        name: '..validateOptions',\n        output: { type: 'object' },\n        argument: {\n            type: 'array',\n            items: [{ type: 'string' }, { type: 'object' }],\n        },\n    });\n}\nclass Architect {\n    constructor(_host, registry = new core_1.json.schema.CoreSchemaRegistry(), additionalJobRegistry) {\n        this._host = _host;\n        this._jobCache = new Map();\n        this._infoCache = new Map();\n        const privateArchitectJobRegistry = new jobs_1.SimpleJobRegistry();\n        // Create private jobs.\n        privateArchitectJobRegistry.register(_getTargetOptionsFactory(_host));\n        privateArchitectJobRegistry.register(_getBuilderNameForTargetFactory(_host));\n        privateArchitectJobRegistry.register(_validateOptionsFactory(_host, registry));\n        privateArchitectJobRegistry.register(_getProjectMetadataFactory(_host));\n        const jobRegistry = new jobs_1.FallbackRegistry([\n            new ArchitectTargetJobRegistry(_host, registry, this._jobCache, this._infoCache),\n            new ArchitectBuilderJobRegistry(_host, registry, this._jobCache, this._infoCache),\n            privateArchitectJobRegistry,\n            ...(additionalJobRegistry ? [additionalJobRegistry] : []),\n        ]);\n        this._scheduler = new jobs_1.SimpleScheduler(jobRegistry, registry);\n    }\n    has(name) {\n        return this._scheduler.has(name);\n    }\n    scheduleBuilder(name, options, scheduleOptions = {}) {\n        // The below will match 'project:target:configuration'\n        if (!/^[^:]+:[^:]+(:[^:]+)?$/.test(name)) {\n            throw new Error('Invalid builder name: ' + JSON.stringify(name));\n        }\n        return (0, schedule_by_name_1.scheduleByName)(name, options, {\n            scheduler: this._scheduler,\n            logger: scheduleOptions.logger || new core_1.logging.NullLogger(),\n            currentDirectory: this._host.getCurrentDirectory(),\n            workspaceRoot: this._host.getWorkspaceRoot(),\n        });\n    }\n    scheduleTarget(target, overrides = {}, scheduleOptions = {}) {\n        return (0, schedule_by_name_1.scheduleByTarget)(target, overrides, {\n            scheduler: this._scheduler,\n            logger: scheduleOptions.logger || new core_1.logging.NullLogger(),\n            currentDirectory: this._host.getCurrentDirectory(),\n            workspaceRoot: this._host.getWorkspaceRoot(),\n        });\n    }\n}\nexports.Architect = Architect;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}