{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OAuthProvider = void 0;\n/*\nCopyright 2022 The Sigstore Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nconst assert_1 = __importDefault(require(\"assert\"));\nconst child_process_1 = __importDefault(require(\"child_process\"));\nconst http_1 = __importDefault(require(\"http\"));\nconst make_fetch_happen_1 = __importDefault(require(\"make-fetch-happen\"));\nconst url_1 = require(\"url\");\nconst util_1 = require(\"../util\");\nclass OAuthProvider {\n  constructor(options) {\n    this.clientID = options.clientID;\n    this.clientSecret = options.clientSecret || '';\n    this.issuer = options.issuer;\n    this.redirectURI = options.redirectURL;\n    this.codeVerifier = generateRandomString(32);\n    this.state = generateRandomString(16);\n  }\n  getToken() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const authCode = yield _this.initiateAuthRequest();\n      return _this.getIDToken(authCode);\n    })();\n  }\n  // Initates the authorization request. This will start an HTTP server to\n  // receive the post-auth redirect and then open the user's default browser to\n  // the provider's authorization page.\n  initiateAuthRequest() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const server = http_1.default.createServer();\n      const sockets = new Set();\n      // Start server and wait till it is listening. If a redirect URL was\n      // provided, use that. Otherwise, use a random port and construct the\n      // redirect URL.\n      yield new Promise(resolve => {\n        if (_this2.redirectURI) {\n          const url = new url_1.URL(_this2.redirectURI);\n          server.listen(Number(url.port), url.hostname, resolve);\n        } else {\n          server.listen(0, resolve);\n          // Get port the server is listening on and construct the server URL\n          const port = server.address().port;\n          _this2.redirectURI = `http://localhost:${port}`;\n        }\n      });\n      // Keep track of connections to the server so we can force a shutdown\n      server.on('connection', socket => {\n        sockets.add(socket);\n        socket.once('close', () => {\n          sockets.delete(socket);\n        });\n      });\n      const result = new Promise((resolve, reject) => {\n        // Set-up handler for post-auth redirect\n        server.on('request', (req, res) => {\n          if (!req.url) {\n            reject('invalid server request');\n            return;\n          }\n          res.writeHead(200);\n          res.end('Auth Successful');\n          // Parse incoming request URL\n          const query = new url_1.URL(req.url, _this2.redirectURI).searchParams;\n          // Check to see if the state matches\n          if (query.get('state') !== _this2.state) {\n            reject('invalid state value');\n            return;\n          }\n          const authCode = query.get('code');\n          // Force-close any open connections to the server so we can get a\n          // clean shutdown\n          for (const socket of sockets) {\n            socket.destroy();\n            sockets.delete(socket);\n          }\n          // Return auth code once we've shutdown server\n          server.close(() => {\n            if (!authCode) {\n              reject('authorization code not found');\n            } else {\n              resolve(authCode);\n            }\n          });\n        });\n      });\n      try {\n        // Open browser to start authorization request\n        const authBaseURL = yield _this2.issuer.authEndpoint();\n        const authURL = _this2.getAuthRequestURL(authBaseURL);\n        yield _this2.openURL(authURL);\n      } catch (err) {\n        // Prevent leaked server handler on error\n        server.close();\n        throw err;\n      }\n      return result;\n    })();\n  }\n  // Uses the provided authorization code, to retrieve the ID token from the\n  // provider\n  getIDToken(authCode) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      (0, assert_1.default)(_this3.redirectURI);\n      const tokenEndpointURL = yield _this3.issuer.tokenEndpoint();\n      const params = new url_1.URLSearchParams();\n      params.append('grant_type', 'authorization_code');\n      params.append('code', authCode);\n      params.append('redirect_uri', _this3.redirectURI);\n      params.append('code_verifier', _this3.codeVerifier);\n      const response = yield (0, make_fetch_happen_1.default)(tokenEndpointURL, {\n        method: 'POST',\n        headers: {\n          Authorization: `Basic ${_this3.getBasicAuthHeaderValue()}`\n        },\n        body: params\n      }).then(r => r.json());\n      return response.id_token;\n    })();\n  }\n  // Construct the basic auth header value from the client ID and secret\n  getBasicAuthHeaderValue() {\n    return util_1.encoding.base64Encode(`${this.clientID}:${this.clientSecret}`);\n  }\n  // Generate starting URL for authorization request\n  getAuthRequestURL(baseURL) {\n    const params = this.getAuthRequestParams();\n    return `${baseURL}?${params.toString()}`;\n  }\n  // Collect parameters for authorization request\n  getAuthRequestParams() {\n    (0, assert_1.default)(this.redirectURI);\n    const codeChallenge = this.getCodeChallenge();\n    return new url_1.URLSearchParams({\n      response_type: 'code',\n      client_id: this.clientID,\n      client_secret: this.clientSecret,\n      scope: 'openid email',\n      redirect_uri: this.redirectURI,\n      code_challenge: codeChallenge,\n      code_challenge_method: 'S256',\n      state: this.state,\n      nonce: generateRandomString(16)\n    });\n  }\n  // Generate code challenge for authorization request\n  getCodeChallenge() {\n    return util_1.encoding.base64URLEscape(util_1.crypto.hash(this.codeVerifier).toString('base64'));\n  }\n  // Open the supplied URL in the user's default browser\n  openURL(url) {\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        let open = null;\n        let command = `\"${url}\"`;\n        switch (process.platform) {\n          case 'darwin':\n            open = 'open';\n            break;\n          case 'linux' || 'freebsd' || 'netbsd' || 'openbsd':\n            open = 'xdg-open';\n            break;\n          case 'win32':\n            open = 'start';\n            command = `\"\" ${command}`;\n            break;\n          default:\n            return reject(`OAuth: unsupported platform: ${process.platform}`);\n        }\n        console.error(`Your browser will now be opened to: ${url}`);\n        child_process_1.default.exec(`${open} ${command}`, undefined, err => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      });\n    })();\n  }\n}\nexports.OAuthProvider = OAuthProvider;\n// Generate random code verifier value\nfunction generateRandomString(len) {\n  return util_1.encoding.base64URLEscape(util_1.crypto.randomBytes(len).toString('base64'));\n}","map":{"version":3,"names":["_asyncToGenerator","require","default","__importDefault","mod","__esModule","Object","defineProperty","exports","value","OAuthProvider","assert_1","child_process_1","http_1","make_fetch_happen_1","url_1","util_1","constructor","options","clientID","clientSecret","issuer","redirectURI","redirectURL","codeVerifier","generateRandomString","state","getToken","_this","authCode","initiateAuthRequest","getIDToken","_this2","server","createServer","sockets","Set","Promise","resolve","url","URL","listen","Number","port","hostname","address","on","socket","add","once","delete","result","reject","req","res","writeHead","end","query","searchParams","get","destroy","close","authBaseURL","authEndpoint","authURL","getAuthRequestURL","openURL","err","_this3","tokenEndpointURL","tokenEndpoint","params","URLSearchParams","append","response","method","headers","Authorization","getBasicAuthHeaderValue","body","then","r","json","id_token","encoding","base64Encode","baseURL","getAuthRequestParams","toString","codeChallenge","getCodeChallenge","response_type","client_id","client_secret","scope","redirect_uri","code_challenge","code_challenge_method","nonce","base64URLEscape","crypto","hash","open","command","process","platform","console","error","exec","undefined","len","randomBytes"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/sigstore/dist/identity/oauth.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OAuthProvider = void 0;\n/*\nCopyright 2022 The Sigstore Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nconst assert_1 = __importDefault(require(\"assert\"));\nconst child_process_1 = __importDefault(require(\"child_process\"));\nconst http_1 = __importDefault(require(\"http\"));\nconst make_fetch_happen_1 = __importDefault(require(\"make-fetch-happen\"));\nconst url_1 = require(\"url\");\nconst util_1 = require(\"../util\");\nclass OAuthProvider {\n    constructor(options) {\n        this.clientID = options.clientID;\n        this.clientSecret = options.clientSecret || '';\n        this.issuer = options.issuer;\n        this.redirectURI = options.redirectURL;\n        this.codeVerifier = generateRandomString(32);\n        this.state = generateRandomString(16);\n    }\n    async getToken() {\n        const authCode = await this.initiateAuthRequest();\n        return this.getIDToken(authCode);\n    }\n    // Initates the authorization request. This will start an HTTP server to\n    // receive the post-auth redirect and then open the user's default browser to\n    // the provider's authorization page.\n    async initiateAuthRequest() {\n        const server = http_1.default.createServer();\n        const sockets = new Set();\n        // Start server and wait till it is listening. If a redirect URL was\n        // provided, use that. Otherwise, use a random port and construct the\n        // redirect URL.\n        await new Promise((resolve) => {\n            if (this.redirectURI) {\n                const url = new url_1.URL(this.redirectURI);\n                server.listen(Number(url.port), url.hostname, resolve);\n            }\n            else {\n                server.listen(0, resolve);\n                // Get port the server is listening on and construct the server URL\n                const port = server.address().port;\n                this.redirectURI = `http://localhost:${port}`;\n            }\n        });\n        // Keep track of connections to the server so we can force a shutdown\n        server.on('connection', (socket) => {\n            sockets.add(socket);\n            socket.once('close', () => {\n                sockets.delete(socket);\n            });\n        });\n        const result = new Promise((resolve, reject) => {\n            // Set-up handler for post-auth redirect\n            server.on('request', (req, res) => {\n                if (!req.url) {\n                    reject('invalid server request');\n                    return;\n                }\n                res.writeHead(200);\n                res.end('Auth Successful');\n                // Parse incoming request URL\n                const query = new url_1.URL(req.url, this.redirectURI).searchParams;\n                // Check to see if the state matches\n                if (query.get('state') !== this.state) {\n                    reject('invalid state value');\n                    return;\n                }\n                const authCode = query.get('code');\n                // Force-close any open connections to the server so we can get a\n                // clean shutdown\n                for (const socket of sockets) {\n                    socket.destroy();\n                    sockets.delete(socket);\n                }\n                // Return auth code once we've shutdown server\n                server.close(() => {\n                    if (!authCode) {\n                        reject('authorization code not found');\n                    }\n                    else {\n                        resolve(authCode);\n                    }\n                });\n            });\n        });\n        try {\n            // Open browser to start authorization request\n            const authBaseURL = await this.issuer.authEndpoint();\n            const authURL = this.getAuthRequestURL(authBaseURL);\n            await this.openURL(authURL);\n        }\n        catch (err) {\n            // Prevent leaked server handler on error\n            server.close();\n            throw err;\n        }\n        return result;\n    }\n    // Uses the provided authorization code, to retrieve the ID token from the\n    // provider\n    async getIDToken(authCode) {\n        (0, assert_1.default)(this.redirectURI);\n        const tokenEndpointURL = await this.issuer.tokenEndpoint();\n        const params = new url_1.URLSearchParams();\n        params.append('grant_type', 'authorization_code');\n        params.append('code', authCode);\n        params.append('redirect_uri', this.redirectURI);\n        params.append('code_verifier', this.codeVerifier);\n        const response = await (0, make_fetch_happen_1.default)(tokenEndpointURL, {\n            method: 'POST',\n            headers: { Authorization: `Basic ${this.getBasicAuthHeaderValue()}` },\n            body: params,\n        }).then((r) => r.json());\n        return response.id_token;\n    }\n    // Construct the basic auth header value from the client ID and secret\n    getBasicAuthHeaderValue() {\n        return util_1.encoding.base64Encode(`${this.clientID}:${this.clientSecret}`);\n    }\n    // Generate starting URL for authorization request\n    getAuthRequestURL(baseURL) {\n        const params = this.getAuthRequestParams();\n        return `${baseURL}?${params.toString()}`;\n    }\n    // Collect parameters for authorization request\n    getAuthRequestParams() {\n        (0, assert_1.default)(this.redirectURI);\n        const codeChallenge = this.getCodeChallenge();\n        return new url_1.URLSearchParams({\n            response_type: 'code',\n            client_id: this.clientID,\n            client_secret: this.clientSecret,\n            scope: 'openid email',\n            redirect_uri: this.redirectURI,\n            code_challenge: codeChallenge,\n            code_challenge_method: 'S256',\n            state: this.state,\n            nonce: generateRandomString(16),\n        });\n    }\n    // Generate code challenge for authorization request\n    getCodeChallenge() {\n        return util_1.encoding.base64URLEscape(util_1.crypto.hash(this.codeVerifier).toString('base64'));\n    }\n    // Open the supplied URL in the user's default browser\n    async openURL(url) {\n        return new Promise((resolve, reject) => {\n            let open = null;\n            let command = `\"${url}\"`;\n            switch (process.platform) {\n                case 'darwin':\n                    open = 'open';\n                    break;\n                case 'linux' || 'freebsd' || 'netbsd' || 'openbsd':\n                    open = 'xdg-open';\n                    break;\n                case 'win32':\n                    open = 'start';\n                    command = `\"\" ${command}`;\n                    break;\n                default:\n                    return reject(`OAuth: unsupported platform: ${process.platform}`);\n            }\n            console.error(`Your browser will now be opened to: ${url}`);\n            child_process_1.default.exec(`${open} ${command}`, undefined, (err) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n}\nexports.OAuthProvider = OAuthProvider;\n// Generate random code verifier value\nfunction generateRandomString(len) {\n    return util_1.encoding.base64URLEscape(util_1.crypto.randomBytes(len).toString('base64'));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}