{"ast":null,"code":"\"use strict\";\n\n/*\nCopyright 2023 The Sigstore Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeLength = exports.decodeLength = void 0;\nconst error_1 = require(\"./error\");\n// Decodes the length of a DER-encoded ANS.1 element from the supplied stream.\n// https://learn.microsoft.com/en-us/windows/win32/seccertenroll/about-encoded-length-and-value-bytes\nfunction decodeLength(stream) {\n  const buf = stream.getUint8();\n  // If the most significant bit is UNSET the length is just the value of the\n  // byte.\n  if ((buf & 0x80) === 0x00) {\n    return buf;\n  }\n  // Otherwise, the lower 7 bits of the first byte indicate the number of bytes\n  // that follow to encode the length.\n  const byteCount = buf & 0x7f;\n  // Ensure the encoded length can safely fit in a JS number.\n  if (byteCount > 6) {\n    throw new error_1.ASN1ParseError('length exceeds 6 byte limit');\n  }\n  // Iterate over the bytes that encode the length.\n  let len = 0;\n  for (let i = 0; i < byteCount; i++) {\n    len = len * 256 + stream.getUint8();\n  }\n  // This is a valid ASN.1 length encoding, but we don't support it.\n  if (len === 0) {\n    throw new error_1.ASN1ParseError('indefinite length encoding not supported');\n  }\n  return len;\n}\nexports.decodeLength = decodeLength;\n// Translates the supplied value to a DER-encoded length.\nfunction encodeLength(len) {\n  if (len < 128) {\n    return Buffer.from([len]);\n  }\n  // Bitwise operations on large numbers are not supported in JS, so we need to\n  // use BigInts.\n  let val = BigInt(len);\n  const bytes = [];\n  while (val > 0n) {\n    bytes.unshift(Number(val & 255n));\n    val = val >> 8n;\n  }\n  return Buffer.from([0x80 | bytes.length, ...bytes]);\n}\nexports.encodeLength = encodeLength;","map":{"version":3,"names":["Object","defineProperty","exports","value","encodeLength","decodeLength","error_1","require","stream","buf","getUint8","byteCount","ASN1ParseError","len","i","Buffer","from","val","BigInt","bytes","unshift","Number","length"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/sigstore/dist/util/asn1/length.js"],"sourcesContent":["\"use strict\";\n/*\nCopyright 2023 The Sigstore Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encodeLength = exports.decodeLength = void 0;\nconst error_1 = require(\"./error\");\n// Decodes the length of a DER-encoded ANS.1 element from the supplied stream.\n// https://learn.microsoft.com/en-us/windows/win32/seccertenroll/about-encoded-length-and-value-bytes\nfunction decodeLength(stream) {\n    const buf = stream.getUint8();\n    // If the most significant bit is UNSET the length is just the value of the\n    // byte.\n    if ((buf & 0x80) === 0x00) {\n        return buf;\n    }\n    // Otherwise, the lower 7 bits of the first byte indicate the number of bytes\n    // that follow to encode the length.\n    const byteCount = buf & 0x7f;\n    // Ensure the encoded length can safely fit in a JS number.\n    if (byteCount > 6) {\n        throw new error_1.ASN1ParseError('length exceeds 6 byte limit');\n    }\n    // Iterate over the bytes that encode the length.\n    let len = 0;\n    for (let i = 0; i < byteCount; i++) {\n        len = len * 256 + stream.getUint8();\n    }\n    // This is a valid ASN.1 length encoding, but we don't support it.\n    if (len === 0) {\n        throw new error_1.ASN1ParseError('indefinite length encoding not supported');\n    }\n    return len;\n}\nexports.decodeLength = decodeLength;\n// Translates the supplied value to a DER-encoded length.\nfunction encodeLength(len) {\n    if (len < 128) {\n        return Buffer.from([len]);\n    }\n    // Bitwise operations on large numbers are not supported in JS, so we need to\n    // use BigInts.\n    let val = BigInt(len);\n    const bytes = [];\n    while (val > 0n) {\n        bytes.unshift(Number(val & 255n));\n        val = val >> 8n;\n    }\n    return Buffer.from([0x80 | bytes.length, ...bytes]);\n}\nexports.encodeLength = encodeLength;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,YAAY,GAAGF,OAAO,CAACG,YAAY,GAAG,KAAK,CAAC;AACpD,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC;AACA;AACA,SAASF,YAAYA,CAACG,MAAM,EAAE;EAC1B,MAAMC,GAAG,GAAGD,MAAM,CAACE,QAAQ,CAAC,CAAC;EAC7B;EACA;EACA,IAAI,CAACD,GAAG,GAAG,IAAI,MAAM,IAAI,EAAE;IACvB,OAAOA,GAAG;EACd;EACA;EACA;EACA,MAAME,SAAS,GAAGF,GAAG,GAAG,IAAI;EAC5B;EACA,IAAIE,SAAS,GAAG,CAAC,EAAE;IACf,MAAM,IAAIL,OAAO,CAACM,cAAc,CAAC,6BAA6B,CAAC;EACnE;EACA;EACA,IAAIC,GAAG,GAAG,CAAC;EACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,SAAS,EAAEG,CAAC,EAAE,EAAE;IAChCD,GAAG,GAAGA,GAAG,GAAG,GAAG,GAAGL,MAAM,CAACE,QAAQ,CAAC,CAAC;EACvC;EACA;EACA,IAAIG,GAAG,KAAK,CAAC,EAAE;IACX,MAAM,IAAIP,OAAO,CAACM,cAAc,CAAC,0CAA0C,CAAC;EAChF;EACA,OAAOC,GAAG;AACd;AACAX,OAAO,CAACG,YAAY,GAAGA,YAAY;AACnC;AACA,SAASD,YAAYA,CAACS,GAAG,EAAE;EACvB,IAAIA,GAAG,GAAG,GAAG,EAAE;IACX,OAAOE,MAAM,CAACC,IAAI,CAAC,CAACH,GAAG,CAAC,CAAC;EAC7B;EACA;EACA;EACA,IAAII,GAAG,GAAGC,MAAM,CAACL,GAAG,CAAC;EACrB,MAAMM,KAAK,GAAG,EAAE;EAChB,OAAOF,GAAG,GAAG,EAAE,EAAE;IACbE,KAAK,CAACC,OAAO,CAACC,MAAM,CAACJ,GAAG,GAAG,IAAI,CAAC,CAAC;IACjCA,GAAG,GAAGA,GAAG,IAAI,EAAE;EACnB;EACA,OAAOF,MAAM,CAACC,IAAI,CAAC,CAAC,IAAI,GAAGG,KAAK,CAACG,MAAM,EAAE,GAAGH,KAAK,CAAC,CAAC;AACvD;AACAjB,OAAO,CAACE,YAAY,GAAGA,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}