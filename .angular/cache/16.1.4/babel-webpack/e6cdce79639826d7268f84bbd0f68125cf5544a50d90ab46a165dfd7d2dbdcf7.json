{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _asyncToGenerator = require(\"C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst module_1 = __importDefault(require(\"module\"));\nconst path_1 = require(\"path\");\nconst command_module_1 = require(\"../../command-builder/command-module\");\nconst color_1 = require(\"../../utilities/color\");\nconst command_config_1 = require(\"../command-config\");\n/**\n * Major versions of Node.js that are officially supported by Angular.\n */\nconst SUPPORTED_NODE_MAJORS = [16, 18];\nconst PACKAGE_PATTERNS = [/^@angular\\/.*/, /^@angular-devkit\\/.*/, /^@bazel\\/.*/, /^@ngtools\\/.*/, /^@nguniversal\\/.*/, /^@schematics\\/.*/, /^rxjs$/, /^typescript$/, /^ng-packagr$/, /^webpack$/];\nclass VersionCommandModule extends command_module_1.CommandModule {\n  constructor() {\n    super(...arguments);\n    this.command = 'version';\n    this.aliases = command_config_1.RootCommands['version'].aliases;\n    this.describe = 'Outputs Angular CLI version.';\n  }\n  builder(localYargs) {\n    return localYargs;\n  }\n  run() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const {\n        packageManager,\n        logger,\n        root\n      } = _this.context;\n      const localRequire = module_1.default.createRequire((0, path_1.resolve)(__filename, '../../../'));\n      // Trailing slash is used to allow the path to be treated as a directory\n      const workspaceRequire = module_1.default.createRequire(root + '/');\n      const cliPackage = localRequire('./package.json');\n      let workspacePackage;\n      try {\n        workspacePackage = workspaceRequire('./package.json');\n      } catch {}\n      const [nodeMajor] = process.versions.node.split('.').map(part => Number(part));\n      const unsupportedNodeVersion = !SUPPORTED_NODE_MAJORS.includes(nodeMajor);\n      const packageNames = new Set(Object.keys({\n        ...cliPackage.dependencies,\n        ...cliPackage.devDependencies,\n        ...workspacePackage?.dependencies,\n        ...workspacePackage?.devDependencies\n      }));\n      const versions = {};\n      for (const name of packageNames) {\n        if (PACKAGE_PATTERNS.some(p => p.test(name))) {\n          versions[name] = _this.getVersion(name, workspaceRequire, localRequire);\n        }\n      }\n      const ngCliVersion = cliPackage.version;\n      let angularCoreVersion = '';\n      const angularSameAsCore = [];\n      if (workspacePackage) {\n        // Filter all angular versions that are the same as core.\n        angularCoreVersion = versions['@angular/core'];\n        if (angularCoreVersion) {\n          for (const [name, version] of Object.entries(versions)) {\n            if (version === angularCoreVersion && name.startsWith('@angular/')) {\n              angularSameAsCore.push(name.replace(/^@angular\\//, ''));\n              delete versions[name];\n            }\n          }\n          // Make sure we list them in alphabetical order.\n          angularSameAsCore.sort();\n        }\n      }\n      const namePad = ' '.repeat(Object.keys(versions).sort((a, b) => b.length - a.length)[0].length + 3);\n      const asciiArt = `\n     _                      _                 ____ _     ___\n    / \\\\   _ __   __ _ _   _| | __ _ _ __     / ___| |   |_ _|\n   / â–³ \\\\ | '_ \\\\ / _\\` | | | | |/ _\\` | '__|   | |   | |    | |\n  / ___ \\\\| | | | (_| | |_| | | (_| | |      | |___| |___ | |\n /_/   \\\\_\\\\_| |_|\\\\__, |\\\\__,_|_|\\\\__,_|_|       \\\\____|_____|___|\n                |___/\n    `.split('\\n').map(x => color_1.colors.red(x)).join('\\n');\n      logger.info(asciiArt);\n      logger.info(`\n      Angular CLI: ${ngCliVersion}\n      Node: ${process.versions.node}${unsupportedNodeVersion ? ' (Unsupported)' : ''}\n      Package Manager: ${packageManager.name} ${packageManager.version ?? '<error>'}\n      OS: ${process.platform} ${process.arch}\n\n      Angular: ${angularCoreVersion}\n      ... ${angularSameAsCore.reduce((acc, name) => {\n        // Perform a simple word wrap around 60.\n        if (acc.length == 0) {\n          return [name];\n        }\n        const line = acc[acc.length - 1] + ', ' + name;\n        if (line.length > 60) {\n          acc.push(name);\n        } else {\n          acc[acc.length - 1] = line;\n        }\n        return acc;\n      }, []).join('\\n... ')}\n\n      Package${namePad.slice(7)}Version\n      -------${namePad.replace(/ /g, '-')}------------------\n      ${Object.keys(versions).map(module => `${module}${namePad.slice(module.length)}${versions[module]}`).sort().join('\\n')}\n    `.replace(/^ {6}/gm, ''));\n      if (unsupportedNodeVersion) {\n        logger.warn(`Warning: The current version of Node (${process.versions.node}) is not supported by Angular.`);\n      }\n    })();\n  }\n  getVersion(moduleName, workspaceRequire, localRequire) {\n    let packageInfo;\n    let cliOnly = false;\n    // Try to find the package in the workspace\n    try {\n      packageInfo = workspaceRequire(`${moduleName}/package.json`);\n    } catch {}\n    // If not found, try to find within the CLI\n    if (!packageInfo) {\n      try {\n        packageInfo = localRequire(`${moduleName}/package.json`);\n        cliOnly = true;\n      } catch {}\n    }\n    // If found, attempt to get the version\n    if (packageInfo) {\n      try {\n        return packageInfo.version + (cliOnly ? ' (cli-only)' : '');\n      } catch {}\n    }\n    return '<error>';\n  }\n}\nexports.default = VersionCommandModule;","map":{"version":3,"names":["_asyncToGenerator","require","default","__importDefault","mod","__esModule","Object","defineProperty","exports","value","module_1","path_1","command_module_1","color_1","command_config_1","SUPPORTED_NODE_MAJORS","PACKAGE_PATTERNS","VersionCommandModule","CommandModule","constructor","arguments","command","aliases","RootCommands","describe","builder","localYargs","run","_this","packageManager","logger","root","context","localRequire","createRequire","resolve","__filename","workspaceRequire","cliPackage","workspacePackage","nodeMajor","process","versions","node","split","map","part","Number","unsupportedNodeVersion","includes","packageNames","Set","keys","dependencies","devDependencies","name","some","p","test","getVersion","ngCliVersion","version","angularCoreVersion","angularSameAsCore","entries","startsWith","push","replace","sort","namePad","repeat","a","b","length","asciiArt","x","colors","red","join","info","platform","arch","reduce","acc","line","slice","module","warn","moduleName","packageInfo","cliOnly"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@angular/cli/src/commands/version/cli.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst module_1 = __importDefault(require(\"module\"));\nconst path_1 = require(\"path\");\nconst command_module_1 = require(\"../../command-builder/command-module\");\nconst color_1 = require(\"../../utilities/color\");\nconst command_config_1 = require(\"../command-config\");\n/**\n * Major versions of Node.js that are officially supported by Angular.\n */\nconst SUPPORTED_NODE_MAJORS = [16, 18];\nconst PACKAGE_PATTERNS = [\n    /^@angular\\/.*/,\n    /^@angular-devkit\\/.*/,\n    /^@bazel\\/.*/,\n    /^@ngtools\\/.*/,\n    /^@nguniversal\\/.*/,\n    /^@schematics\\/.*/,\n    /^rxjs$/,\n    /^typescript$/,\n    /^ng-packagr$/,\n    /^webpack$/,\n];\nclass VersionCommandModule extends command_module_1.CommandModule {\n    constructor() {\n        super(...arguments);\n        this.command = 'version';\n        this.aliases = command_config_1.RootCommands['version'].aliases;\n        this.describe = 'Outputs Angular CLI version.';\n    }\n    builder(localYargs) {\n        return localYargs;\n    }\n    async run() {\n        const { packageManager, logger, root } = this.context;\n        const localRequire = module_1.default.createRequire((0, path_1.resolve)(__filename, '../../../'));\n        // Trailing slash is used to allow the path to be treated as a directory\n        const workspaceRequire = module_1.default.createRequire(root + '/');\n        const cliPackage = localRequire('./package.json');\n        let workspacePackage;\n        try {\n            workspacePackage = workspaceRequire('./package.json');\n        }\n        catch { }\n        const [nodeMajor] = process.versions.node.split('.').map((part) => Number(part));\n        const unsupportedNodeVersion = !SUPPORTED_NODE_MAJORS.includes(nodeMajor);\n        const packageNames = new Set(Object.keys({\n            ...cliPackage.dependencies,\n            ...cliPackage.devDependencies,\n            ...workspacePackage?.dependencies,\n            ...workspacePackage?.devDependencies,\n        }));\n        const versions = {};\n        for (const name of packageNames) {\n            if (PACKAGE_PATTERNS.some((p) => p.test(name))) {\n                versions[name] = this.getVersion(name, workspaceRequire, localRequire);\n            }\n        }\n        const ngCliVersion = cliPackage.version;\n        let angularCoreVersion = '';\n        const angularSameAsCore = [];\n        if (workspacePackage) {\n            // Filter all angular versions that are the same as core.\n            angularCoreVersion = versions['@angular/core'];\n            if (angularCoreVersion) {\n                for (const [name, version] of Object.entries(versions)) {\n                    if (version === angularCoreVersion && name.startsWith('@angular/')) {\n                        angularSameAsCore.push(name.replace(/^@angular\\//, ''));\n                        delete versions[name];\n                    }\n                }\n                // Make sure we list them in alphabetical order.\n                angularSameAsCore.sort();\n            }\n        }\n        const namePad = ' '.repeat(Object.keys(versions).sort((a, b) => b.length - a.length)[0].length + 3);\n        const asciiArt = `\n     _                      _                 ____ _     ___\n    / \\\\   _ __   __ _ _   _| | __ _ _ __     / ___| |   |_ _|\n   / â–³ \\\\ | '_ \\\\ / _\\` | | | | |/ _\\` | '__|   | |   | |    | |\n  / ___ \\\\| | | | (_| | |_| | | (_| | |      | |___| |___ | |\n /_/   \\\\_\\\\_| |_|\\\\__, |\\\\__,_|_|\\\\__,_|_|       \\\\____|_____|___|\n                |___/\n    `\n            .split('\\n')\n            .map((x) => color_1.colors.red(x))\n            .join('\\n');\n        logger.info(asciiArt);\n        logger.info(`\n      Angular CLI: ${ngCliVersion}\n      Node: ${process.versions.node}${unsupportedNodeVersion ? ' (Unsupported)' : ''}\n      Package Manager: ${packageManager.name} ${packageManager.version ?? '<error>'}\n      OS: ${process.platform} ${process.arch}\n\n      Angular: ${angularCoreVersion}\n      ... ${angularSameAsCore\n            .reduce((acc, name) => {\n            // Perform a simple word wrap around 60.\n            if (acc.length == 0) {\n                return [name];\n            }\n            const line = acc[acc.length - 1] + ', ' + name;\n            if (line.length > 60) {\n                acc.push(name);\n            }\n            else {\n                acc[acc.length - 1] = line;\n            }\n            return acc;\n        }, [])\n            .join('\\n... ')}\n\n      Package${namePad.slice(7)}Version\n      -------${namePad.replace(/ /g, '-')}------------------\n      ${Object.keys(versions)\n            .map((module) => `${module}${namePad.slice(module.length)}${versions[module]}`)\n            .sort()\n            .join('\\n')}\n    `.replace(/^ {6}/gm, ''));\n        if (unsupportedNodeVersion) {\n            logger.warn(`Warning: The current version of Node (${process.versions.node}) is not supported by Angular.`);\n        }\n    }\n    getVersion(moduleName, workspaceRequire, localRequire) {\n        let packageInfo;\n        let cliOnly = false;\n        // Try to find the package in the workspace\n        try {\n            packageInfo = workspaceRequire(`${moduleName}/package.json`);\n        }\n        catch { }\n        // If not found, try to find within the CLI\n        if (!packageInfo) {\n            try {\n                packageInfo = localRequire(`${moduleName}/package.json`);\n                cliOnly = true;\n            }\n            catch { }\n        }\n        // If found, attempt to get the version\n        if (packageInfo) {\n            try {\n                return packageInfo.version + (cliOnly ? ' (cli-only)' : '');\n            }\n            catch { }\n        }\n        return '<error>';\n    }\n}\nexports.default = VersionCommandModule;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}