{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DownloadHTTPError = exports.DownloadLengthMismatchError = exports.DownloadError = exports.ExpiredMetadataError = exports.EqualVersionError = exports.BadVersionError = exports.RepositoryError = exports.PersistError = exports.RuntimeError = exports.ValueError = void 0;\n// An error about insufficient values\nclass ValueError extends Error {}\nexports.ValueError = ValueError;\nclass RuntimeError extends Error {}\nexports.RuntimeError = RuntimeError;\nclass PersistError extends Error {}\nexports.PersistError = PersistError;\n// An error with a repository's state, such as a missing file.\n// It covers all exceptions that come from the repository side when\n// looking from the perspective of users of metadata API or ngclient.\nclass RepositoryError extends Error {}\nexports.RepositoryError = RepositoryError;\n// An error for metadata that contains an invalid version number.\nclass BadVersionError extends RepositoryError {}\nexports.BadVersionError = BadVersionError;\n// An error for metadata containing a previously verified version number.\nclass EqualVersionError extends BadVersionError {}\nexports.EqualVersionError = EqualVersionError;\n// Indicate that a TUF Metadata file has expired.\nclass ExpiredMetadataError extends RepositoryError {}\nexports.ExpiredMetadataError = ExpiredMetadataError;\n//----- Download Errors -------------------------------------------------------\n// An error occurred while attempting to download a file.\nclass DownloadError extends Error {}\nexports.DownloadError = DownloadError;\n// Indicate that a mismatch of lengths was seen while downloading a file\nclass DownloadLengthMismatchError extends DownloadError {}\nexports.DownloadLengthMismatchError = DownloadLengthMismatchError;\n// Returned by FetcherInterface implementations for HTTP errors.\nclass DownloadHTTPError extends DownloadError {\n  constructor(message, statusCode) {\n    super(message);\n    this.statusCode = statusCode;\n  }\n}\nexports.DownloadHTTPError = DownloadHTTPError;","map":{"version":3,"names":["Object","defineProperty","exports","value","DownloadHTTPError","DownloadLengthMismatchError","DownloadError","ExpiredMetadataError","EqualVersionError","BadVersionError","RepositoryError","PersistError","RuntimeError","ValueError","Error","constructor","message","statusCode"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/tuf-js/dist/error.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DownloadHTTPError = exports.DownloadLengthMismatchError = exports.DownloadError = exports.ExpiredMetadataError = exports.EqualVersionError = exports.BadVersionError = exports.RepositoryError = exports.PersistError = exports.RuntimeError = exports.ValueError = void 0;\n// An error about insufficient values\nclass ValueError extends Error {\n}\nexports.ValueError = ValueError;\nclass RuntimeError extends Error {\n}\nexports.RuntimeError = RuntimeError;\nclass PersistError extends Error {\n}\nexports.PersistError = PersistError;\n// An error with a repository's state, such as a missing file.\n// It covers all exceptions that come from the repository side when\n// looking from the perspective of users of metadata API or ngclient.\nclass RepositoryError extends Error {\n}\nexports.RepositoryError = RepositoryError;\n// An error for metadata that contains an invalid version number.\nclass BadVersionError extends RepositoryError {\n}\nexports.BadVersionError = BadVersionError;\n// An error for metadata containing a previously verified version number.\nclass EqualVersionError extends BadVersionError {\n}\nexports.EqualVersionError = EqualVersionError;\n// Indicate that a TUF Metadata file has expired.\nclass ExpiredMetadataError extends RepositoryError {\n}\nexports.ExpiredMetadataError = ExpiredMetadataError;\n//----- Download Errors -------------------------------------------------------\n// An error occurred while attempting to download a file.\nclass DownloadError extends Error {\n}\nexports.DownloadError = DownloadError;\n// Indicate that a mismatch of lengths was seen while downloading a file\nclass DownloadLengthMismatchError extends DownloadError {\n}\nexports.DownloadLengthMismatchError = DownloadLengthMismatchError;\n// Returned by FetcherInterface implementations for HTTP errors.\nclass DownloadHTTPError extends DownloadError {\n    constructor(message, statusCode) {\n        super(message);\n        this.statusCode = statusCode;\n    }\n}\nexports.DownloadHTTPError = DownloadHTTPError;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,iBAAiB,GAAGF,OAAO,CAACG,2BAA2B,GAAGH,OAAO,CAACI,aAAa,GAAGJ,OAAO,CAACK,oBAAoB,GAAGL,OAAO,CAACM,iBAAiB,GAAGN,OAAO,CAACO,eAAe,GAAGP,OAAO,CAACQ,eAAe,GAAGR,OAAO,CAACS,YAAY,GAAGT,OAAO,CAACU,YAAY,GAAGV,OAAO,CAACW,UAAU,GAAG,KAAK,CAAC;AAClR;AACA,MAAMA,UAAU,SAASC,KAAK,CAAC;AAE/BZ,OAAO,CAACW,UAAU,GAAGA,UAAU;AAC/B,MAAMD,YAAY,SAASE,KAAK,CAAC;AAEjCZ,OAAO,CAACU,YAAY,GAAGA,YAAY;AACnC,MAAMD,YAAY,SAASG,KAAK,CAAC;AAEjCZ,OAAO,CAACS,YAAY,GAAGA,YAAY;AACnC;AACA;AACA;AACA,MAAMD,eAAe,SAASI,KAAK,CAAC;AAEpCZ,OAAO,CAACQ,eAAe,GAAGA,eAAe;AACzC;AACA,MAAMD,eAAe,SAASC,eAAe,CAAC;AAE9CR,OAAO,CAACO,eAAe,GAAGA,eAAe;AACzC;AACA,MAAMD,iBAAiB,SAASC,eAAe,CAAC;AAEhDP,OAAO,CAACM,iBAAiB,GAAGA,iBAAiB;AAC7C;AACA,MAAMD,oBAAoB,SAASG,eAAe,CAAC;AAEnDR,OAAO,CAACK,oBAAoB,GAAGA,oBAAoB;AACnD;AACA;AACA,MAAMD,aAAa,SAASQ,KAAK,CAAC;AAElCZ,OAAO,CAACI,aAAa,GAAGA,aAAa;AACrC;AACA,MAAMD,2BAA2B,SAASC,aAAa,CAAC;AAExDJ,OAAO,CAACG,2BAA2B,GAAGA,2BAA2B;AACjE;AACA,MAAMD,iBAAiB,SAASE,aAAa,CAAC;EAC1CS,WAAWA,CAACC,OAAO,EAAEC,UAAU,EAAE;IAC7B,KAAK,CAACD,OAAO,CAAC;IACd,IAAI,CAACC,UAAU,GAAGA,UAAU;EAChC;AACJ;AACAf,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}