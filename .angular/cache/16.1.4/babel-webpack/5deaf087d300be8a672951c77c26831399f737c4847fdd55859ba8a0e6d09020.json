{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst path = require('path');\nconst childProcess = require('child_process');\nconst {\n  promises: fs,\n  constants: fsConstants\n} = require('fs');\nconst isWsl = require('is-wsl');\nconst isDocker = require('is-docker');\nconst defineLazyProperty = require('define-lazy-prop');\n\n// Path to included `xdg-open`.\nconst localXdgOpenPath = path.join(__dirname, 'xdg-open');\nconst {\n  platform,\n  arch\n} = process;\n\n// Podman detection\nconst hasContainerEnv = () => {\n  try {\n    fs.statSync('/run/.containerenv');\n    return true;\n  } catch {\n    return false;\n  }\n};\nlet cachedResult;\nfunction isInsideContainer() {\n  if (cachedResult === undefined) {\n    cachedResult = hasContainerEnv() || isDocker();\n  }\n  return cachedResult;\n}\n\n/**\nGet the mount point for fixed drives in WSL.\n\n@inner\n@returns {string} The mount point.\n*/\nconst getWslDrivesMountPoint = (() => {\n  // Default value for \"root\" param\n  // according to https://docs.microsoft.com/en-us/windows/wsl/wsl-config\n  const defaultMountPoint = '/mnt/';\n  let mountPoint;\n  return /*#__PURE__*/_asyncToGenerator(function* () {\n    if (mountPoint) {\n      // Return memoized mount point value\n      return mountPoint;\n    }\n    const configFilePath = '/etc/wsl.conf';\n    let isConfigFileExists = false;\n    try {\n      yield fs.access(configFilePath, fsConstants.F_OK);\n      isConfigFileExists = true;\n    } catch {}\n    if (!isConfigFileExists) {\n      return defaultMountPoint;\n    }\n    const configContent = yield fs.readFile(configFilePath, {\n      encoding: 'utf8'\n    });\n    const configMountPoint = /(?<!#.*)root\\s*=\\s*(?<mountPoint>.*)/g.exec(configContent);\n    if (!configMountPoint) {\n      return defaultMountPoint;\n    }\n    mountPoint = configMountPoint.groups.mountPoint.trim();\n    mountPoint = mountPoint.endsWith('/') ? mountPoint : `${mountPoint}/`;\n    return mountPoint;\n  });\n})();\nconst pTryEach = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (array, mapper) {\n    let latestError;\n    for (const item of array) {\n      try {\n        return yield mapper(item); // eslint-disable-line no-await-in-loop\n      } catch (error) {\n        latestError = error;\n      }\n    }\n    throw latestError;\n  });\n  return function pTryEach(_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nconst baseOpen = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(function* (options) {\n    options = {\n      wait: false,\n      background: false,\n      newInstance: false,\n      allowNonzeroExitCode: false,\n      ...options\n    };\n    if (Array.isArray(options.app)) {\n      return pTryEach(options.app, singleApp => baseOpen({\n        ...options,\n        app: singleApp\n      }));\n    }\n    let {\n      name: app,\n      arguments: appArguments = []\n    } = options.app || {};\n    appArguments = [...appArguments];\n    if (Array.isArray(app)) {\n      return pTryEach(app, appName => baseOpen({\n        ...options,\n        app: {\n          name: appName,\n          arguments: appArguments\n        }\n      }));\n    }\n    let command;\n    const cliArguments = [];\n    const childProcessOptions = {};\n    if (platform === 'darwin') {\n      command = 'open';\n      if (options.wait) {\n        cliArguments.push('--wait-apps');\n      }\n      if (options.background) {\n        cliArguments.push('--background');\n      }\n      if (options.newInstance) {\n        cliArguments.push('--new');\n      }\n      if (app) {\n        cliArguments.push('-a', app);\n      }\n    } else if (platform === 'win32' || isWsl && !isInsideContainer() && !app) {\n      const mountPoint = yield getWslDrivesMountPoint();\n      command = isWsl ? `${mountPoint}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` : `${process.env.SYSTEMROOT}\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell`;\n      cliArguments.push('-NoProfile', '-NonInteractive', 'â€“ExecutionPolicy', 'Bypass', '-EncodedCommand');\n      if (!isWsl) {\n        childProcessOptions.windowsVerbatimArguments = true;\n      }\n      const encodedArguments = ['Start'];\n      if (options.wait) {\n        encodedArguments.push('-Wait');\n      }\n      if (app) {\n        // Double quote with double quotes to ensure the inner quotes are passed through.\n        // Inner quotes are delimited for PowerShell interpretation with backticks.\n        encodedArguments.push(`\"\\`\"${app}\\`\"\"`, '-ArgumentList');\n        if (options.target) {\n          appArguments.unshift(options.target);\n        }\n      } else if (options.target) {\n        encodedArguments.push(`\"${options.target}\"`);\n      }\n      if (appArguments.length > 0) {\n        appArguments = appArguments.map(arg => `\"\\`\"${arg}\\`\"\"`);\n        encodedArguments.push(appArguments.join(','));\n      }\n\n      // Using Base64-encoded command, accepted by PowerShell, to allow special characters.\n      options.target = Buffer.from(encodedArguments.join(' '), 'utf16le').toString('base64');\n    } else {\n      if (app) {\n        command = app;\n      } else {\n        // When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n        const isBundled = !__dirname || __dirname === '/';\n\n        // Check if local `xdg-open` exists and is executable.\n        let exeLocalXdgOpen = false;\n        try {\n          yield fs.access(localXdgOpenPath, fsConstants.X_OK);\n          exeLocalXdgOpen = true;\n        } catch {}\n        const useSystemXdgOpen = process.versions.electron || platform === 'android' || isBundled || !exeLocalXdgOpen;\n        command = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n      }\n      if (appArguments.length > 0) {\n        cliArguments.push(...appArguments);\n      }\n      if (!options.wait) {\n        // `xdg-open` will block the process unless stdio is ignored\n        // and it's detached from the parent even if it's unref'd.\n        childProcessOptions.stdio = 'ignore';\n        childProcessOptions.detached = true;\n      }\n    }\n    if (options.target) {\n      cliArguments.push(options.target);\n    }\n    if (platform === 'darwin' && appArguments.length > 0) {\n      cliArguments.push('--args', ...appArguments);\n    }\n    const subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n    if (options.wait) {\n      return new Promise((resolve, reject) => {\n        subprocess.once('error', reject);\n        subprocess.once('close', exitCode => {\n          if (!options.allowNonzeroExitCode && exitCode > 0) {\n            reject(new Error(`Exited with code ${exitCode}`));\n            return;\n          }\n          resolve(subprocess);\n        });\n      });\n    }\n    subprocess.unref();\n    return subprocess;\n  });\n  return function baseOpen(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nconst open = (target, options) => {\n  if (typeof target !== 'string') {\n    throw new TypeError('Expected a `target`');\n  }\n  return baseOpen({\n    ...options,\n    target\n  });\n};\nconst openApp = (name, options) => {\n  if (typeof name !== 'string') {\n    throw new TypeError('Expected a `name`');\n  }\n  const {\n    arguments: appArguments = []\n  } = options || {};\n  if (appArguments !== undefined && appArguments !== null && !Array.isArray(appArguments)) {\n    throw new TypeError('Expected `appArguments` as Array type');\n  }\n  return baseOpen({\n    ...options,\n    app: {\n      name,\n      arguments: appArguments\n    }\n  });\n};\nfunction detectArchBinary(binary) {\n  if (typeof binary === 'string' || Array.isArray(binary)) {\n    return binary;\n  }\n  const {\n    [arch]: archBinary\n  } = binary;\n  if (!archBinary) {\n    throw new Error(`${arch} is not supported`);\n  }\n  return archBinary;\n}\nfunction detectPlatformBinary({\n  [platform]: platformBinary\n}, {\n  wsl\n}) {\n  if (wsl && isWsl) {\n    return detectArchBinary(wsl);\n  }\n  if (!platformBinary) {\n    throw new Error(`${platform} is not supported`);\n  }\n  return detectArchBinary(platformBinary);\n}\nconst apps = {};\ndefineLazyProperty(apps, 'chrome', () => detectPlatformBinary({\n  darwin: 'google chrome',\n  win32: 'chrome',\n  linux: ['google-chrome', 'google-chrome-stable', 'chromium']\n}, {\n  wsl: {\n    ia32: '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe',\n    x64: ['/mnt/c/Program Files/Google/Chrome/Application/chrome.exe', '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe']\n  }\n}));\ndefineLazyProperty(apps, 'firefox', () => detectPlatformBinary({\n  darwin: 'firefox',\n  win32: 'C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe',\n  linux: 'firefox'\n}, {\n  wsl: '/mnt/c/Program Files/Mozilla Firefox/firefox.exe'\n}));\ndefineLazyProperty(apps, 'edge', () => detectPlatformBinary({\n  darwin: 'microsoft edge',\n  win32: 'msedge',\n  linux: ['microsoft-edge', 'microsoft-edge-dev']\n}, {\n  wsl: '/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe'\n}));\nopen.apps = apps;\nopen.openApp = openApp;\nmodule.exports = open;","map":{"version":3,"names":["path","require","childProcess","promises","fs","constants","fsConstants","isWsl","isDocker","defineLazyProperty","localXdgOpenPath","join","__dirname","platform","arch","process","hasContainerEnv","statSync","cachedResult","isInsideContainer","undefined","getWslDrivesMountPoint","defaultMountPoint","mountPoint","_asyncToGenerator","configFilePath","isConfigFileExists","access","F_OK","configContent","readFile","encoding","configMountPoint","exec","groups","trim","endsWith","pTryEach","_ref2","array","mapper","latestError","item","error","_x","_x2","apply","arguments","baseOpen","_ref3","options","wait","background","newInstance","allowNonzeroExitCode","Array","isArray","app","singleApp","name","appArguments","appName","command","cliArguments","childProcessOptions","push","env","SYSTEMROOT","windowsVerbatimArguments","encodedArguments","target","unshift","length","map","arg","Buffer","from","toString","isBundled","exeLocalXdgOpen","X_OK","useSystemXdgOpen","versions","electron","stdio","detached","subprocess","spawn","Promise","resolve","reject","once","exitCode","Error","unref","_x3","open","TypeError","openApp","detectArchBinary","binary","archBinary","detectPlatformBinary","platformBinary","wsl","apps","darwin","win32","linux","ia32","x64","module","exports"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/open/index.js"],"sourcesContent":["const path = require('path');\nconst childProcess = require('child_process');\nconst {promises: fs, constants: fsConstants} = require('fs');\nconst isWsl = require('is-wsl');\nconst isDocker = require('is-docker');\nconst defineLazyProperty = require('define-lazy-prop');\n\n// Path to included `xdg-open`.\nconst localXdgOpenPath = path.join(__dirname, 'xdg-open');\n\nconst {platform, arch} = process;\n\n// Podman detection\nconst hasContainerEnv = () => {\n\ttry {\n\t\tfs.statSync('/run/.containerenv');\n\t\treturn true;\n\t} catch {\n\t\treturn false;\n\t}\n};\n\nlet cachedResult;\nfunction isInsideContainer() {\n\tif (cachedResult === undefined) {\n\t\tcachedResult = hasContainerEnv() || isDocker();\n\t}\n\n\treturn cachedResult;\n}\n\n/**\nGet the mount point for fixed drives in WSL.\n\n@inner\n@returns {string} The mount point.\n*/\nconst getWslDrivesMountPoint = (() => {\n\t// Default value for \"root\" param\n\t// according to https://docs.microsoft.com/en-us/windows/wsl/wsl-config\n\tconst defaultMountPoint = '/mnt/';\n\n\tlet mountPoint;\n\n\treturn async function () {\n\t\tif (mountPoint) {\n\t\t\t// Return memoized mount point value\n\t\t\treturn mountPoint;\n\t\t}\n\n\t\tconst configFilePath = '/etc/wsl.conf';\n\n\t\tlet isConfigFileExists = false;\n\t\ttry {\n\t\t\tawait fs.access(configFilePath, fsConstants.F_OK);\n\t\t\tisConfigFileExists = true;\n\t\t} catch {}\n\n\t\tif (!isConfigFileExists) {\n\t\t\treturn defaultMountPoint;\n\t\t}\n\n\t\tconst configContent = await fs.readFile(configFilePath, {encoding: 'utf8'});\n\t\tconst configMountPoint = /(?<!#.*)root\\s*=\\s*(?<mountPoint>.*)/g.exec(configContent);\n\n\t\tif (!configMountPoint) {\n\t\t\treturn defaultMountPoint;\n\t\t}\n\n\t\tmountPoint = configMountPoint.groups.mountPoint.trim();\n\t\tmountPoint = mountPoint.endsWith('/') ? mountPoint : `${mountPoint}/`;\n\n\t\treturn mountPoint;\n\t};\n})();\n\nconst pTryEach = async (array, mapper) => {\n\tlet latestError;\n\n\tfor (const item of array) {\n\t\ttry {\n\t\t\treturn await mapper(item); // eslint-disable-line no-await-in-loop\n\t\t} catch (error) {\n\t\t\tlatestError = error;\n\t\t}\n\t}\n\n\tthrow latestError;\n};\n\nconst baseOpen = async options => {\n\toptions = {\n\t\twait: false,\n\t\tbackground: false,\n\t\tnewInstance: false,\n\t\tallowNonzeroExitCode: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(options.app)) {\n\t\treturn pTryEach(options.app, singleApp => baseOpen({\n\t\t\t...options,\n\t\t\tapp: singleApp\n\t\t}));\n\t}\n\n\tlet {name: app, arguments: appArguments = []} = options.app || {};\n\tappArguments = [...appArguments];\n\n\tif (Array.isArray(app)) {\n\t\treturn pTryEach(app, appName => baseOpen({\n\t\t\t...options,\n\t\t\tapp: {\n\t\t\t\tname: appName,\n\t\t\t\targuments: appArguments\n\t\t\t}\n\t\t}));\n\t}\n\n\tlet command;\n\tconst cliArguments = [];\n\tconst childProcessOptions = {};\n\n\tif (platform === 'darwin') {\n\t\tcommand = 'open';\n\n\t\tif (options.wait) {\n\t\t\tcliArguments.push('--wait-apps');\n\t\t}\n\n\t\tif (options.background) {\n\t\t\tcliArguments.push('--background');\n\t\t}\n\n\t\tif (options.newInstance) {\n\t\t\tcliArguments.push('--new');\n\t\t}\n\n\t\tif (app) {\n\t\t\tcliArguments.push('-a', app);\n\t\t}\n\t} else if (platform === 'win32' || (isWsl && !isInsideContainer() && !app)) {\n\t\tconst mountPoint = await getWslDrivesMountPoint();\n\n\t\tcommand = isWsl ?\n\t\t\t`${mountPoint}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` :\n\t\t\t`${process.env.SYSTEMROOT}\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell`;\n\n\t\tcliArguments.push(\n\t\t\t'-NoProfile',\n\t\t\t'-NonInteractive',\n\t\t\t'â€“ExecutionPolicy',\n\t\t\t'Bypass',\n\t\t\t'-EncodedCommand'\n\t\t);\n\n\t\tif (!isWsl) {\n\t\t\tchildProcessOptions.windowsVerbatimArguments = true;\n\t\t}\n\n\t\tconst encodedArguments = ['Start'];\n\n\t\tif (options.wait) {\n\t\t\tencodedArguments.push('-Wait');\n\t\t}\n\n\t\tif (app) {\n\t\t\t// Double quote with double quotes to ensure the inner quotes are passed through.\n\t\t\t// Inner quotes are delimited for PowerShell interpretation with backticks.\n\t\t\tencodedArguments.push(`\"\\`\"${app}\\`\"\"`, '-ArgumentList');\n\t\t\tif (options.target) {\n\t\t\t\tappArguments.unshift(options.target);\n\t\t\t}\n\t\t} else if (options.target) {\n\t\t\tencodedArguments.push(`\"${options.target}\"`);\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tappArguments = appArguments.map(arg => `\"\\`\"${arg}\\`\"\"`);\n\t\t\tencodedArguments.push(appArguments.join(','));\n\t\t}\n\n\t\t// Using Base64-encoded command, accepted by PowerShell, to allow special characters.\n\t\toptions.target = Buffer.from(encodedArguments.join(' '), 'utf16le').toString('base64');\n\t} else {\n\t\tif (app) {\n\t\t\tcommand = app;\n\t\t} else {\n\t\t\t// When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n\t\t\tconst isBundled = !__dirname || __dirname === '/';\n\n\t\t\t// Check if local `xdg-open` exists and is executable.\n\t\t\tlet exeLocalXdgOpen = false;\n\t\t\ttry {\n\t\t\t\tawait fs.access(localXdgOpenPath, fsConstants.X_OK);\n\t\t\t\texeLocalXdgOpen = true;\n\t\t\t} catch {}\n\n\t\t\tconst useSystemXdgOpen = process.versions.electron ||\n\t\t\t\tplatform === 'android' || isBundled || !exeLocalXdgOpen;\n\t\t\tcommand = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tcliArguments.push(...appArguments);\n\t\t}\n\n\t\tif (!options.wait) {\n\t\t\t// `xdg-open` will block the process unless stdio is ignored\n\t\t\t// and it's detached from the parent even if it's unref'd.\n\t\t\tchildProcessOptions.stdio = 'ignore';\n\t\t\tchildProcessOptions.detached = true;\n\t\t}\n\t}\n\n\tif (options.target) {\n\t\tcliArguments.push(options.target);\n\t}\n\n\tif (platform === 'darwin' && appArguments.length > 0) {\n\t\tcliArguments.push('--args', ...appArguments);\n\t}\n\n\tconst subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n\n\tif (options.wait) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsubprocess.once('error', reject);\n\n\t\t\tsubprocess.once('close', exitCode => {\n\t\t\t\tif (!options.allowNonzeroExitCode && exitCode > 0) {\n\t\t\t\t\treject(new Error(`Exited with code ${exitCode}`));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve(subprocess);\n\t\t\t});\n\t\t});\n\t}\n\n\tsubprocess.unref();\n\n\treturn subprocess;\n};\n\nconst open = (target, options) => {\n\tif (typeof target !== 'string') {\n\t\tthrow new TypeError('Expected a `target`');\n\t}\n\n\treturn baseOpen({\n\t\t...options,\n\t\ttarget\n\t});\n};\n\nconst openApp = (name, options) => {\n\tif (typeof name !== 'string') {\n\t\tthrow new TypeError('Expected a `name`');\n\t}\n\n\tconst {arguments: appArguments = []} = options || {};\n\tif (appArguments !== undefined && appArguments !== null && !Array.isArray(appArguments)) {\n\t\tthrow new TypeError('Expected `appArguments` as Array type');\n\t}\n\n\treturn baseOpen({\n\t\t...options,\n\t\tapp: {\n\t\t\tname,\n\t\t\targuments: appArguments\n\t\t}\n\t});\n};\n\nfunction detectArchBinary(binary) {\n\tif (typeof binary === 'string' || Array.isArray(binary)) {\n\t\treturn binary;\n\t}\n\n\tconst {[arch]: archBinary} = binary;\n\n\tif (!archBinary) {\n\t\tthrow new Error(`${arch} is not supported`);\n\t}\n\n\treturn archBinary;\n}\n\nfunction detectPlatformBinary({[platform]: platformBinary}, {wsl}) {\n\tif (wsl && isWsl) {\n\t\treturn detectArchBinary(wsl);\n\t}\n\n\tif (!platformBinary) {\n\t\tthrow new Error(`${platform} is not supported`);\n\t}\n\n\treturn detectArchBinary(platformBinary);\n}\n\nconst apps = {};\n\ndefineLazyProperty(apps, 'chrome', () => detectPlatformBinary({\n\tdarwin: 'google chrome',\n\twin32: 'chrome',\n\tlinux: ['google-chrome', 'google-chrome-stable', 'chromium']\n}, {\n\twsl: {\n\t\tia32: '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe',\n\t\tx64: ['/mnt/c/Program Files/Google/Chrome/Application/chrome.exe', '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe']\n\t}\n}));\n\ndefineLazyProperty(apps, 'firefox', () => detectPlatformBinary({\n\tdarwin: 'firefox',\n\twin32: 'C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe',\n\tlinux: 'firefox'\n}, {\n\twsl: '/mnt/c/Program Files/Mozilla Firefox/firefox.exe'\n}));\n\ndefineLazyProperty(apps, 'edge', () => detectPlatformBinary({\n\tdarwin: 'microsoft edge',\n\twin32: 'msedge',\n\tlinux: ['microsoft-edge', 'microsoft-edge-dev']\n}, {\n\twsl: '/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe'\n}));\n\nopen.apps = apps;\nopen.openApp = openApp;\n\nmodule.exports = open;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}