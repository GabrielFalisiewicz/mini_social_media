{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.x509SCTExtension = exports.x509SubjectKeyIDExtension = exports.x509AuthorityKeyIDExtension = exports.x509SubjectAlternativeNameExtension = exports.x509KeyUsageExtension = exports.x509BasicConstraintsExtension = exports.x509Extension = void 0;\nconst stream_1 = require(\"../util/stream\");\nconst sct_1 = require(\"./sct\");\n// https://www.rfc-editor.org/rfc/rfc5280#section-4.1\nclass x509Extension {\n  constructor(asn1) {\n    this.root = asn1;\n  }\n  get oid() {\n    return this.root.subs[0].toOID();\n  }\n  get critical() {\n    // The critical field is optional and will be the second element of the\n    // extension sequence if present. Default to false if not present.\n    return this.root.subs.length === 3 ? this.root.subs[1].toBoolean() : false;\n  }\n  get value() {\n    return this.extnValueObj.value;\n  }\n  get valueObj() {\n    return this.extnValueObj;\n  }\n  get extnValueObj() {\n    // The extnValue field will be the last element of the extension sequence\n    return this.root.subs[this.root.subs.length - 1];\n  }\n}\nexports.x509Extension = x509Extension;\n// https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.9\nclass x509BasicConstraintsExtension extends x509Extension {\n  get isCA() {\n    return this.sequence.subs[0].toBoolean();\n  }\n  get pathLenConstraint() {\n    return this.sequence.subs.length > 1 ? this.sequence.subs[1].toInteger() : undefined;\n  }\n  // The extnValue field contains a single sequence wrapping the isCA and\n  // pathLenConstraint.\n  get sequence() {\n    return this.extnValueObj.subs[0];\n  }\n}\nexports.x509BasicConstraintsExtension = x509BasicConstraintsExtension;\n// https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.3\nclass x509KeyUsageExtension extends x509Extension {\n  get digitalSignature() {\n    return this.bitString[0] === 1;\n  }\n  get keyCertSign() {\n    return this.bitString[5] === 1;\n  }\n  get crlSign() {\n    return this.bitString[6] === 1;\n  }\n  // The extnValue field contains a single bit string which is a bit mask\n  // indicating which key usages are enabled.\n  get bitString() {\n    return this.extnValueObj.subs[0].toBitString();\n  }\n}\nexports.x509KeyUsageExtension = x509KeyUsageExtension;\n// https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.6\nclass x509SubjectAlternativeNameExtension extends x509Extension {\n  get rfc822Name() {\n    return this.findGeneralName(0x01)?.value.toString('ascii');\n  }\n  get uri() {\n    return this.findGeneralName(0x06)?.value.toString('ascii');\n  }\n  // Retrieve the value of an otherName with the given OID.\n  otherName(oid) {\n    const otherName = this.findGeneralName(0x00);\n    if (otherName === undefined) {\n      return undefined;\n    }\n    // The otherName is a sequence containing an OID and a value.\n    // Need to check that the OID matches the one we're looking for.\n    const otherNameOID = otherName.subs[0].toOID();\n    if (otherNameOID !== oid) {\n      return undefined;\n    }\n    // The otherNameValue is a sequence containing the actual value.\n    const otherNameValue = otherName.subs[1];\n    return otherNameValue.subs[0].value.toString('ascii');\n  }\n  findGeneralName(tag) {\n    return this.generalNames.find(gn => gn.tag.isContextSpecific(tag));\n  }\n  // The extnValue field contains a sequence of GeneralNames.\n  get generalNames() {\n    return this.extnValueObj.subs[0].subs;\n  }\n}\nexports.x509SubjectAlternativeNameExtension = x509SubjectAlternativeNameExtension;\n// https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.1\nclass x509AuthorityKeyIDExtension extends x509Extension {\n  get keyIdentifier() {\n    return this.findSequenceMember(0x00)?.value;\n  }\n  findSequenceMember(tag) {\n    return this.sequence.subs.find(el => el.tag.isContextSpecific(tag));\n  }\n  // The extnValue field contains a single sequence wrapping the keyIdentifier\n  get sequence() {\n    return this.extnValueObj.subs[0];\n  }\n}\nexports.x509AuthorityKeyIDExtension = x509AuthorityKeyIDExtension;\n// https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.2\nclass x509SubjectKeyIDExtension extends x509Extension {\n  get keyIdentifier() {\n    return this.extnValueObj.subs[0].value;\n  }\n}\nexports.x509SubjectKeyIDExtension = x509SubjectKeyIDExtension;\n// https://www.rfc-editor.org/rfc/rfc6962#section-3.3\nclass x509SCTExtension extends x509Extension {\n  constructor(asn1) {\n    super(asn1);\n  }\n  get signedCertificateTimestamps() {\n    const buf = this.extnValueObj.subs[0].value;\n    const stream = new stream_1.ByteStream(buf);\n    // The overall list length is encoded in the first two bytes -- note this\n    // is the length of the list in bytes, NOT the number of SCTs in the list\n    const end = stream.getUint16() + 2;\n    const sctList = [];\n    while (stream.position < end) {\n      // Read the length of the next SCT\n      const sctLength = stream.getUint16();\n      // Slice out the bytes for the next SCT and parse it\n      const sct = stream.getBlock(sctLength);\n      sctList.push(sct_1.SignedCertificateTimestamp.parse(sct));\n    }\n    if (stream.position !== end) {\n      throw new Error('SCT list length does not match actual length');\n    }\n    return sctList;\n  }\n}\nexports.x509SCTExtension = x509SCTExtension;","map":{"version":3,"names":["Object","defineProperty","exports","value","x509SCTExtension","x509SubjectKeyIDExtension","x509AuthorityKeyIDExtension","x509SubjectAlternativeNameExtension","x509KeyUsageExtension","x509BasicConstraintsExtension","x509Extension","stream_1","require","sct_1","constructor","asn1","root","oid","subs","toOID","critical","length","toBoolean","extnValueObj","valueObj","isCA","sequence","pathLenConstraint","toInteger","undefined","digitalSignature","bitString","keyCertSign","crlSign","toBitString","rfc822Name","findGeneralName","toString","uri","otherName","otherNameOID","otherNameValue","tag","generalNames","find","gn","isContextSpecific","keyIdentifier","findSequenceMember","el","signedCertificateTimestamps","buf","stream","ByteStream","end","getUint16","sctList","position","sctLength","sct","getBlock","push","SignedCertificateTimestamp","parse","Error"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/sigstore/dist/x509/ext.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.x509SCTExtension = exports.x509SubjectKeyIDExtension = exports.x509AuthorityKeyIDExtension = exports.x509SubjectAlternativeNameExtension = exports.x509KeyUsageExtension = exports.x509BasicConstraintsExtension = exports.x509Extension = void 0;\nconst stream_1 = require(\"../util/stream\");\nconst sct_1 = require(\"./sct\");\n// https://www.rfc-editor.org/rfc/rfc5280#section-4.1\nclass x509Extension {\n    constructor(asn1) {\n        this.root = asn1;\n    }\n    get oid() {\n        return this.root.subs[0].toOID();\n    }\n    get critical() {\n        // The critical field is optional and will be the second element of the\n        // extension sequence if present. Default to false if not present.\n        return this.root.subs.length === 3 ? this.root.subs[1].toBoolean() : false;\n    }\n    get value() {\n        return this.extnValueObj.value;\n    }\n    get valueObj() {\n        return this.extnValueObj;\n    }\n    get extnValueObj() {\n        // The extnValue field will be the last element of the extension sequence\n        return this.root.subs[this.root.subs.length - 1];\n    }\n}\nexports.x509Extension = x509Extension;\n// https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.9\nclass x509BasicConstraintsExtension extends x509Extension {\n    get isCA() {\n        return this.sequence.subs[0].toBoolean();\n    }\n    get pathLenConstraint() {\n        return this.sequence.subs.length > 1\n            ? this.sequence.subs[1].toInteger()\n            : undefined;\n    }\n    // The extnValue field contains a single sequence wrapping the isCA and\n    // pathLenConstraint.\n    get sequence() {\n        return this.extnValueObj.subs[0];\n    }\n}\nexports.x509BasicConstraintsExtension = x509BasicConstraintsExtension;\n// https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.3\nclass x509KeyUsageExtension extends x509Extension {\n    get digitalSignature() {\n        return this.bitString[0] === 1;\n    }\n    get keyCertSign() {\n        return this.bitString[5] === 1;\n    }\n    get crlSign() {\n        return this.bitString[6] === 1;\n    }\n    // The extnValue field contains a single bit string which is a bit mask\n    // indicating which key usages are enabled.\n    get bitString() {\n        return this.extnValueObj.subs[0].toBitString();\n    }\n}\nexports.x509KeyUsageExtension = x509KeyUsageExtension;\n// https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.6\nclass x509SubjectAlternativeNameExtension extends x509Extension {\n    get rfc822Name() {\n        return this.findGeneralName(0x01)?.value.toString('ascii');\n    }\n    get uri() {\n        return this.findGeneralName(0x06)?.value.toString('ascii');\n    }\n    // Retrieve the value of an otherName with the given OID.\n    otherName(oid) {\n        const otherName = this.findGeneralName(0x00);\n        if (otherName === undefined) {\n            return undefined;\n        }\n        // The otherName is a sequence containing an OID and a value.\n        // Need to check that the OID matches the one we're looking for.\n        const otherNameOID = otherName.subs[0].toOID();\n        if (otherNameOID !== oid) {\n            return undefined;\n        }\n        // The otherNameValue is a sequence containing the actual value.\n        const otherNameValue = otherName.subs[1];\n        return otherNameValue.subs[0].value.toString('ascii');\n    }\n    findGeneralName(tag) {\n        return this.generalNames.find((gn) => gn.tag.isContextSpecific(tag));\n    }\n    // The extnValue field contains a sequence of GeneralNames.\n    get generalNames() {\n        return this.extnValueObj.subs[0].subs;\n    }\n}\nexports.x509SubjectAlternativeNameExtension = x509SubjectAlternativeNameExtension;\n// https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.1\nclass x509AuthorityKeyIDExtension extends x509Extension {\n    get keyIdentifier() {\n        return this.findSequenceMember(0x00)?.value;\n    }\n    findSequenceMember(tag) {\n        return this.sequence.subs.find((el) => el.tag.isContextSpecific(tag));\n    }\n    // The extnValue field contains a single sequence wrapping the keyIdentifier\n    get sequence() {\n        return this.extnValueObj.subs[0];\n    }\n}\nexports.x509AuthorityKeyIDExtension = x509AuthorityKeyIDExtension;\n// https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.2\nclass x509SubjectKeyIDExtension extends x509Extension {\n    get keyIdentifier() {\n        return this.extnValueObj.subs[0].value;\n    }\n}\nexports.x509SubjectKeyIDExtension = x509SubjectKeyIDExtension;\n// https://www.rfc-editor.org/rfc/rfc6962#section-3.3\nclass x509SCTExtension extends x509Extension {\n    constructor(asn1) {\n        super(asn1);\n    }\n    get signedCertificateTimestamps() {\n        const buf = this.extnValueObj.subs[0].value;\n        const stream = new stream_1.ByteStream(buf);\n        // The overall list length is encoded in the first two bytes -- note this\n        // is the length of the list in bytes, NOT the number of SCTs in the list\n        const end = stream.getUint16() + 2;\n        const sctList = [];\n        while (stream.position < end) {\n            // Read the length of the next SCT\n            const sctLength = stream.getUint16();\n            // Slice out the bytes for the next SCT and parse it\n            const sct = stream.getBlock(sctLength);\n            sctList.push(sct_1.SignedCertificateTimestamp.parse(sct));\n        }\n        if (stream.position !== end) {\n            throw new Error('SCT list length does not match actual length');\n        }\n        return sctList;\n    }\n}\nexports.x509SCTExtension = x509SCTExtension;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}