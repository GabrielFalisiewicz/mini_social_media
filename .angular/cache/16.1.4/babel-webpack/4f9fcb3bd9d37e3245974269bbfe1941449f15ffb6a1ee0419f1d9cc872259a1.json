{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TUFError = exports.initTUF = exports.getTrustedRoot = void 0;\n/*\nCopyright 2023 The Sigstore Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nconst protobuf_specs_1 = require(\"@sigstore/protobuf-specs\");\nconst appdata_1 = require(\"./appdata\");\nconst client_1 = require(\"./client\");\nconst DEFAULT_CACHE_DIR = 'sigstore-js';\nconst DEFAULT_MIRROR_URL = 'https://tuf-repo-cdn.sigstore.dev';\nconst DEFAULT_TUF_ROOT_PATH = '../store/public-good-instance-root.json';\nconst DEFAULT_RETRY = {\n  retries: 2\n};\nconst DEFAULT_TIMEOUT = 5000;\nconst TRUSTED_ROOT_TARGET = 'trusted_root.json';\nfunction getTrustedRoot() {\n  return _getTrustedRoot.apply(this, arguments);\n}\nfunction _getTrustedRoot() {\n  _getTrustedRoot = _asyncToGenerator(function* ( /* istanbul ignore next */\n  options = {}) {\n    const client = createClient(options);\n    const trustedRoot = yield client.getTarget(TRUSTED_ROOT_TARGET);\n    return protobuf_specs_1.TrustedRoot.fromJSON(JSON.parse(trustedRoot));\n  });\n  return _getTrustedRoot.apply(this, arguments);\n}\nexports.getTrustedRoot = getTrustedRoot;\nfunction initTUF() {\n  return _initTUF.apply(this, arguments);\n}\nfunction _initTUF() {\n  _initTUF = _asyncToGenerator(function* ( /* istanbul ignore next */\n  options = {}) {\n    const client = createClient(options);\n    return client.refresh().then(() => client);\n  });\n  return _initTUF.apply(this, arguments);\n}\nexports.initTUF = initTUF;\n// Create a TUF client with default options\nfunction createClient(options) {\n  /* istanbul ignore next */\n  return new client_1.TUFClient({\n    cachePath: options.cachePath || (0, appdata_1.appDataPath)(DEFAULT_CACHE_DIR),\n    rootPath: options.rootPath || require.resolve(DEFAULT_TUF_ROOT_PATH),\n    mirrorURL: options.mirrorURL || DEFAULT_MIRROR_URL,\n    retry: options.retry ?? DEFAULT_RETRY,\n    timeout: options.timeout ?? DEFAULT_TIMEOUT\n  });\n}\nvar error_1 = require(\"./error\");\nObject.defineProperty(exports, \"TUFError\", {\n  enumerable: true,\n  get: function () {\n    return error_1.TUFError;\n  }\n});","map":{"version":3,"names":["_asyncToGenerator","require","default","Object","defineProperty","exports","value","TUFError","initTUF","getTrustedRoot","protobuf_specs_1","appdata_1","client_1","DEFAULT_CACHE_DIR","DEFAULT_MIRROR_URL","DEFAULT_TUF_ROOT_PATH","DEFAULT_RETRY","retries","DEFAULT_TIMEOUT","TRUSTED_ROOT_TARGET","_getTrustedRoot","apply","arguments","options","client","createClient","trustedRoot","getTarget","TrustedRoot","fromJSON","JSON","parse","_initTUF","refresh","then","TUFClient","cachePath","appDataPath","rootPath","resolve","mirrorURL","retry","timeout","error_1","enumerable","get"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@sigstore/tuf/dist/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TUFError = exports.initTUF = exports.getTrustedRoot = void 0;\n/*\nCopyright 2023 The Sigstore Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nconst protobuf_specs_1 = require(\"@sigstore/protobuf-specs\");\nconst appdata_1 = require(\"./appdata\");\nconst client_1 = require(\"./client\");\nconst DEFAULT_CACHE_DIR = 'sigstore-js';\nconst DEFAULT_MIRROR_URL = 'https://tuf-repo-cdn.sigstore.dev';\nconst DEFAULT_TUF_ROOT_PATH = '../store/public-good-instance-root.json';\nconst DEFAULT_RETRY = { retries: 2 };\nconst DEFAULT_TIMEOUT = 5000;\nconst TRUSTED_ROOT_TARGET = 'trusted_root.json';\nasync function getTrustedRoot(\n/* istanbul ignore next */\noptions = {}) {\n    const client = createClient(options);\n    const trustedRoot = await client.getTarget(TRUSTED_ROOT_TARGET);\n    return protobuf_specs_1.TrustedRoot.fromJSON(JSON.parse(trustedRoot));\n}\nexports.getTrustedRoot = getTrustedRoot;\nasync function initTUF(\n/* istanbul ignore next */\noptions = {}) {\n    const client = createClient(options);\n    return client.refresh().then(() => client);\n}\nexports.initTUF = initTUF;\n// Create a TUF client with default options\nfunction createClient(options) {\n    /* istanbul ignore next */\n    return new client_1.TUFClient({\n        cachePath: options.cachePath || (0, appdata_1.appDataPath)(DEFAULT_CACHE_DIR),\n        rootPath: options.rootPath || require.resolve(DEFAULT_TUF_ROOT_PATH),\n        mirrorURL: options.mirrorURL || DEFAULT_MIRROR_URL,\n        retry: options.retry ?? DEFAULT_RETRY,\n        timeout: options.timeout ?? DEFAULT_TIMEOUT,\n    });\n}\nvar error_1 = require(\"./error\");\nObject.defineProperty(exports, \"TUFError\", { enumerable: true, get: function () { return error_1.TUFError; } });\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}