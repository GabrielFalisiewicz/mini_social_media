{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.randomBytes = exports.hash = exports.verifyBlob = exports.signBlob = exports.createPublicKey = exports.generateKeyPair = void 0;\n/*\nCopyright 2022 The Sigstore Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nconst crypto_1 = __importDefault(require(\"crypto\"));\nconst EC_KEYPAIR_TYPE = 'ec';\nconst P256_CURVE = 'P-256';\nconst SHA256_ALGORITHM = 'sha256';\nfunction generateKeyPair() {\n  return crypto_1.default.generateKeyPairSync(EC_KEYPAIR_TYPE, {\n    namedCurve: P256_CURVE\n  });\n}\nexports.generateKeyPair = generateKeyPair;\nfunction createPublicKey(key) {\n  if (typeof key === 'string') {\n    return crypto_1.default.createPublicKey(key);\n  } else {\n    return crypto_1.default.createPublicKey({\n      key,\n      format: 'der',\n      type: 'spki'\n    });\n  }\n}\nexports.createPublicKey = createPublicKey;\nfunction signBlob(data, privateKey) {\n  return crypto_1.default.sign(null, data, privateKey);\n}\nexports.signBlob = signBlob;\nfunction verifyBlob(data, key, signature, algorithm) {\n  // The try/catch is to work around an issue in Node 14.x where verify throws\n  // an error in some scenarios if the signature is invalid.\n  try {\n    return crypto_1.default.verify(algorithm, data, key, signature);\n  } catch (e) {\n    return false;\n  }\n}\nexports.verifyBlob = verifyBlob;\nfunction hash(data) {\n  const hash = crypto_1.default.createHash(SHA256_ALGORITHM);\n  return hash.update(data).digest();\n}\nexports.hash = hash;\nfunction randomBytes(count) {\n  return crypto_1.default.randomBytes(count);\n}\nexports.randomBytes = randomBytes;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","randomBytes","hash","verifyBlob","signBlob","createPublicKey","generateKeyPair","crypto_1","require","EC_KEYPAIR_TYPE","P256_CURVE","SHA256_ALGORITHM","default","generateKeyPairSync","namedCurve","key","format","type","data","privateKey","sign","signature","algorithm","verify","e","createHash","update","digest","count"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/sigstore/dist/util/crypto.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = exports.hash = exports.verifyBlob = exports.signBlob = exports.createPublicKey = exports.generateKeyPair = void 0;\n/*\nCopyright 2022 The Sigstore Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nconst crypto_1 = __importDefault(require(\"crypto\"));\nconst EC_KEYPAIR_TYPE = 'ec';\nconst P256_CURVE = 'P-256';\nconst SHA256_ALGORITHM = 'sha256';\nfunction generateKeyPair() {\n    return crypto_1.default.generateKeyPairSync(EC_KEYPAIR_TYPE, {\n        namedCurve: P256_CURVE,\n    });\n}\nexports.generateKeyPair = generateKeyPair;\nfunction createPublicKey(key) {\n    if (typeof key === 'string') {\n        return crypto_1.default.createPublicKey(key);\n    }\n    else {\n        return crypto_1.default.createPublicKey({ key, format: 'der', type: 'spki' });\n    }\n}\nexports.createPublicKey = createPublicKey;\nfunction signBlob(data, privateKey) {\n    return crypto_1.default.sign(null, data, privateKey);\n}\nexports.signBlob = signBlob;\nfunction verifyBlob(data, key, signature, algorithm) {\n    // The try/catch is to work around an issue in Node 14.x where verify throws\n    // an error in some scenarios if the signature is invalid.\n    try {\n        return crypto_1.default.verify(algorithm, data, key, signature);\n    }\n    catch (e) {\n        return false;\n    }\n}\nexports.verifyBlob = verifyBlob;\nfunction hash(data) {\n    const hash = crypto_1.default.createHash(SHA256_ALGORITHM);\n    return hash.update(data).digest();\n}\nexports.hash = hash;\nfunction randomBytes(count) {\n    return crypto_1.default.randomBytes(count);\n}\nexports.randomBytes = randomBytes;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,WAAW,GAAGF,OAAO,CAACG,IAAI,GAAGH,OAAO,CAACI,UAAU,GAAGJ,OAAO,CAACK,QAAQ,GAAGL,OAAO,CAACM,eAAe,GAAGN,OAAO,CAACO,eAAe,GAAG,KAAK,CAAC;AACvI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAGb,eAAe,CAACc,OAAO,CAAC,QAAQ,CAAC,CAAC;AACnD,MAAMC,eAAe,GAAG,IAAI;AAC5B,MAAMC,UAAU,GAAG,OAAO;AAC1B,MAAMC,gBAAgB,GAAG,QAAQ;AACjC,SAASL,eAAeA,CAAA,EAAG;EACvB,OAAOC,QAAQ,CAACK,OAAO,CAACC,mBAAmB,CAACJ,eAAe,EAAE;IACzDK,UAAU,EAAEJ;EAChB,CAAC,CAAC;AACN;AACAX,OAAO,CAACO,eAAe,GAAGA,eAAe;AACzC,SAASD,eAAeA,CAACU,GAAG,EAAE;EAC1B,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACzB,OAAOR,QAAQ,CAACK,OAAO,CAACP,eAAe,CAACU,GAAG,CAAC;EAChD,CAAC,MACI;IACD,OAAOR,QAAQ,CAACK,OAAO,CAACP,eAAe,CAAC;MAAEU,GAAG;MAAEC,MAAM,EAAE,KAAK;MAAEC,IAAI,EAAE;IAAO,CAAC,CAAC;EACjF;AACJ;AACAlB,OAAO,CAACM,eAAe,GAAGA,eAAe;AACzC,SAASD,QAAQA,CAACc,IAAI,EAAEC,UAAU,EAAE;EAChC,OAAOZ,QAAQ,CAACK,OAAO,CAACQ,IAAI,CAAC,IAAI,EAAEF,IAAI,EAAEC,UAAU,CAAC;AACxD;AACApB,OAAO,CAACK,QAAQ,GAAGA,QAAQ;AAC3B,SAASD,UAAUA,CAACe,IAAI,EAAEH,GAAG,EAAEM,SAAS,EAAEC,SAAS,EAAE;EACjD;EACA;EACA,IAAI;IACA,OAAOf,QAAQ,CAACK,OAAO,CAACW,MAAM,CAACD,SAAS,EAAEJ,IAAI,EAAEH,GAAG,EAAEM,SAAS,CAAC;EACnE,CAAC,CACD,OAAOG,CAAC,EAAE;IACN,OAAO,KAAK;EAChB;AACJ;AACAzB,OAAO,CAACI,UAAU,GAAGA,UAAU;AAC/B,SAASD,IAAIA,CAACgB,IAAI,EAAE;EAChB,MAAMhB,IAAI,GAAGK,QAAQ,CAACK,OAAO,CAACa,UAAU,CAACd,gBAAgB,CAAC;EAC1D,OAAOT,IAAI,CAACwB,MAAM,CAACR,IAAI,CAAC,CAACS,MAAM,CAAC,CAAC;AACrC;AACA5B,OAAO,CAACG,IAAI,GAAGA,IAAI;AACnB,SAASD,WAAWA,CAAC2B,KAAK,EAAE;EACxB,OAAOrB,QAAQ,CAACK,OAAO,CAACX,WAAW,CAAC2B,KAAK,CAAC;AAC9C;AACA7B,OAAO,CAACE,WAAW,GAAGA,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}