{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _asyncToGenerator = require(\"C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArchitectCommandModule = void 0;\nconst config_1 = require(\"../utilities/config\");\nconst memoize_1 = require(\"../utilities/memoize\");\nconst architect_base_command_module_1 = require(\"./architect-base-command-module\");\nconst command_module_1 = require(\"./command-module\");\nclass ArchitectCommandModule extends architect_base_command_module_1.ArchitectBaseCommandModule {\n  builder(argv) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const project = _this.getArchitectProject();\n      const {\n        jsonHelp,\n        getYargsCompletions,\n        help\n      } = _this.context.args.options;\n      const localYargs = argv.positional('project', {\n        describe: 'The name of the project to build. Can be an application or a library.',\n        type: 'string',\n        // Hide choices from JSON help so that we don't display them in AIO.\n        choices: jsonHelp ? undefined : _this.getProjectChoices()\n      }).option('configuration', {\n        describe: `One or more named builder configurations as a comma-separated ` + `list as specified in the \"configurations\" section in angular.json.\\n` + `The builder uses the named configurations to run the given target.\\n` + `For more information, see https://angular.io/guide/workspace-config#alternate-build-configurations.`,\n        alias: 'c',\n        type: 'string',\n        // Show only in when using --help and auto completion because otherwise comma seperated configuration values will be invalid.\n        // Also, hide choices from JSON help so that we don't display them in AIO.\n        choices: (getYargsCompletions || help) && !jsonHelp && project ? _this.getConfigurationChoices(project) : undefined\n      }).strict();\n      if (!project) {\n        return localYargs;\n      }\n      const target = _this.getArchitectTarget();\n      const schemaOptions = yield _this.getArchitectTargetOptions({\n        project,\n        target\n      });\n      return _this.addSchemaOptionsToCommand(localYargs, schemaOptions);\n    })();\n  }\n  run(options) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const target = _this2.getArchitectTarget();\n      const {\n        configuration = '',\n        project,\n        ...architectOptions\n      } = options;\n      if (!project) {\n        // This runs each target sequentially.\n        // Running them in parallel would jumble the log messages.\n        let result = 0;\n        const projectNames = _this2.getProjectNamesByTarget(target);\n        if (!projectNames) {\n          return _this2.onMissingTarget('Cannot determine project or target for command.');\n        }\n        for (const project of projectNames) {\n          result |= yield _this2.runSingleTarget({\n            configuration,\n            target,\n            project\n          }, architectOptions);\n        }\n        return result;\n      } else {\n        return yield _this2.runSingleTarget({\n          configuration,\n          target,\n          project\n        }, architectOptions);\n      }\n    })();\n  }\n  getArchitectProject() {\n    const {\n      options,\n      positional\n    } = this.context.args;\n    const [, projectName] = positional;\n    if (projectName) {\n      return projectName;\n    }\n    // Yargs allows positional args to be used as flags.\n    if (typeof options['project'] === 'string') {\n      return options['project'];\n    }\n    const target = this.getArchitectTarget();\n    const projectFromTarget = this.getProjectNamesByTarget(target);\n    return projectFromTarget?.length ? projectFromTarget[0] : undefined;\n  }\n  getProjectNamesByTarget(target) {\n    const workspace = this.getWorkspaceOrThrow();\n    const allProjectsForTargetName = [];\n    for (const [name, project] of workspace.projects) {\n      if (project.targets.has(target)) {\n        allProjectsForTargetName.push(name);\n      }\n    }\n    if (allProjectsForTargetName.length === 0) {\n      return undefined;\n    }\n    if (this.multiTarget) {\n      // For multi target commands, we always list all projects that have the target.\n      return allProjectsForTargetName;\n    } else {\n      if (allProjectsForTargetName.length === 1) {\n        return allProjectsForTargetName;\n      }\n      const maybeProject = (0, config_1.getProjectByCwd)(workspace);\n      if (maybeProject) {\n        return allProjectsForTargetName.includes(maybeProject) ? [maybeProject] : undefined;\n      }\n      const {\n        getYargsCompletions,\n        help\n      } = this.context.args.options;\n      if (!getYargsCompletions && !help) {\n        // Only issue the below error when not in help / completion mode.\n        throw new command_module_1.CommandModuleError('Cannot determine project for command.\\n' + 'This is a multi-project workspace and more than one project supports this command. ' + `Run \"ng ${this.command}\" to execute the command for a specific project or change the current ` + 'working directory to a project directory.\\n\\n' + `Available projects are:\\n${allProjectsForTargetName.sort().map(p => `- ${p}`).join('\\n')}`);\n      }\n    }\n    return undefined;\n  }\n  /** @returns a sorted list of project names to be used for auto completion. */\n  getProjectChoices() {\n    const {\n      workspace\n    } = this.context;\n    return workspace ? [...workspace.projects.keys()].sort() : undefined;\n  }\n  /** @returns a sorted list of configuration names to be used for auto completion. */\n  getConfigurationChoices(project) {\n    const projectDefinition = this.context.workspace?.projects.get(project);\n    if (!projectDefinition) {\n      return undefined;\n    }\n    const target = this.getArchitectTarget();\n    const configurations = projectDefinition.targets.get(target)?.configurations;\n    return configurations ? Object.keys(configurations).sort() : undefined;\n  }\n}\nexports.ArchitectCommandModule = ArchitectCommandModule;\n__decorate([memoize_1.memoize, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", Object)], ArchitectCommandModule.prototype, \"getProjectNamesByTarget\", null);","map":{"version":3,"names":["_asyncToGenerator","require","default","__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","exports","value","ArchitectCommandModule","config_1","memoize_1","architect_base_command_module_1","command_module_1","ArchitectBaseCommandModule","builder","argv","_this","project","getArchitectProject","jsonHelp","getYargsCompletions","help","context","args","options","localYargs","positional","describe","type","choices","undefined","getProjectChoices","option","alias","getConfigurationChoices","strict","getArchitectTarget","schemaOptions","getArchitectTargetOptions","addSchemaOptionsToCommand","run","_this2","configuration","architectOptions","result","projectNames","getProjectNamesByTarget","onMissingTarget","runSingleTarget","projectName","projectFromTarget","workspace","getWorkspaceOrThrow","allProjectsForTargetName","name","projects","targets","has","push","multiTarget","maybeProject","getProjectByCwd","includes","CommandModuleError","command","sort","map","p","join","keys","projectDefinition","get","configurations","memoize","Function","String","prototype"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@angular/cli/src/command-builder/architect-command-module.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ArchitectCommandModule = void 0;\nconst config_1 = require(\"../utilities/config\");\nconst memoize_1 = require(\"../utilities/memoize\");\nconst architect_base_command_module_1 = require(\"./architect-base-command-module\");\nconst command_module_1 = require(\"./command-module\");\nclass ArchitectCommandModule extends architect_base_command_module_1.ArchitectBaseCommandModule {\n    async builder(argv) {\n        const project = this.getArchitectProject();\n        const { jsonHelp, getYargsCompletions, help } = this.context.args.options;\n        const localYargs = argv\n            .positional('project', {\n            describe: 'The name of the project to build. Can be an application or a library.',\n            type: 'string',\n            // Hide choices from JSON help so that we don't display them in AIO.\n            choices: jsonHelp ? undefined : this.getProjectChoices(),\n        })\n            .option('configuration', {\n            describe: `One or more named builder configurations as a comma-separated ` +\n                `list as specified in the \"configurations\" section in angular.json.\\n` +\n                `The builder uses the named configurations to run the given target.\\n` +\n                `For more information, see https://angular.io/guide/workspace-config#alternate-build-configurations.`,\n            alias: 'c',\n            type: 'string',\n            // Show only in when using --help and auto completion because otherwise comma seperated configuration values will be invalid.\n            // Also, hide choices from JSON help so that we don't display them in AIO.\n            choices: (getYargsCompletions || help) && !jsonHelp && project\n                ? this.getConfigurationChoices(project)\n                : undefined,\n        })\n            .strict();\n        if (!project) {\n            return localYargs;\n        }\n        const target = this.getArchitectTarget();\n        const schemaOptions = await this.getArchitectTargetOptions({\n            project,\n            target,\n        });\n        return this.addSchemaOptionsToCommand(localYargs, schemaOptions);\n    }\n    async run(options) {\n        const target = this.getArchitectTarget();\n        const { configuration = '', project, ...architectOptions } = options;\n        if (!project) {\n            // This runs each target sequentially.\n            // Running them in parallel would jumble the log messages.\n            let result = 0;\n            const projectNames = this.getProjectNamesByTarget(target);\n            if (!projectNames) {\n                return this.onMissingTarget('Cannot determine project or target for command.');\n            }\n            for (const project of projectNames) {\n                result |= await this.runSingleTarget({ configuration, target, project }, architectOptions);\n            }\n            return result;\n        }\n        else {\n            return await this.runSingleTarget({ configuration, target, project }, architectOptions);\n        }\n    }\n    getArchitectProject() {\n        const { options, positional } = this.context.args;\n        const [, projectName] = positional;\n        if (projectName) {\n            return projectName;\n        }\n        // Yargs allows positional args to be used as flags.\n        if (typeof options['project'] === 'string') {\n            return options['project'];\n        }\n        const target = this.getArchitectTarget();\n        const projectFromTarget = this.getProjectNamesByTarget(target);\n        return projectFromTarget?.length ? projectFromTarget[0] : undefined;\n    }\n    getProjectNamesByTarget(target) {\n        const workspace = this.getWorkspaceOrThrow();\n        const allProjectsForTargetName = [];\n        for (const [name, project] of workspace.projects) {\n            if (project.targets.has(target)) {\n                allProjectsForTargetName.push(name);\n            }\n        }\n        if (allProjectsForTargetName.length === 0) {\n            return undefined;\n        }\n        if (this.multiTarget) {\n            // For multi target commands, we always list all projects that have the target.\n            return allProjectsForTargetName;\n        }\n        else {\n            if (allProjectsForTargetName.length === 1) {\n                return allProjectsForTargetName;\n            }\n            const maybeProject = (0, config_1.getProjectByCwd)(workspace);\n            if (maybeProject) {\n                return allProjectsForTargetName.includes(maybeProject) ? [maybeProject] : undefined;\n            }\n            const { getYargsCompletions, help } = this.context.args.options;\n            if (!getYargsCompletions && !help) {\n                // Only issue the below error when not in help / completion mode.\n                throw new command_module_1.CommandModuleError('Cannot determine project for command.\\n' +\n                    'This is a multi-project workspace and more than one project supports this command. ' +\n                    `Run \"ng ${this.command}\" to execute the command for a specific project or change the current ` +\n                    'working directory to a project directory.\\n\\n' +\n                    `Available projects are:\\n${allProjectsForTargetName\n                        .sort()\n                        .map((p) => `- ${p}`)\n                        .join('\\n')}`);\n            }\n        }\n        return undefined;\n    }\n    /** @returns a sorted list of project names to be used for auto completion. */\n    getProjectChoices() {\n        const { workspace } = this.context;\n        return workspace ? [...workspace.projects.keys()].sort() : undefined;\n    }\n    /** @returns a sorted list of configuration names to be used for auto completion. */\n    getConfigurationChoices(project) {\n        const projectDefinition = this.context.workspace?.projects.get(project);\n        if (!projectDefinition) {\n            return undefined;\n        }\n        const target = this.getArchitectTarget();\n        const configurations = projectDefinition.targets.get(target)?.configurations;\n        return configurations ? Object.keys(configurations).sort() : undefined;\n    }\n}\nexports.ArchitectCommandModule = ArchitectCommandModule;\n__decorate([\n    memoize_1.memoize,\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [String]),\n    __metadata(\"design:returntype\", Object)\n], ArchitectCommandModule.prototype, \"getProjectNamesByTarget\", null);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}