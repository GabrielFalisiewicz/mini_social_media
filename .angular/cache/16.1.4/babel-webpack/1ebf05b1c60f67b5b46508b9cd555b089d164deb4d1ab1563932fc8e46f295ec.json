{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CIContextProvider = void 0;\n/*\nCopyright 2022 The Sigstore Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nconst make_fetch_happen_1 = __importDefault(require(\"make-fetch-happen\"));\nconst util_1 = require(\"../util\");\n// Collection of all the CI-specific providers we have implemented\nconst providers = [getGHAToken, getEnv];\n/**\n * CIContextProvider is a composite identity provider which will iterate\n * over all of the CI-specific providers and return the token from the first\n * one that resolves.\n */\nclass CIContextProvider {\n  constructor(audience) {\n    this.audience = audience;\n  }\n  // Invoke all registered ProviderFuncs and return the value of whichever one\n  // resolves first.\n  getToken() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return util_1.promise.promiseAny(providers.map(getToken => getToken(_this.audience))).catch(() => Promise.reject('CI: no tokens available'));\n    })();\n  }\n}\nexports.CIContextProvider = CIContextProvider;\n/**\n * getGHAToken can retrieve an OIDC token when running in a GitHub Actions\n * workflow\n */\nfunction getGHAToken(_x) {\n  return _getGHAToken.apply(this, arguments);\n}\n/**\n * getEnv can retrieve an OIDC token from an environment variable.\n * This matches the behavior of https://github.com/sigstore/cosign/tree/main/pkg/providers/envvar\n */\nfunction _getGHAToken() {\n  _getGHAToken = _asyncToGenerator(function* (audience) {\n    // Check to see if we're running in GitHub Actions\n    if (!process.env.ACTIONS_ID_TOKEN_REQUEST_URL || !process.env.ACTIONS_ID_TOKEN_REQUEST_TOKEN) {\n      return Promise.reject('no token available');\n    }\n    // Construct URL to request token w/ appropriate audience\n    const url = new URL(process.env.ACTIONS_ID_TOKEN_REQUEST_URL);\n    url.searchParams.append('audience', audience);\n    const response = yield (0, make_fetch_happen_1.default)(url.href, {\n      retry: 2,\n      headers: {\n        Accept: 'application/json',\n        Authorization: `Bearer ${process.env.ACTIONS_ID_TOKEN_REQUEST_TOKEN}`\n      }\n    });\n    return response.json().then(data => data.value);\n  });\n  return _getGHAToken.apply(this, arguments);\n}\nfunction getEnv() {\n  return _getEnv.apply(this, arguments);\n}\nfunction _getEnv() {\n  _getEnv = _asyncToGenerator(function* () {\n    if (!process.env.SIGSTORE_ID_TOKEN) {\n      return Promise.reject('no token available');\n    }\n    return process.env.SIGSTORE_ID_TOKEN;\n  });\n  return _getEnv.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","default","__importDefault","mod","__esModule","Object","defineProperty","exports","value","CIContextProvider","make_fetch_happen_1","util_1","providers","getGHAToken","getEnv","constructor","audience","getToken","_this","promise","promiseAny","map","catch","Promise","reject","_x","_getGHAToken","apply","arguments","process","env","ACTIONS_ID_TOKEN_REQUEST_URL","ACTIONS_ID_TOKEN_REQUEST_TOKEN","url","URL","searchParams","append","response","href","retry","headers","Accept","Authorization","json","then","data","_getEnv","SIGSTORE_ID_TOKEN"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/sigstore/dist/identity/ci.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CIContextProvider = void 0;\n/*\nCopyright 2022 The Sigstore Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nconst make_fetch_happen_1 = __importDefault(require(\"make-fetch-happen\"));\nconst util_1 = require(\"../util\");\n// Collection of all the CI-specific providers we have implemented\nconst providers = [getGHAToken, getEnv];\n/**\n * CIContextProvider is a composite identity provider which will iterate\n * over all of the CI-specific providers and return the token from the first\n * one that resolves.\n */\nclass CIContextProvider {\n    constructor(audience) {\n        this.audience = audience;\n    }\n    // Invoke all registered ProviderFuncs and return the value of whichever one\n    // resolves first.\n    async getToken() {\n        return util_1.promise\n            .promiseAny(providers.map((getToken) => getToken(this.audience)))\n            .catch(() => Promise.reject('CI: no tokens available'));\n    }\n}\nexports.CIContextProvider = CIContextProvider;\n/**\n * getGHAToken can retrieve an OIDC token when running in a GitHub Actions\n * workflow\n */\nasync function getGHAToken(audience) {\n    // Check to see if we're running in GitHub Actions\n    if (!process.env.ACTIONS_ID_TOKEN_REQUEST_URL ||\n        !process.env.ACTIONS_ID_TOKEN_REQUEST_TOKEN) {\n        return Promise.reject('no token available');\n    }\n    // Construct URL to request token w/ appropriate audience\n    const url = new URL(process.env.ACTIONS_ID_TOKEN_REQUEST_URL);\n    url.searchParams.append('audience', audience);\n    const response = await (0, make_fetch_happen_1.default)(url.href, {\n        retry: 2,\n        headers: {\n            Accept: 'application/json',\n            Authorization: `Bearer ${process.env.ACTIONS_ID_TOKEN_REQUEST_TOKEN}`,\n        },\n    });\n    return response.json().then((data) => data.value);\n}\n/**\n * getEnv can retrieve an OIDC token from an environment variable.\n * This matches the behavior of https://github.com/sigstore/cosign/tree/main/pkg/providers/envvar\n */\nasync function getEnv() {\n    if (!process.env.SIGSTORE_ID_TOKEN) {\n        return Promise.reject('no token available');\n    }\n    return process.env.SIGSTORE_ID_TOKEN;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}