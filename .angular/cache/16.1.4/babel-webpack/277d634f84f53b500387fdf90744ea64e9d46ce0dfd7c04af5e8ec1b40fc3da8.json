{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.verifySigningCertificate = void 0;\nconst chain_1 = require(\"./chain\");\nconst sct_1 = require(\"./sct\");\nconst signer_1 = require(\"./signer\");\nfunction verifySigningCertificate(bundle, trustedRoot, options) {\n  // Check that a trusted certificate chain can be found for the signing\n  // certificate in the bundle. Only the first certificate in the bundle's\n  // chain is used -- everything else must come from the trusted root.\n  const trustedChain = (0, chain_1.verifyChain)(bundle.verificationMaterial.content.x509CertificateChain.certificates[0], trustedRoot.certificateAuthorities);\n  // Unless disabled, verify the SCTs in the signing certificate\n  if (options.ctlogOptions.disable === false) {\n    (0, sct_1.verifySCTs)(trustedChain, trustedRoot.ctlogs, options.ctlogOptions);\n  }\n  // Verify the signing certificate against the provided identities\n  // if provided\n  if (options.signers) {\n    (0, signer_1.verifySignerIdentity)(trustedChain[0], options.signers.certificateIdentities);\n  }\n}\nexports.verifySigningCertificate = verifySigningCertificate;","map":{"version":3,"names":["Object","defineProperty","exports","value","verifySigningCertificate","chain_1","require","sct_1","signer_1","bundle","trustedRoot","options","trustedChain","verifyChain","verificationMaterial","content","x509CertificateChain","certificates","certificateAuthorities","ctlogOptions","disable","verifySCTs","ctlogs","signers","verifySignerIdentity","certificateIdentities"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/sigstore/dist/ca/verify/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.verifySigningCertificate = void 0;\nconst chain_1 = require(\"./chain\");\nconst sct_1 = require(\"./sct\");\nconst signer_1 = require(\"./signer\");\nfunction verifySigningCertificate(bundle, trustedRoot, options) {\n    // Check that a trusted certificate chain can be found for the signing\n    // certificate in the bundle. Only the first certificate in the bundle's\n    // chain is used -- everything else must come from the trusted root.\n    const trustedChain = (0, chain_1.verifyChain)(bundle.verificationMaterial.content.x509CertificateChain.certificates[0], trustedRoot.certificateAuthorities);\n    // Unless disabled, verify the SCTs in the signing certificate\n    if (options.ctlogOptions.disable === false) {\n        (0, sct_1.verifySCTs)(trustedChain, trustedRoot.ctlogs, options.ctlogOptions);\n    }\n    // Verify the signing certificate against the provided identities\n    // if provided\n    if (options.signers) {\n        (0, signer_1.verifySignerIdentity)(trustedChain[0], options.signers.certificateIdentities);\n    }\n}\nexports.verifySigningCertificate = verifySigningCertificate;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,wBAAwB,GAAG,KAAK,CAAC;AACzC,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAME,QAAQ,GAAGF,OAAO,CAAC,UAAU,CAAC;AACpC,SAASF,wBAAwBA,CAACK,MAAM,EAAEC,WAAW,EAAEC,OAAO,EAAE;EAC5D;EACA;EACA;EACA,MAAMC,YAAY,GAAG,CAAC,CAAC,EAAEP,OAAO,CAACQ,WAAW,EAAEJ,MAAM,CAACK,oBAAoB,CAACC,OAAO,CAACC,oBAAoB,CAACC,YAAY,CAAC,CAAC,CAAC,EAAEP,WAAW,CAACQ,sBAAsB,CAAC;EAC3J;EACA,IAAIP,OAAO,CAACQ,YAAY,CAACC,OAAO,KAAK,KAAK,EAAE;IACxC,CAAC,CAAC,EAAEb,KAAK,CAACc,UAAU,EAAET,YAAY,EAAEF,WAAW,CAACY,MAAM,EAAEX,OAAO,CAACQ,YAAY,CAAC;EACjF;EACA;EACA;EACA,IAAIR,OAAO,CAACY,OAAO,EAAE;IACjB,CAAC,CAAC,EAAEf,QAAQ,CAACgB,oBAAoB,EAAEZ,YAAY,CAAC,CAAC,CAAC,EAAED,OAAO,CAACY,OAAO,CAACE,qBAAqB,CAAC;EAC9F;AACJ;AACAvB,OAAO,CAACE,wBAAwB,GAAGA,wBAAwB"},"metadata":{},"sourceType":"script","externalDependencies":[]}