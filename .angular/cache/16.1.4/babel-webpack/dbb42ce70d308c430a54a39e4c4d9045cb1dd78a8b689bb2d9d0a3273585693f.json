{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fileBuffer = exports.fileBufferToString = exports.stringToFileBuffer = void 0;\nconst node_util_1 = require(\"node:util\");\nfunction stringToFileBuffer(str) {\n  return new node_util_1.TextEncoder().encode(str).buffer;\n}\nexports.stringToFileBuffer = stringToFileBuffer;\nfunction fileBufferToString(fileBuffer) {\n  if (fileBuffer.toString.length === 1) {\n    return fileBuffer.toString('utf-8');\n  }\n  return new node_util_1.TextDecoder('utf-8').decode(new Uint8Array(fileBuffer));\n}\nexports.fileBufferToString = fileBufferToString;\n/** @deprecated use `stringToFileBuffer` instead. */\nconst fileBuffer = (strings, ...values) => {\n  return stringToFileBuffer(String.raw(strings, ...values));\n};\nexports.fileBuffer = fileBuffer;","map":{"version":3,"names":["Object","defineProperty","exports","value","fileBuffer","fileBufferToString","stringToFileBuffer","node_util_1","require","str","TextEncoder","encode","buffer","toString","length","TextDecoder","decode","Uint8Array","strings","values","String","raw"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@angular-devkit/core/src/virtual-fs/host/buffer.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fileBuffer = exports.fileBufferToString = exports.stringToFileBuffer = void 0;\nconst node_util_1 = require(\"node:util\");\nfunction stringToFileBuffer(str) {\n    return new node_util_1.TextEncoder().encode(str).buffer;\n}\nexports.stringToFileBuffer = stringToFileBuffer;\nfunction fileBufferToString(fileBuffer) {\n    if (fileBuffer.toString.length === 1) {\n        return fileBuffer.toString('utf-8');\n    }\n    return new node_util_1.TextDecoder('utf-8').decode(new Uint8Array(fileBuffer));\n}\nexports.fileBufferToString = fileBufferToString;\n/** @deprecated use `stringToFileBuffer` instead. */\nconst fileBuffer = (strings, ...values) => {\n    return stringToFileBuffer(String.raw(strings, ...values));\n};\nexports.fileBuffer = fileBuffer;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,UAAU,GAAGF,OAAO,CAACG,kBAAkB,GAAGH,OAAO,CAACI,kBAAkB,GAAG,KAAK,CAAC;AACrF,MAAMC,WAAW,GAAGC,OAAO,CAAC,WAAW,CAAC;AACxC,SAASF,kBAAkBA,CAACG,GAAG,EAAE;EAC7B,OAAO,IAAIF,WAAW,CAACG,WAAW,CAAC,CAAC,CAACC,MAAM,CAACF,GAAG,CAAC,CAACG,MAAM;AAC3D;AACAV,OAAO,CAACI,kBAAkB,GAAGA,kBAAkB;AAC/C,SAASD,kBAAkBA,CAACD,UAAU,EAAE;EACpC,IAAIA,UAAU,CAACS,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;IAClC,OAAOV,UAAU,CAACS,QAAQ,CAAC,OAAO,CAAC;EACvC;EACA,OAAO,IAAIN,WAAW,CAACQ,WAAW,CAAC,OAAO,CAAC,CAACC,MAAM,CAAC,IAAIC,UAAU,CAACb,UAAU,CAAC,CAAC;AAClF;AACAF,OAAO,CAACG,kBAAkB,GAAGA,kBAAkB;AAC/C;AACA,MAAMD,UAAU,GAAGA,CAACc,OAAO,EAAE,GAAGC,MAAM,KAAK;EACvC,OAAOb,kBAAkB,CAACc,MAAM,CAACC,GAAG,CAACH,OAAO,EAAE,GAAGC,MAAM,CAAC,CAAC;AAC7D,CAAC;AACDjB,OAAO,CAACE,UAAU,GAAGA,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}