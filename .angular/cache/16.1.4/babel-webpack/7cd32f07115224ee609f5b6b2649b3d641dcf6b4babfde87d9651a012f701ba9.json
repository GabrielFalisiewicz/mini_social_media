{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NullTree = exports.NullTreeDirEntry = exports.CannotCreateFileException = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst exception_1 = require(\"../exception/exception\");\nconst interface_1 = require(\"./interface\");\nconst recorder_1 = require(\"./recorder\");\nclass CannotCreateFileException extends core_1.BaseException {\n  constructor(path) {\n    super(`Cannot create file \"${path}\".`);\n  }\n}\nexports.CannotCreateFileException = CannotCreateFileException;\nclass NullTreeDirEntry {\n  get parent() {\n    return this.path == '/' ? null : new NullTreeDirEntry((0, core_1.dirname)(this.path));\n  }\n  constructor(path) {\n    this.path = path;\n    this.subdirs = [];\n    this.subfiles = [];\n  }\n  dir(name) {\n    return new NullTreeDirEntry((0, core_1.join)(this.path, name));\n  }\n  file(_name) {\n    return null;\n  }\n  visit() {}\n}\nexports.NullTreeDirEntry = NullTreeDirEntry;\nclass NullTree {\n  constructor() {\n    this.root = new NullTreeDirEntry((0, core_1.normalize)('/'));\n  }\n  [interface_1.TreeSymbol]() {\n    return this;\n  }\n  branch() {\n    return new NullTree();\n  }\n  merge(_other, _strategy) {}\n  // Simple readonly file system operations.\n  exists(_path) {\n    return false;\n  }\n  read(_path) {\n    return null;\n  }\n  readText(path) {\n    throw new exception_1.FileDoesNotExistException(path);\n  }\n  readJson(path) {\n    throw new exception_1.FileDoesNotExistException(path);\n  }\n  get(_path) {\n    return null;\n  }\n  getDir(path) {\n    return new NullTreeDirEntry((0, core_1.normalize)('/' + path));\n  }\n  visit() {}\n  // Change content of host files.\n  beginUpdate(path) {\n    throw new exception_1.FileDoesNotExistException(path);\n  }\n  commitUpdate(record) {\n    throw new exception_1.FileDoesNotExistException(record instanceof recorder_1.UpdateRecorderBase ? record.path : '<unknown>');\n  }\n  // Change structure of the host.\n  copy(path, _to) {\n    throw new exception_1.FileDoesNotExistException(path);\n  }\n  delete(path) {\n    throw new exception_1.FileDoesNotExistException(path);\n  }\n  create(path, _content) {\n    throw new CannotCreateFileException(path);\n  }\n  rename(path, _to) {\n    throw new exception_1.FileDoesNotExistException(path);\n  }\n  overwrite(path, _content) {\n    throw new exception_1.FileDoesNotExistException(path);\n  }\n  apply(_action, _strategy) {}\n  get actions() {\n    return [];\n  }\n}\nexports.NullTree = NullTree;","map":{"version":3,"names":["Object","defineProperty","exports","value","NullTree","NullTreeDirEntry","CannotCreateFileException","core_1","require","exception_1","interface_1","recorder_1","BaseException","constructor","path","parent","dirname","subdirs","subfiles","dir","name","join","file","_name","visit","root","normalize","TreeSymbol","branch","merge","_other","_strategy","exists","_path","read","readText","FileDoesNotExistException","readJson","get","getDir","beginUpdate","commitUpdate","record","UpdateRecorderBase","copy","_to","delete","create","_content","rename","overwrite","apply","_action","actions"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@angular-devkit/schematics/src/tree/null.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NullTree = exports.NullTreeDirEntry = exports.CannotCreateFileException = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst exception_1 = require(\"../exception/exception\");\nconst interface_1 = require(\"./interface\");\nconst recorder_1 = require(\"./recorder\");\nclass CannotCreateFileException extends core_1.BaseException {\n    constructor(path) {\n        super(`Cannot create file \"${path}\".`);\n    }\n}\nexports.CannotCreateFileException = CannotCreateFileException;\nclass NullTreeDirEntry {\n    get parent() {\n        return this.path == '/' ? null : new NullTreeDirEntry((0, core_1.dirname)(this.path));\n    }\n    constructor(path) {\n        this.path = path;\n        this.subdirs = [];\n        this.subfiles = [];\n    }\n    dir(name) {\n        return new NullTreeDirEntry((0, core_1.join)(this.path, name));\n    }\n    file(_name) {\n        return null;\n    }\n    visit() { }\n}\nexports.NullTreeDirEntry = NullTreeDirEntry;\nclass NullTree {\n    constructor() {\n        this.root = new NullTreeDirEntry((0, core_1.normalize)('/'));\n    }\n    [interface_1.TreeSymbol]() {\n        return this;\n    }\n    branch() {\n        return new NullTree();\n    }\n    merge(_other, _strategy) { }\n    // Simple readonly file system operations.\n    exists(_path) {\n        return false;\n    }\n    read(_path) {\n        return null;\n    }\n    readText(path) {\n        throw new exception_1.FileDoesNotExistException(path);\n    }\n    readJson(path) {\n        throw new exception_1.FileDoesNotExistException(path);\n    }\n    get(_path) {\n        return null;\n    }\n    getDir(path) {\n        return new NullTreeDirEntry((0, core_1.normalize)('/' + path));\n    }\n    visit() { }\n    // Change content of host files.\n    beginUpdate(path) {\n        throw new exception_1.FileDoesNotExistException(path);\n    }\n    commitUpdate(record) {\n        throw new exception_1.FileDoesNotExistException(record instanceof recorder_1.UpdateRecorderBase ? record.path : '<unknown>');\n    }\n    // Change structure of the host.\n    copy(path, _to) {\n        throw new exception_1.FileDoesNotExistException(path);\n    }\n    delete(path) {\n        throw new exception_1.FileDoesNotExistException(path);\n    }\n    create(path, _content) {\n        throw new CannotCreateFileException(path);\n    }\n    rename(path, _to) {\n        throw new exception_1.FileDoesNotExistException(path);\n    }\n    overwrite(path, _content) {\n        throw new exception_1.FileDoesNotExistException(path);\n    }\n    apply(_action, _strategy) { }\n    get actions() {\n        return [];\n    }\n}\nexports.NullTree = NullTree;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}