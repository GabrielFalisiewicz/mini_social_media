{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _asyncToGenerator = require(\"C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.runCommand = void 0;\nconst yargs_1 = __importDefault(require(\"yargs\"));\nconst helpers_1 = require(\"yargs/helpers\");\nconst command_config_1 = require(\"../commands/command-config\");\nconst color_1 = require(\"../utilities/color\");\nconst config_1 = require(\"../utilities/config\");\nconst error_1 = require(\"../utilities/error\");\nconst package_manager_1 = require(\"../utilities/package-manager\");\nconst command_module_1 = require(\"./command-module\");\nconst command_1 = require(\"./utilities/command\");\nconst json_help_1 = require(\"./utilities/json-help\");\nconst normalize_options_middleware_1 = require(\"./utilities/normalize-options-middleware\");\nconst yargsParser = helpers_1.Parser;\nfunction runCommand(_x, _x2) {\n  return _runCommand.apply(this, arguments);\n}\nfunction _runCommand() {\n  _runCommand = _asyncToGenerator(function* (args, logger) {\n    const {\n      $0,\n      _,\n      help = false,\n      jsonHelp = false,\n      getYargsCompletions = false,\n      ...rest\n    } = yargsParser(args, {\n      boolean: ['help', 'json-help', 'get-yargs-completions'],\n      alias: {\n        'collection': 'c'\n      }\n    });\n    // When `getYargsCompletions` is true the scriptName 'ng' at index 0 is not removed.\n    const positional = getYargsCompletions ? _.slice(1) : _;\n    let workspace;\n    let globalConfiguration;\n    try {\n      [workspace, globalConfiguration] = yield Promise.all([(0, config_1.getWorkspace)('local'), (0, config_1.getWorkspace)('global')]);\n    } catch (e) {\n      (0, error_1.assertIsError)(e);\n      logger.fatal(e.message);\n      return 1;\n    }\n    const root = workspace?.basePath ?? process.cwd();\n    const context = {\n      globalConfiguration,\n      workspace,\n      logger,\n      currentDirectory: process.cwd(),\n      root,\n      packageManager: new package_manager_1.PackageManagerUtils({\n        globalConfiguration,\n        workspace,\n        root\n      }),\n      args: {\n        positional: positional.map(v => v.toString()),\n        options: {\n          help,\n          jsonHelp,\n          getYargsCompletions,\n          ...rest\n        }\n      }\n    };\n    let localYargs = (0, yargs_1.default)(args);\n    for (const CommandModule of yield getCommandsToRegister(positional[0])) {\n      localYargs = (0, command_1.addCommandModuleToYargs)(localYargs, CommandModule, context);\n    }\n    if (jsonHelp) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const usageInstance = localYargs.getInternalMethods().getUsageInstance();\n      usageInstance.help = () => (0, json_help_1.jsonHelpUsage)();\n    }\n    yield localYargs.scriptName('ng')\n    // https://github.com/yargs/yargs/blob/main/docs/advanced.md#customizing-yargs-parser\n    .parserConfiguration({\n      'populate--': true,\n      'unknown-options-as-args': false,\n      'dot-notation': false,\n      'boolean-negation': true,\n      'strip-aliased': true,\n      'strip-dashed': true,\n      'camel-case-expansion': false\n    }).option('json-help', {\n      describe: 'Show help in JSON format.',\n      implies: ['help'],\n      hidden: true,\n      type: 'boolean'\n    }).help('help', 'Shows a help message for this command in the console.')\n    // A complete list of strings can be found: https://github.com/yargs/yargs/blob/main/locales/en.json\n    .updateStrings({\n      'Commands:': color_1.colors.cyan('Commands:'),\n      'Options:': color_1.colors.cyan('Options:'),\n      'Positionals:': color_1.colors.cyan('Arguments:'),\n      'deprecated': color_1.colors.yellow('deprecated'),\n      'deprecated: %s': color_1.colors.yellow('deprecated:') + ' %s',\n      'Did you mean %s?': 'Unknown command. Did you mean %s?'\n    }).epilogue('For more information, see https://angular.io/cli/.\\n').demandCommand(1, command_1.demandCommandFailureMessage).recommendCommands().middleware(normalize_options_middleware_1.normalizeOptionsMiddleware).version(false).showHelpOnFail(false).strict().fail((msg, err) => {\n      throw msg ?\n      // Validation failed example: `Unknown argument:`\n      new command_module_1.CommandModuleError(msg) :\n      // Unknown exception, re-throw.\n      err;\n    }).wrap(yargs_1.default.terminalWidth()).parseAsync();\n    return process.exitCode ?? 0;\n  });\n  return _runCommand.apply(this, arguments);\n}\nexports.runCommand = runCommand;\n/**\n * Get the commands that need to be registered.\n * @returns One or more command factories that needs to be registered.\n */\nfunction getCommandsToRegister(_x3) {\n  return _getCommandsToRegister.apply(this, arguments);\n}\nfunction _getCommandsToRegister() {\n  _getCommandsToRegister = _asyncToGenerator(function* (commandName) {\n    const commands = [];\n    if (commandName in command_config_1.RootCommands) {\n      commands.push(command_config_1.RootCommands[commandName]);\n    } else if (commandName in command_config_1.RootCommandsAliases) {\n      commands.push(command_config_1.RootCommandsAliases[commandName]);\n    } else {\n      // Unknown command, register every possible command.\n      Object.values(command_config_1.RootCommands).forEach(c => commands.push(c));\n    }\n    return Promise.all(commands.map(command => command.factory().then(m => m.default)));\n  });\n  return _getCommandsToRegister.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","default","__importDefault","mod","__esModule","Object","defineProperty","exports","value","runCommand","yargs_1","helpers_1","command_config_1","color_1","config_1","error_1","package_manager_1","command_module_1","command_1","json_help_1","normalize_options_middleware_1","yargsParser","Parser","_x","_x2","_runCommand","apply","arguments","args","logger","$0","_","help","jsonHelp","getYargsCompletions","rest","boolean","alias","positional","slice","workspace","globalConfiguration","Promise","all","getWorkspace","e","assertIsError","fatal","message","root","basePath","process","cwd","context","currentDirectory","packageManager","PackageManagerUtils","map","v","toString","options","localYargs","CommandModule","getCommandsToRegister","addCommandModuleToYargs","usageInstance","getInternalMethods","getUsageInstance","jsonHelpUsage","scriptName","parserConfiguration","option","describe","implies","hidden","type","updateStrings","colors","cyan","yellow","epilogue","demandCommand","demandCommandFailureMessage","recommendCommands","middleware","normalizeOptionsMiddleware","version","showHelpOnFail","strict","fail","msg","err","CommandModuleError","wrap","terminalWidth","parseAsync","exitCode","_x3","_getCommandsToRegister","commandName","commands","RootCommands","push","RootCommandsAliases","values","forEach","c","command","factory","then","m"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@angular/cli/src/command-builder/command-runner.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.runCommand = void 0;\nconst yargs_1 = __importDefault(require(\"yargs\"));\nconst helpers_1 = require(\"yargs/helpers\");\nconst command_config_1 = require(\"../commands/command-config\");\nconst color_1 = require(\"../utilities/color\");\nconst config_1 = require(\"../utilities/config\");\nconst error_1 = require(\"../utilities/error\");\nconst package_manager_1 = require(\"../utilities/package-manager\");\nconst command_module_1 = require(\"./command-module\");\nconst command_1 = require(\"./utilities/command\");\nconst json_help_1 = require(\"./utilities/json-help\");\nconst normalize_options_middleware_1 = require(\"./utilities/normalize-options-middleware\");\nconst yargsParser = helpers_1.Parser;\nasync function runCommand(args, logger) {\n    const { $0, _, help = false, jsonHelp = false, getYargsCompletions = false, ...rest } = yargsParser(args, {\n        boolean: ['help', 'json-help', 'get-yargs-completions'],\n        alias: { 'collection': 'c' },\n    });\n    // When `getYargsCompletions` is true the scriptName 'ng' at index 0 is not removed.\n    const positional = getYargsCompletions ? _.slice(1) : _;\n    let workspace;\n    let globalConfiguration;\n    try {\n        [workspace, globalConfiguration] = await Promise.all([\n            (0, config_1.getWorkspace)('local'),\n            (0, config_1.getWorkspace)('global'),\n        ]);\n    }\n    catch (e) {\n        (0, error_1.assertIsError)(e);\n        logger.fatal(e.message);\n        return 1;\n    }\n    const root = workspace?.basePath ?? process.cwd();\n    const context = {\n        globalConfiguration,\n        workspace,\n        logger,\n        currentDirectory: process.cwd(),\n        root,\n        packageManager: new package_manager_1.PackageManagerUtils({ globalConfiguration, workspace, root }),\n        args: {\n            positional: positional.map((v) => v.toString()),\n            options: {\n                help,\n                jsonHelp,\n                getYargsCompletions,\n                ...rest,\n            },\n        },\n    };\n    let localYargs = (0, yargs_1.default)(args);\n    for (const CommandModule of await getCommandsToRegister(positional[0])) {\n        localYargs = (0, command_1.addCommandModuleToYargs)(localYargs, CommandModule, context);\n    }\n    if (jsonHelp) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const usageInstance = localYargs.getInternalMethods().getUsageInstance();\n        usageInstance.help = () => (0, json_help_1.jsonHelpUsage)();\n    }\n    await localYargs\n        .scriptName('ng')\n        // https://github.com/yargs/yargs/blob/main/docs/advanced.md#customizing-yargs-parser\n        .parserConfiguration({\n        'populate--': true,\n        'unknown-options-as-args': false,\n        'dot-notation': false,\n        'boolean-negation': true,\n        'strip-aliased': true,\n        'strip-dashed': true,\n        'camel-case-expansion': false,\n    })\n        .option('json-help', {\n        describe: 'Show help in JSON format.',\n        implies: ['help'],\n        hidden: true,\n        type: 'boolean',\n    })\n        .help('help', 'Shows a help message for this command in the console.')\n        // A complete list of strings can be found: https://github.com/yargs/yargs/blob/main/locales/en.json\n        .updateStrings({\n        'Commands:': color_1.colors.cyan('Commands:'),\n        'Options:': color_1.colors.cyan('Options:'),\n        'Positionals:': color_1.colors.cyan('Arguments:'),\n        'deprecated': color_1.colors.yellow('deprecated'),\n        'deprecated: %s': color_1.colors.yellow('deprecated:') + ' %s',\n        'Did you mean %s?': 'Unknown command. Did you mean %s?',\n    })\n        .epilogue('For more information, see https://angular.io/cli/.\\n')\n        .demandCommand(1, command_1.demandCommandFailureMessage)\n        .recommendCommands()\n        .middleware(normalize_options_middleware_1.normalizeOptionsMiddleware)\n        .version(false)\n        .showHelpOnFail(false)\n        .strict()\n        .fail((msg, err) => {\n        throw msg\n            ? // Validation failed example: `Unknown argument:`\n                new command_module_1.CommandModuleError(msg)\n            : // Unknown exception, re-throw.\n                err;\n    })\n        .wrap(yargs_1.default.terminalWidth())\n        .parseAsync();\n    return process.exitCode ?? 0;\n}\nexports.runCommand = runCommand;\n/**\n * Get the commands that need to be registered.\n * @returns One or more command factories that needs to be registered.\n */\nasync function getCommandsToRegister(commandName) {\n    const commands = [];\n    if (commandName in command_config_1.RootCommands) {\n        commands.push(command_config_1.RootCommands[commandName]);\n    }\n    else if (commandName in command_config_1.RootCommandsAliases) {\n        commands.push(command_config_1.RootCommandsAliases[commandName]);\n    }\n    else {\n        // Unknown command, register every possible command.\n        Object.values(command_config_1.RootCommands).forEach((c) => commands.push(c));\n    }\n    return Promise.all(commands.map((command) => command.factory().then((m) => m.default)));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}