{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Issuer = void 0;\n/*\nCopyright 2022 The Sigstore Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nconst make_fetch_happen_1 = __importDefault(require(\"make-fetch-happen\"));\n// Standard endpoint for retrieving OpenID configuration information\nconst OPENID_CONFIG_PATH = '/.well-known/openid-configuration';\n/**\n * The Issuer reperesents a single OAuth2 provider.\n *\n * The Issuer is configured with a provider's base OAuth2 endpoint which is\n * used to retrieve the associated configuration information.\n */\nclass Issuer {\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n    this.fetch = make_fetch_happen_1.default.defaults({\n      retry: 2\n    });\n  }\n  authEndpoint() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!_this.config) {\n        _this.config = yield _this.loadOpenIDConfig();\n      }\n      return _this.config.authorization_endpoint;\n    })();\n  }\n  tokenEndpoint() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this2.config) {\n        _this2.config = yield _this2.loadOpenIDConfig();\n      }\n      return _this2.config.token_endpoint;\n    })();\n  }\n  loadOpenIDConfig() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const url = `${_this3.baseURL}${OPENID_CONFIG_PATH}`;\n      return _this3.fetch(url).then(res => res.json());\n    })();\n  }\n}\nexports.Issuer = Issuer;","map":{"version":3,"names":["_asyncToGenerator","require","default","__importDefault","mod","__esModule","Object","defineProperty","exports","value","Issuer","make_fetch_happen_1","OPENID_CONFIG_PATH","constructor","baseURL","fetch","defaults","retry","authEndpoint","_this","config","loadOpenIDConfig","authorization_endpoint","tokenEndpoint","_this2","token_endpoint","_this3","url","then","res","json"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/sigstore/dist/identity/issuer.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Issuer = void 0;\n/*\nCopyright 2022 The Sigstore Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nconst make_fetch_happen_1 = __importDefault(require(\"make-fetch-happen\"));\n// Standard endpoint for retrieving OpenID configuration information\nconst OPENID_CONFIG_PATH = '/.well-known/openid-configuration';\n/**\n * The Issuer reperesents a single OAuth2 provider.\n *\n * The Issuer is configured with a provider's base OAuth2 endpoint which is\n * used to retrieve the associated configuration information.\n */\nclass Issuer {\n    constructor(baseURL) {\n        this.baseURL = baseURL;\n        this.fetch = make_fetch_happen_1.default.defaults({ retry: 2 });\n    }\n    async authEndpoint() {\n        if (!this.config) {\n            this.config = await this.loadOpenIDConfig();\n        }\n        return this.config.authorization_endpoint;\n    }\n    async tokenEndpoint() {\n        if (!this.config) {\n            this.config = await this.loadOpenIDConfig();\n        }\n        return this.config.token_endpoint;\n    }\n    async loadOpenIDConfig() {\n        const url = `${this.baseURL}${OPENID_CONFIG_PATH}`;\n        return this.fetch(url).then((res) => res.json());\n    }\n}\nexports.Issuer = Issuer;\n"],"mappings":"AAAA,YAAY;;AAAC,IAAAA,iBAAA,GAAAC,OAAA,gIAAAC,OAAA;AACb,IAAIC,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,MAAM,GAAG,KAAK,CAAC;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAGR,eAAe,CAACF,OAAO,CAAC,mBAAmB,CAAC,CAAC;AACzE;AACA,MAAMW,kBAAkB,GAAG,mCAAmC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,MAAM,CAAC;EACTG,WAAWA,CAACC,OAAO,EAAE;IACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,KAAK,GAAGJ,mBAAmB,CAACT,OAAO,CAACc,QAAQ,CAAC;MAAEC,KAAK,EAAE;IAAE,CAAC,CAAC;EACnE;EACMC,YAAYA,CAAA,EAAG;IAAA,IAAAC,KAAA;IAAA,OAAAnB,iBAAA;MACjB,IAAI,CAACmB,KAAI,CAACC,MAAM,EAAE;QACdD,KAAI,CAACC,MAAM,SAASD,KAAI,CAACE,gBAAgB,CAAC,CAAC;MAC/C;MACA,OAAOF,KAAI,CAACC,MAAM,CAACE,sBAAsB;IAAC;EAC9C;EACMC,aAAaA,CAAA,EAAG;IAAA,IAAAC,MAAA;IAAA,OAAAxB,iBAAA;MAClB,IAAI,CAACwB,MAAI,CAACJ,MAAM,EAAE;QACdI,MAAI,CAACJ,MAAM,SAASI,MAAI,CAACH,gBAAgB,CAAC,CAAC;MAC/C;MACA,OAAOG,MAAI,CAACJ,MAAM,CAACK,cAAc;IAAC;EACtC;EACMJ,gBAAgBA,CAAA,EAAG;IAAA,IAAAK,MAAA;IAAA,OAAA1B,iBAAA;MACrB,MAAM2B,GAAG,GAAI,GAAED,MAAI,CAACZ,OAAQ,GAAEF,kBAAmB,EAAC;MAClD,OAAOc,MAAI,CAACX,KAAK,CAACY,GAAG,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;IAAC;EACrD;AACJ;AACAtB,OAAO,CAACE,MAAM,GAAGA,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}