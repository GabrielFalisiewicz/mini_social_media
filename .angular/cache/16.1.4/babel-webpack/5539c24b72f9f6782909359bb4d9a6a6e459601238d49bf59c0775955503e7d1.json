{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _asyncToGenerator = require(\"C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBuilder = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst rxjs_1 = require(\"rxjs\");\nconst api_1 = require(\"./api\");\nconst internal_1 = require(\"./internal\");\nconst jobs_1 = require(\"./jobs\");\nconst schedule_by_name_1 = require(\"./schedule-by-name\");\n// eslint-disable-next-line max-lines-per-function\nfunction createBuilder(fn) {\n  const cjh = jobs_1.createJobHandler;\n  // eslint-disable-next-line max-lines-per-function\n  const handler = cjh((options, context) => {\n    const scheduler = context.scheduler;\n    const progressChannel = context.createChannel('progress');\n    const logChannel = context.createChannel('log');\n    const addTeardown = context.addTeardown.bind(context);\n    let currentState = api_1.BuilderProgressState.Stopped;\n    let current = 0;\n    let status = '';\n    let total = 1;\n    function log(entry) {\n      logChannel.next(entry);\n    }\n    function progress(progress, context) {\n      currentState = progress.state;\n      if (progress.state === api_1.BuilderProgressState.Running) {\n        current = progress.current;\n        total = progress.total !== undefined ? progress.total : total;\n        if (progress.status === undefined) {\n          progress.status = status;\n        } else {\n          status = progress.status;\n        }\n      }\n      progressChannel.next({\n        ...progress,\n        ...(context.target && {\n          target: context.target\n        }),\n        ...(context.builder && {\n          builder: context.builder\n        }),\n        id: context.id\n      });\n    }\n    return new rxjs_1.Observable(observer => {\n      const subscriptions = [];\n      const inputSubscription = context.inboundBus.subscribe(i => {\n        switch (i.kind) {\n          case jobs_1.JobInboundMessageKind.Input:\n            onInput(i.value);\n            break;\n        }\n      });\n      function onInput(i) {\n        const builder = i.info;\n        const loggerName = i.target ? (0, api_1.targetStringFromTarget)(i.target) : builder.builderName;\n        const logger = new core_1.logging.Logger(loggerName);\n        subscriptions.push(logger.subscribe(entry => log(entry)));\n        const context = {\n          builder,\n          workspaceRoot: i.workspaceRoot,\n          currentDirectory: i.currentDirectory,\n          target: i.target,\n          logger: logger,\n          id: i.id,\n          scheduleTarget(target, overrides = {}, scheduleOptions = {}) {\n            return _asyncToGenerator(function* () {\n              const run = yield (0, schedule_by_name_1.scheduleByTarget)(target, overrides, {\n                scheduler,\n                logger: scheduleOptions.logger || logger.createChild(''),\n                workspaceRoot: i.workspaceRoot,\n                currentDirectory: i.currentDirectory\n              });\n              // We don't want to subscribe errors and complete.\n              subscriptions.push(run.progress.subscribe(event => progressChannel.next(event)));\n              return run;\n            })();\n          },\n          scheduleBuilder(builderName, options = {}, scheduleOptions = {}) {\n            return _asyncToGenerator(function* () {\n              const run = yield (0, schedule_by_name_1.scheduleByName)(builderName, options, {\n                scheduler,\n                target: scheduleOptions.target,\n                logger: scheduleOptions.logger || logger.createChild(''),\n                workspaceRoot: i.workspaceRoot,\n                currentDirectory: i.currentDirectory\n              });\n              // We don't want to subscribe errors and complete.\n              subscriptions.push(run.progress.subscribe(event => progressChannel.next(event)));\n              return run;\n            })();\n          },\n          getTargetOptions(target) {\n            return _asyncToGenerator(function* () {\n              return (0, rxjs_1.firstValueFrom)(scheduler.schedule('..getTargetOptions', target).output);\n            })();\n          },\n          getProjectMetadata(target) {\n            return _asyncToGenerator(function* () {\n              return (0, rxjs_1.firstValueFrom)(scheduler.schedule('..getProjectMetadata', target).output);\n            })();\n          },\n          getBuilderNameForTarget(target) {\n            return _asyncToGenerator(function* () {\n              return (0, rxjs_1.firstValueFrom)(scheduler.schedule('..getBuilderNameForTarget', target).output);\n            })();\n          },\n          validateOptions(options, builderName) {\n            return _asyncToGenerator(function* () {\n              return (0, rxjs_1.firstValueFrom)(scheduler.schedule('..validateOptions', [builderName, options]).output);\n            })();\n          },\n          reportRunning() {\n            switch (currentState) {\n              case api_1.BuilderProgressState.Waiting:\n              case api_1.BuilderProgressState.Stopped:\n                progress({\n                  state: api_1.BuilderProgressState.Running,\n                  current: 0,\n                  total\n                }, context);\n                break;\n            }\n          },\n          reportStatus(status) {\n            switch (currentState) {\n              case api_1.BuilderProgressState.Running:\n                progress({\n                  state: currentState,\n                  status,\n                  current,\n                  total\n                }, context);\n                break;\n              case api_1.BuilderProgressState.Waiting:\n                progress({\n                  state: currentState,\n                  status\n                }, context);\n                break;\n            }\n          },\n          reportProgress(current, total, status) {\n            switch (currentState) {\n              case api_1.BuilderProgressState.Running:\n                progress({\n                  state: currentState,\n                  current,\n                  total,\n                  status\n                }, context);\n            }\n          },\n          addTeardown\n        };\n        context.reportRunning();\n        let result;\n        try {\n          result = fn(i.options, context);\n          if ((0, api_1.isBuilderOutput)(result)) {\n            result = (0, rxjs_1.of)(result);\n          } else if (!(0, rxjs_1.isObservable)(result) && isAsyncIterable(result)) {\n            result = (0, api_1.fromAsyncIterable)(result);\n          } else {\n            result = (0, rxjs_1.from)(result);\n          }\n        } catch (e) {\n          result = (0, rxjs_1.throwError)(e);\n        }\n        // Manage some state automatically.\n        progress({\n          state: api_1.BuilderProgressState.Running,\n          current: 0,\n          total: 1\n        }, context);\n        subscriptions.push(result.pipe((0, rxjs_1.defaultIfEmpty)({\n          success: false\n        }), (0, rxjs_1.tap)(() => {\n          progress({\n            state: api_1.BuilderProgressState.Running,\n            current: total\n          }, context);\n          progress({\n            state: api_1.BuilderProgressState.Stopped\n          }, context);\n        }), (0, rxjs_1.mergeMap)( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (value) {\n            // Allow the log queue to flush\n            yield new Promise(setImmediate);\n            return value;\n          });\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }())).subscribe(message => observer.next(message), error => observer.error(error), () => observer.complete()));\n      }\n      return () => {\n        subscriptions.forEach(x => x.unsubscribe());\n        inputSubscription.unsubscribe();\n      };\n    });\n  });\n  return {\n    handler,\n    [internal_1.BuilderSymbol]: true,\n    [internal_1.BuilderVersionSymbol]: require('../package.json').version\n  };\n}\nexports.createBuilder = createBuilder;\nfunction isAsyncIterable(obj) {\n  return !!obj && typeof obj[Symbol.asyncIterator] === 'function';\n}","map":{"version":3,"names":["_asyncToGenerator","require","default","Object","defineProperty","exports","value","createBuilder","core_1","rxjs_1","api_1","internal_1","jobs_1","schedule_by_name_1","fn","cjh","createJobHandler","handler","options","context","scheduler","progressChannel","createChannel","logChannel","addTeardown","bind","currentState","BuilderProgressState","Stopped","current","status","total","log","entry","next","progress","state","Running","undefined","target","builder","id","Observable","observer","subscriptions","inputSubscription","inboundBus","subscribe","i","kind","JobInboundMessageKind","Input","onInput","info","loggerName","targetStringFromTarget","builderName","logger","logging","Logger","push","workspaceRoot","currentDirectory","scheduleTarget","overrides","scheduleOptions","run","scheduleByTarget","createChild","event","scheduleBuilder","scheduleByName","getTargetOptions","firstValueFrom","schedule","output","getProjectMetadata","getBuilderNameForTarget","validateOptions","reportRunning","Waiting","reportStatus","reportProgress","result","isBuilderOutput","of","isObservable","isAsyncIterable","fromAsyncIterable","from","e","throwError","pipe","defaultIfEmpty","success","tap","mergeMap","_ref","Promise","setImmediate","_x","apply","arguments","message","error","complete","forEach","x","unsubscribe","BuilderSymbol","BuilderVersionSymbol","version","obj","Symbol","asyncIterator"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@angular-devkit/architect/src/create-builder.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createBuilder = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst rxjs_1 = require(\"rxjs\");\nconst api_1 = require(\"./api\");\nconst internal_1 = require(\"./internal\");\nconst jobs_1 = require(\"./jobs\");\nconst schedule_by_name_1 = require(\"./schedule-by-name\");\n// eslint-disable-next-line max-lines-per-function\nfunction createBuilder(fn) {\n    const cjh = jobs_1.createJobHandler;\n    // eslint-disable-next-line max-lines-per-function\n    const handler = cjh((options, context) => {\n        const scheduler = context.scheduler;\n        const progressChannel = context.createChannel('progress');\n        const logChannel = context.createChannel('log');\n        const addTeardown = context.addTeardown.bind(context);\n        let currentState = api_1.BuilderProgressState.Stopped;\n        let current = 0;\n        let status = '';\n        let total = 1;\n        function log(entry) {\n            logChannel.next(entry);\n        }\n        function progress(progress, context) {\n            currentState = progress.state;\n            if (progress.state === api_1.BuilderProgressState.Running) {\n                current = progress.current;\n                total = progress.total !== undefined ? progress.total : total;\n                if (progress.status === undefined) {\n                    progress.status = status;\n                }\n                else {\n                    status = progress.status;\n                }\n            }\n            progressChannel.next({\n                ...progress,\n                ...(context.target && { target: context.target }),\n                ...(context.builder && { builder: context.builder }),\n                id: context.id,\n            });\n        }\n        return new rxjs_1.Observable((observer) => {\n            const subscriptions = [];\n            const inputSubscription = context.inboundBus.subscribe((i) => {\n                switch (i.kind) {\n                    case jobs_1.JobInboundMessageKind.Input:\n                        onInput(i.value);\n                        break;\n                }\n            });\n            function onInput(i) {\n                const builder = i.info;\n                const loggerName = i.target\n                    ? (0, api_1.targetStringFromTarget)(i.target)\n                    : builder.builderName;\n                const logger = new core_1.logging.Logger(loggerName);\n                subscriptions.push(logger.subscribe((entry) => log(entry)));\n                const context = {\n                    builder,\n                    workspaceRoot: i.workspaceRoot,\n                    currentDirectory: i.currentDirectory,\n                    target: i.target,\n                    logger: logger,\n                    id: i.id,\n                    async scheduleTarget(target, overrides = {}, scheduleOptions = {}) {\n                        const run = await (0, schedule_by_name_1.scheduleByTarget)(target, overrides, {\n                            scheduler,\n                            logger: scheduleOptions.logger || logger.createChild(''),\n                            workspaceRoot: i.workspaceRoot,\n                            currentDirectory: i.currentDirectory,\n                        });\n                        // We don't want to subscribe errors and complete.\n                        subscriptions.push(run.progress.subscribe((event) => progressChannel.next(event)));\n                        return run;\n                    },\n                    async scheduleBuilder(builderName, options = {}, scheduleOptions = {}) {\n                        const run = await (0, schedule_by_name_1.scheduleByName)(builderName, options, {\n                            scheduler,\n                            target: scheduleOptions.target,\n                            logger: scheduleOptions.logger || logger.createChild(''),\n                            workspaceRoot: i.workspaceRoot,\n                            currentDirectory: i.currentDirectory,\n                        });\n                        // We don't want to subscribe errors and complete.\n                        subscriptions.push(run.progress.subscribe((event) => progressChannel.next(event)));\n                        return run;\n                    },\n                    async getTargetOptions(target) {\n                        return (0, rxjs_1.firstValueFrom)(scheduler.schedule('..getTargetOptions', target).output);\n                    },\n                    async getProjectMetadata(target) {\n                        return (0, rxjs_1.firstValueFrom)(scheduler.schedule('..getProjectMetadata', target).output);\n                    },\n                    async getBuilderNameForTarget(target) {\n                        return (0, rxjs_1.firstValueFrom)(scheduler.schedule('..getBuilderNameForTarget', target).output);\n                    },\n                    async validateOptions(options, builderName) {\n                        return (0, rxjs_1.firstValueFrom)(scheduler.schedule('..validateOptions', [builderName, options]).output);\n                    },\n                    reportRunning() {\n                        switch (currentState) {\n                            case api_1.BuilderProgressState.Waiting:\n                            case api_1.BuilderProgressState.Stopped:\n                                progress({ state: api_1.BuilderProgressState.Running, current: 0, total }, context);\n                                break;\n                        }\n                    },\n                    reportStatus(status) {\n                        switch (currentState) {\n                            case api_1.BuilderProgressState.Running:\n                                progress({ state: currentState, status, current, total }, context);\n                                break;\n                            case api_1.BuilderProgressState.Waiting:\n                                progress({ state: currentState, status }, context);\n                                break;\n                        }\n                    },\n                    reportProgress(current, total, status) {\n                        switch (currentState) {\n                            case api_1.BuilderProgressState.Running:\n                                progress({ state: currentState, current, total, status }, context);\n                        }\n                    },\n                    addTeardown,\n                };\n                context.reportRunning();\n                let result;\n                try {\n                    result = fn(i.options, context);\n                    if ((0, api_1.isBuilderOutput)(result)) {\n                        result = (0, rxjs_1.of)(result);\n                    }\n                    else if (!(0, rxjs_1.isObservable)(result) && isAsyncIterable(result)) {\n                        result = (0, api_1.fromAsyncIterable)(result);\n                    }\n                    else {\n                        result = (0, rxjs_1.from)(result);\n                    }\n                }\n                catch (e) {\n                    result = (0, rxjs_1.throwError)(e);\n                }\n                // Manage some state automatically.\n                progress({ state: api_1.BuilderProgressState.Running, current: 0, total: 1 }, context);\n                subscriptions.push(result\n                    .pipe((0, rxjs_1.defaultIfEmpty)({ success: false }), (0, rxjs_1.tap)(() => {\n                    progress({ state: api_1.BuilderProgressState.Running, current: total }, context);\n                    progress({ state: api_1.BuilderProgressState.Stopped }, context);\n                }), (0, rxjs_1.mergeMap)(async (value) => {\n                    // Allow the log queue to flush\n                    await new Promise(setImmediate);\n                    return value;\n                }))\n                    .subscribe((message) => observer.next(message), (error) => observer.error(error), () => observer.complete()));\n            }\n            return () => {\n                subscriptions.forEach((x) => x.unsubscribe());\n                inputSubscription.unsubscribe();\n            };\n        });\n    });\n    return {\n        handler,\n        [internal_1.BuilderSymbol]: true,\n        [internal_1.BuilderVersionSymbol]: require('../package.json').version,\n    };\n}\nexports.createBuilder = createBuilder;\nfunction isAsyncIterable(obj) {\n    return !!obj && typeof obj[Symbol.asyncIterator] === 'function';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}