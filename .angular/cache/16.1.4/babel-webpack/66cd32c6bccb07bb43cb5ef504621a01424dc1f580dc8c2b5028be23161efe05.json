{"ast":null,"code":"'use strict';\n\nvar _classPrivateMethodInitSpec = require(\"C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@babel/runtime/helpers/classPrivateMethodInitSpec.js\").default;\nvar _classPrivateMethodGet = require(\"C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@babel/runtime/helpers/classPrivateMethodGet.js\").default;\nvar _classStaticPrivateFieldSpecGet = require(\"C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@babel/runtime/helpers/classStaticPrivateFieldSpecGet.js\").default;\nconst LRU = require('lru-cache');\nconst hosts = require('./hosts.js');\nconst fromUrl = require('./from-url.js');\nconst parseUrl = require('./parse-url.js');\nconst cache = new LRU({\n  max: 1000\n});\nvar _fill = /*#__PURE__*/new WeakSet();\nclass GitHost {\n  constructor(type, user, auth, project, committish, defaultRepresentation, _opts = {}) {\n    _classPrivateMethodInitSpec(this, _fill);\n    Object.assign(this, _classStaticPrivateFieldSpecGet(GitHost, GitHost, _gitHosts)[type], {\n      type,\n      user,\n      auth,\n      project,\n      committish,\n      default: defaultRepresentation,\n      opts: _opts\n    });\n  }\n  static addHost(name, host) {\n    _classStaticPrivateFieldSpecGet(GitHost, GitHost, _gitHosts)[name] = host;\n    _classStaticPrivateFieldSpecGet(GitHost, GitHost, _gitHosts).byDomain[host.domain] = name;\n    _classStaticPrivateFieldSpecGet(GitHost, GitHost, _gitHosts).byShortcut[`${name}:`] = name;\n    _classStaticPrivateFieldSpecGet(GitHost, GitHost, _protocols)[`${name}:`] = {\n      name\n    };\n  }\n  static fromUrl(giturl, opts) {\n    if (typeof giturl !== 'string') {\n      return;\n    }\n    const key = giturl + JSON.stringify(opts || {});\n    if (!cache.has(key)) {\n      const hostArgs = fromUrl(giturl, opts, {\n        gitHosts: _classStaticPrivateFieldSpecGet(GitHost, GitHost, _gitHosts),\n        protocols: _classStaticPrivateFieldSpecGet(GitHost, GitHost, _protocols)\n      });\n      cache.set(key, hostArgs ? new GitHost(...hostArgs) : undefined);\n    }\n    return cache.get(key);\n  }\n  static parseUrl(url) {\n    return parseUrl(url);\n  }\n  hash() {\n    return this.committish ? `#${this.committish}` : '';\n  }\n  ssh(opts) {\n    return _classPrivateMethodGet(this, _fill, _fill2).call(this, this.sshtemplate, opts);\n  }\n  sshurl(opts) {\n    return _classPrivateMethodGet(this, _fill, _fill2).call(this, this.sshurltemplate, opts);\n  }\n  browse(path, ...args) {\n    // not a string, treat path as opts\n    if (typeof path !== 'string') {\n      return _classPrivateMethodGet(this, _fill, _fill2).call(this, this.browsetemplate, path);\n    }\n    if (typeof args[0] !== 'string') {\n      return _classPrivateMethodGet(this, _fill, _fill2).call(this, this.browsetreetemplate, {\n        ...args[0],\n        path\n      });\n    }\n    return _classPrivateMethodGet(this, _fill, _fill2).call(this, this.browsetreetemplate, {\n      ...args[1],\n      fragment: args[0],\n      path\n    });\n  }\n\n  // If the path is known to be a file, then browseFile should be used. For some hosts\n  // the url is the same as browse, but for others like GitHub a file can use both `/tree/`\n  // and `/blob/` in the path. When using a default committish of `HEAD` then the `/tree/`\n  // path will redirect to a specific commit. Using the `/blob/` path avoids this and\n  // does not redirect to a different commit.\n  browseFile(path, ...args) {\n    if (typeof args[0] !== 'string') {\n      return _classPrivateMethodGet(this, _fill, _fill2).call(this, this.browseblobtemplate, {\n        ...args[0],\n        path\n      });\n    }\n    return _classPrivateMethodGet(this, _fill, _fill2).call(this, this.browseblobtemplate, {\n      ...args[1],\n      fragment: args[0],\n      path\n    });\n  }\n  docs(opts) {\n    return _classPrivateMethodGet(this, _fill, _fill2).call(this, this.docstemplate, opts);\n  }\n  bugs(opts) {\n    return _classPrivateMethodGet(this, _fill, _fill2).call(this, this.bugstemplate, opts);\n  }\n  https(opts) {\n    return _classPrivateMethodGet(this, _fill, _fill2).call(this, this.httpstemplate, opts);\n  }\n  git(opts) {\n    return _classPrivateMethodGet(this, _fill, _fill2).call(this, this.gittemplate, opts);\n  }\n  shortcut(opts) {\n    return _classPrivateMethodGet(this, _fill, _fill2).call(this, this.shortcuttemplate, opts);\n  }\n  path(opts) {\n    return _classPrivateMethodGet(this, _fill, _fill2).call(this, this.pathtemplate, opts);\n  }\n  tarball(opts) {\n    return _classPrivateMethodGet(this, _fill, _fill2).call(this, this.tarballtemplate, {\n      ...opts,\n      noCommittish: false\n    });\n  }\n  file(path, opts) {\n    return _classPrivateMethodGet(this, _fill, _fill2).call(this, this.filetemplate, {\n      ...opts,\n      path\n    });\n  }\n  edit(path, opts) {\n    return _classPrivateMethodGet(this, _fill, _fill2).call(this, this.edittemplate, {\n      ...opts,\n      path\n    });\n  }\n  getDefaultRepresentation() {\n    return this.default;\n  }\n  toString(opts) {\n    if (this.default && typeof this[this.default] === 'function') {\n      return this[this.default](opts);\n    }\n    return this.sshurl(opts);\n  }\n}\nfunction _fill2(template, opts) {\n  if (typeof template !== 'function') {\n    return null;\n  }\n  const options = {\n    ...this,\n    ...this.opts,\n    ...opts\n  };\n\n  // the path should always be set so we don't end up with 'undefined' in urls\n  if (!options.path) {\n    options.path = '';\n  }\n\n  // template functions will insert the leading slash themselves\n  if (options.path.startsWith('/')) {\n    options.path = options.path.slice(1);\n  }\n  if (options.noCommittish) {\n    options.committish = null;\n  }\n  const result = template(options);\n  return options.noGitPlus && result.startsWith('git+') ? result.slice(4) : result;\n}\nvar _gitHosts = {\n  writable: true,\n  value: {\n    byShortcut: {},\n    byDomain: {}\n  }\n};\nvar _protocols = {\n  writable: true,\n  value: {\n    'git+ssh:': {\n      name: 'sshurl'\n    },\n    'ssh:': {\n      name: 'sshurl'\n    },\n    'git+https:': {\n      name: 'https',\n      auth: true\n    },\n    'git:': {\n      auth: true\n    },\n    'http:': {\n      auth: true\n    },\n    'https:': {\n      auth: true\n    },\n    'git+http:': {\n      auth: true\n    }\n  }\n};\nfor (const [name, host] of Object.entries(hosts)) {\n  GitHost.addHost(name, host);\n}\nmodule.exports = GitHost;","map":{"version":3,"names":["_classPrivateMethodInitSpec","require","default","_classPrivateMethodGet","_classStaticPrivateFieldSpecGet","LRU","hosts","fromUrl","parseUrl","cache","max","_fill","WeakSet","GitHost","constructor","type","user","auth","project","committish","defaultRepresentation","opts","Object","assign","_gitHosts","addHost","name","host","byDomain","domain","byShortcut","_protocols","giturl","key","JSON","stringify","has","hostArgs","gitHosts","protocols","set","undefined","get","url","hash","ssh","_fill2","call","sshtemplate","sshurl","sshurltemplate","browse","path","args","browsetemplate","browsetreetemplate","fragment","browseFile","browseblobtemplate","docs","docstemplate","bugs","bugstemplate","https","httpstemplate","git","gittemplate","shortcut","shortcuttemplate","pathtemplate","tarball","tarballtemplate","noCommittish","file","filetemplate","edit","edittemplate","getDefaultRepresentation","toString","template","options","startsWith","slice","result","noGitPlus","writable","value","entries","module","exports"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/hosted-git-info/lib/index.js"],"sourcesContent":["'use strict'\n\nconst LRU = require('lru-cache')\nconst hosts = require('./hosts.js')\nconst fromUrl = require('./from-url.js')\nconst parseUrl = require('./parse-url.js')\n\nconst cache = new LRU({ max: 1000 })\n\nclass GitHost {\n  constructor (type, user, auth, project, committish, defaultRepresentation, opts = {}) {\n    Object.assign(this, GitHost.#gitHosts[type], {\n      type,\n      user,\n      auth,\n      project,\n      committish,\n      default: defaultRepresentation,\n      opts,\n    })\n  }\n\n  static #gitHosts = { byShortcut: {}, byDomain: {} }\n  static #protocols = {\n    'git+ssh:': { name: 'sshurl' },\n    'ssh:': { name: 'sshurl' },\n    'git+https:': { name: 'https', auth: true },\n    'git:': { auth: true },\n    'http:': { auth: true },\n    'https:': { auth: true },\n    'git+http:': { auth: true },\n  }\n\n  static addHost (name, host) {\n    GitHost.#gitHosts[name] = host\n    GitHost.#gitHosts.byDomain[host.domain] = name\n    GitHost.#gitHosts.byShortcut[`${name}:`] = name\n    GitHost.#protocols[`${name}:`] = { name }\n  }\n\n  static fromUrl (giturl, opts) {\n    if (typeof giturl !== 'string') {\n      return\n    }\n\n    const key = giturl + JSON.stringify(opts || {})\n\n    if (!cache.has(key)) {\n      const hostArgs = fromUrl(giturl, opts, {\n        gitHosts: GitHost.#gitHosts,\n        protocols: GitHost.#protocols,\n      })\n      cache.set(key, hostArgs ? new GitHost(...hostArgs) : undefined)\n    }\n\n    return cache.get(key)\n  }\n\n  static parseUrl (url) {\n    return parseUrl(url)\n  }\n\n  #fill (template, opts) {\n    if (typeof template !== 'function') {\n      return null\n    }\n\n    const options = { ...this, ...this.opts, ...opts }\n\n    // the path should always be set so we don't end up with 'undefined' in urls\n    if (!options.path) {\n      options.path = ''\n    }\n\n    // template functions will insert the leading slash themselves\n    if (options.path.startsWith('/')) {\n      options.path = options.path.slice(1)\n    }\n\n    if (options.noCommittish) {\n      options.committish = null\n    }\n\n    const result = template(options)\n    return options.noGitPlus && result.startsWith('git+') ? result.slice(4) : result\n  }\n\n  hash () {\n    return this.committish ? `#${this.committish}` : ''\n  }\n\n  ssh (opts) {\n    return this.#fill(this.sshtemplate, opts)\n  }\n\n  sshurl (opts) {\n    return this.#fill(this.sshurltemplate, opts)\n  }\n\n  browse (path, ...args) {\n    // not a string, treat path as opts\n    if (typeof path !== 'string') {\n      return this.#fill(this.browsetemplate, path)\n    }\n\n    if (typeof args[0] !== 'string') {\n      return this.#fill(this.browsetreetemplate, { ...args[0], path })\n    }\n\n    return this.#fill(this.browsetreetemplate, { ...args[1], fragment: args[0], path })\n  }\n\n  // If the path is known to be a file, then browseFile should be used. For some hosts\n  // the url is the same as browse, but for others like GitHub a file can use both `/tree/`\n  // and `/blob/` in the path. When using a default committish of `HEAD` then the `/tree/`\n  // path will redirect to a specific commit. Using the `/blob/` path avoids this and\n  // does not redirect to a different commit.\n  browseFile (path, ...args) {\n    if (typeof args[0] !== 'string') {\n      return this.#fill(this.browseblobtemplate, { ...args[0], path })\n    }\n\n    return this.#fill(this.browseblobtemplate, { ...args[1], fragment: args[0], path })\n  }\n\n  docs (opts) {\n    return this.#fill(this.docstemplate, opts)\n  }\n\n  bugs (opts) {\n    return this.#fill(this.bugstemplate, opts)\n  }\n\n  https (opts) {\n    return this.#fill(this.httpstemplate, opts)\n  }\n\n  git (opts) {\n    return this.#fill(this.gittemplate, opts)\n  }\n\n  shortcut (opts) {\n    return this.#fill(this.shortcuttemplate, opts)\n  }\n\n  path (opts) {\n    return this.#fill(this.pathtemplate, opts)\n  }\n\n  tarball (opts) {\n    return this.#fill(this.tarballtemplate, { ...opts, noCommittish: false })\n  }\n\n  file (path, opts) {\n    return this.#fill(this.filetemplate, { ...opts, path })\n  }\n\n  edit (path, opts) {\n    return this.#fill(this.edittemplate, { ...opts, path })\n  }\n\n  getDefaultRepresentation () {\n    return this.default\n  }\n\n  toString (opts) {\n    if (this.default && typeof this[this.default] === 'function') {\n      return this[this.default](opts)\n    }\n\n    return this.sshurl(opts)\n  }\n}\n\nfor (const [name, host] of Object.entries(hosts)) {\n  GitHost.addHost(name, host)\n}\n\nmodule.exports = GitHost\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}