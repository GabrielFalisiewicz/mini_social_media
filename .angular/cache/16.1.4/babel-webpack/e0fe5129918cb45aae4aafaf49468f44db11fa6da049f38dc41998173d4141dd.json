{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.verifyTLogBody = void 0;\n/*\nCopyright 2023 The Sigstore Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nconst error_1 = require(\"../../error\");\nconst util_1 = require(\"../../util\");\nconst TLOG_MISMATCH_ERROR_MSG = 'bundle content and tlog entry do not match';\n// Compare the given tlog entry to the given bundle\nfunction verifyTLogBody(entry, bundleContent) {\n  const {\n    kind,\n    version\n  } = entry.kindVersion;\n  const body = JSON.parse(entry.canonicalizedBody.toString('utf8'));\n  try {\n    if (kind !== body.kind || version !== body.apiVersion) {\n      throw new error_1.VerificationError(TLOG_MISMATCH_ERROR_MSG);\n    }\n    switch (body.kind) {\n      case 'dsse':\n        verifyDSSETLogBody(body, bundleContent);\n        break;\n      case 'intoto':\n        verifyIntotoTLogBody(body, bundleContent);\n        break;\n      case 'hashedrekord':\n        verifyHashedRekordTLogBody(body, bundleContent);\n        break;\n      default:\n        throw new error_1.VerificationError(`unsupported kind in tlog entry: ${kind}`);\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nexports.verifyTLogBody = verifyTLogBody;\n// Compare the given intoto tlog entry to the given bundle\nfunction verifyDSSETLogBody(tlogEntry, content) {\n  if (content?.$case !== 'dsseEnvelope') {\n    throw new error_1.VerificationError(`unsupported bundle content: ${content?.$case || 'unknown'}`);\n  }\n  const dsse = content.dsseEnvelope;\n  switch (tlogEntry.apiVersion) {\n    case '0.0.1':\n      verifyDSSE001TLogBody(tlogEntry, dsse);\n      break;\n    default:\n      throw new error_1.VerificationError(`unsupported dsse version: ${tlogEntry.apiVersion}`);\n  }\n}\n// Compare the given intoto tlog entry to the given bundle\nfunction verifyIntotoTLogBody(tlogEntry, content) {\n  if (content?.$case !== 'dsseEnvelope') {\n    throw new error_1.VerificationError(`unsupported bundle content: ${content?.$case || 'unknown'}`);\n  }\n  const dsse = content.dsseEnvelope;\n  switch (tlogEntry.apiVersion) {\n    case '0.0.2':\n      verifyIntoto002TLogBody(tlogEntry, dsse);\n      break;\n    default:\n      throw new error_1.VerificationError(`unsupported intoto version: ${tlogEntry.apiVersion}`);\n  }\n}\n// Compare the given hashedrekord tlog entry to the given bundle\nfunction verifyHashedRekordTLogBody(tlogEntry, content) {\n  if (content?.$case !== 'messageSignature') {\n    throw new error_1.VerificationError(`unsupported bundle content: ${content?.$case || 'unknown'}`);\n  }\n  const messageSignature = content.messageSignature;\n  switch (tlogEntry.apiVersion) {\n    case '0.0.1':\n      verifyHashedrekor001TLogBody(tlogEntry, messageSignature);\n      break;\n    default:\n      throw new error_1.VerificationError(`unsupported hashedrekord version: ${tlogEntry.apiVersion}`);\n  }\n}\n// Compare the given dsse v0.0.1 tlog entry to the given DSSE envelope.\nfunction verifyDSSE001TLogBody(tlogEntry, dsse) {\n  // Collect all of the signatures from the DSSE envelope\n  // Turns them into base64-encoded strings for comparison\n  const dsseSigs = dsse.signatures.map(signature => signature.sig.toString('base64'));\n  // Collect all of the signatures from the tlog entry\n  const tlogSigs = tlogEntry.spec.signatures?.map(signature => signature.signature);\n  // Ensure the bundle's DSSE and the tlog entry contain the same number of signatures\n  if (dsseSigs.length !== tlogSigs?.length) {\n    throw new error_1.VerificationError(TLOG_MISMATCH_ERROR_MSG);\n  }\n  // Ensure that every signature in the bundle's DSSE is present in the tlog entry\n  if (!dsseSigs.every(dsseSig => tlogSigs.includes(dsseSig))) {\n    throw new error_1.VerificationError(TLOG_MISMATCH_ERROR_MSG);\n  }\n  // Ensure the digest of the bundle's DSSE payload matches the digest in the\n  // tlog entry\n  const dssePayloadHash = util_1.crypto.hash(dsse.payload).toString('hex');\n  if (dssePayloadHash !== tlogEntry.spec.payloadHash?.value) {\n    throw new error_1.VerificationError(TLOG_MISMATCH_ERROR_MSG);\n  }\n}\n// Compare the given intoto v0.0.2 tlog entry to the given DSSE envelope.\nfunction verifyIntoto002TLogBody(tlogEntry, dsse) {\n  // Collect all of the signatures from the DSSE envelope\n  // Turns them into base64-encoded strings for comparison\n  const dsseSigs = dsse.signatures.map(signature => signature.sig.toString('base64'));\n  // Collect all of the signatures from the tlog entry\n  // Remember that tlog signastures are double base64-encoded\n  const tlogSigs = tlogEntry.spec.content.envelope?.signatures.map(signature => signature.sig ? util_1.encoding.base64Decode(signature.sig) : '');\n  // Ensure the bundle's DSSE and the tlog entry contain the same number of signatures\n  if (dsseSigs.length !== tlogSigs?.length) {\n    throw new error_1.VerificationError(TLOG_MISMATCH_ERROR_MSG);\n  }\n  // Ensure that every signature in the bundle's DSSE is present in the tlog entry\n  if (!dsseSigs.every(dsseSig => tlogSigs.includes(dsseSig))) {\n    throw new error_1.VerificationError(TLOG_MISMATCH_ERROR_MSG);\n  }\n  // Ensure the digest of the bundle's DSSE payload matches the digest in the\n  // tlog entry\n  const dssePayloadHash = util_1.crypto.hash(dsse.payload).toString('hex');\n  if (dssePayloadHash !== tlogEntry.spec.content.payloadHash?.value) {\n    throw new error_1.VerificationError(TLOG_MISMATCH_ERROR_MSG);\n  }\n}\n// Compare the given hashedrekord v0.0.1 tlog entry to the given message\n// signature\nfunction verifyHashedrekor001TLogBody(tlogEntry, messageSignature) {\n  // Ensure that the bundles message signature matches the tlog entry\n  const msgSig = messageSignature.signature.toString('base64');\n  const tlogSig = tlogEntry.spec.signature.content;\n  if (msgSig !== tlogSig) {\n    throw new error_1.VerificationError(TLOG_MISMATCH_ERROR_MSG);\n  }\n  // Ensure that the bundle's message digest matches the tlog entry\n  const msgDigest = messageSignature.messageDigest?.digest.toString('hex');\n  const tlogDigest = tlogEntry.spec.data.hash?.value;\n  if (msgDigest !== tlogDigest) {\n    throw new error_1.VerificationError(TLOG_MISMATCH_ERROR_MSG);\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","verifyTLogBody","error_1","require","util_1","TLOG_MISMATCH_ERROR_MSG","entry","bundleContent","kind","version","kindVersion","body","JSON","parse","canonicalizedBody","toString","apiVersion","VerificationError","verifyDSSETLogBody","verifyIntotoTLogBody","verifyHashedRekordTLogBody","e","tlogEntry","content","$case","dsse","dsseEnvelope","verifyDSSE001TLogBody","verifyIntoto002TLogBody","messageSignature","verifyHashedrekor001TLogBody","dsseSigs","signatures","map","signature","sig","tlogSigs","spec","length","every","dsseSig","includes","dssePayloadHash","crypto","hash","payload","payloadHash","envelope","encoding","base64Decode","msgSig","tlogSig","msgDigest","messageDigest","digest","tlogDigest","data"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/sigstore/dist/tlog/verify/body.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.verifyTLogBody = void 0;\n/*\nCopyright 2023 The Sigstore Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nconst error_1 = require(\"../../error\");\nconst util_1 = require(\"../../util\");\nconst TLOG_MISMATCH_ERROR_MSG = 'bundle content and tlog entry do not match';\n// Compare the given tlog entry to the given bundle\nfunction verifyTLogBody(entry, bundleContent) {\n    const { kind, version } = entry.kindVersion;\n    const body = JSON.parse(entry.canonicalizedBody.toString('utf8'));\n    try {\n        if (kind !== body.kind || version !== body.apiVersion) {\n            throw new error_1.VerificationError(TLOG_MISMATCH_ERROR_MSG);\n        }\n        switch (body.kind) {\n            case 'dsse':\n                verifyDSSETLogBody(body, bundleContent);\n                break;\n            case 'intoto':\n                verifyIntotoTLogBody(body, bundleContent);\n                break;\n            case 'hashedrekord':\n                verifyHashedRekordTLogBody(body, bundleContent);\n                break;\n            default:\n                throw new error_1.VerificationError(`unsupported kind in tlog entry: ${kind}`);\n        }\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n}\nexports.verifyTLogBody = verifyTLogBody;\n// Compare the given intoto tlog entry to the given bundle\nfunction verifyDSSETLogBody(tlogEntry, content) {\n    if (content?.$case !== 'dsseEnvelope') {\n        throw new error_1.VerificationError(`unsupported bundle content: ${content?.$case || 'unknown'}`);\n    }\n    const dsse = content.dsseEnvelope;\n    switch (tlogEntry.apiVersion) {\n        case '0.0.1':\n            verifyDSSE001TLogBody(tlogEntry, dsse);\n            break;\n        default:\n            throw new error_1.VerificationError(`unsupported dsse version: ${tlogEntry.apiVersion}`);\n    }\n}\n// Compare the given intoto tlog entry to the given bundle\nfunction verifyIntotoTLogBody(tlogEntry, content) {\n    if (content?.$case !== 'dsseEnvelope') {\n        throw new error_1.VerificationError(`unsupported bundle content: ${content?.$case || 'unknown'}`);\n    }\n    const dsse = content.dsseEnvelope;\n    switch (tlogEntry.apiVersion) {\n        case '0.0.2':\n            verifyIntoto002TLogBody(tlogEntry, dsse);\n            break;\n        default:\n            throw new error_1.VerificationError(`unsupported intoto version: ${tlogEntry.apiVersion}`);\n    }\n}\n// Compare the given hashedrekord tlog entry to the given bundle\nfunction verifyHashedRekordTLogBody(tlogEntry, content) {\n    if (content?.$case !== 'messageSignature') {\n        throw new error_1.VerificationError(`unsupported bundle content: ${content?.$case || 'unknown'}`);\n    }\n    const messageSignature = content.messageSignature;\n    switch (tlogEntry.apiVersion) {\n        case '0.0.1':\n            verifyHashedrekor001TLogBody(tlogEntry, messageSignature);\n            break;\n        default:\n            throw new error_1.VerificationError(`unsupported hashedrekord version: ${tlogEntry.apiVersion}`);\n    }\n}\n// Compare the given dsse v0.0.1 tlog entry to the given DSSE envelope.\nfunction verifyDSSE001TLogBody(tlogEntry, dsse) {\n    // Collect all of the signatures from the DSSE envelope\n    // Turns them into base64-encoded strings for comparison\n    const dsseSigs = dsse.signatures.map((signature) => signature.sig.toString('base64'));\n    // Collect all of the signatures from the tlog entry\n    const tlogSigs = tlogEntry.spec.signatures?.map((signature) => signature.signature);\n    // Ensure the bundle's DSSE and the tlog entry contain the same number of signatures\n    if (dsseSigs.length !== tlogSigs?.length) {\n        throw new error_1.VerificationError(TLOG_MISMATCH_ERROR_MSG);\n    }\n    // Ensure that every signature in the bundle's DSSE is present in the tlog entry\n    if (!dsseSigs.every((dsseSig) => tlogSigs.includes(dsseSig))) {\n        throw new error_1.VerificationError(TLOG_MISMATCH_ERROR_MSG);\n    }\n    // Ensure the digest of the bundle's DSSE payload matches the digest in the\n    // tlog entry\n    const dssePayloadHash = util_1.crypto.hash(dsse.payload).toString('hex');\n    if (dssePayloadHash !== tlogEntry.spec.payloadHash?.value) {\n        throw new error_1.VerificationError(TLOG_MISMATCH_ERROR_MSG);\n    }\n}\n// Compare the given intoto v0.0.2 tlog entry to the given DSSE envelope.\nfunction verifyIntoto002TLogBody(tlogEntry, dsse) {\n    // Collect all of the signatures from the DSSE envelope\n    // Turns them into base64-encoded strings for comparison\n    const dsseSigs = dsse.signatures.map((signature) => signature.sig.toString('base64'));\n    // Collect all of the signatures from the tlog entry\n    // Remember that tlog signastures are double base64-encoded\n    const tlogSigs = tlogEntry.spec.content.envelope?.signatures.map((signature) => (signature.sig ? util_1.encoding.base64Decode(signature.sig) : ''));\n    // Ensure the bundle's DSSE and the tlog entry contain the same number of signatures\n    if (dsseSigs.length !== tlogSigs?.length) {\n        throw new error_1.VerificationError(TLOG_MISMATCH_ERROR_MSG);\n    }\n    // Ensure that every signature in the bundle's DSSE is present in the tlog entry\n    if (!dsseSigs.every((dsseSig) => tlogSigs.includes(dsseSig))) {\n        throw new error_1.VerificationError(TLOG_MISMATCH_ERROR_MSG);\n    }\n    // Ensure the digest of the bundle's DSSE payload matches the digest in the\n    // tlog entry\n    const dssePayloadHash = util_1.crypto.hash(dsse.payload).toString('hex');\n    if (dssePayloadHash !== tlogEntry.spec.content.payloadHash?.value) {\n        throw new error_1.VerificationError(TLOG_MISMATCH_ERROR_MSG);\n    }\n}\n// Compare the given hashedrekord v0.0.1 tlog entry to the given message\n// signature\nfunction verifyHashedrekor001TLogBody(tlogEntry, messageSignature) {\n    // Ensure that the bundles message signature matches the tlog entry\n    const msgSig = messageSignature.signature.toString('base64');\n    const tlogSig = tlogEntry.spec.signature.content;\n    if (msgSig !== tlogSig) {\n        throw new error_1.VerificationError(TLOG_MISMATCH_ERROR_MSG);\n    }\n    // Ensure that the bundle's message digest matches the tlog entry\n    const msgDigest = messageSignature.messageDigest?.digest.toString('hex');\n    const tlogDigest = tlogEntry.spec.data.hash?.value;\n    if (msgDigest !== tlogDigest) {\n        throw new error_1.VerificationError(TLOG_MISMATCH_ERROR_MSG);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}