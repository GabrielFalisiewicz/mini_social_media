{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeWorkflow = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst node_1 = require(\"@angular-devkit/core/node\");\nconst schematics_1 = require(\"@angular-devkit/schematics\");\nconst node_2 = require(\"../../tasks/node\");\nconst node_module_engine_host_1 = require(\"../node-module-engine-host\");\nconst schema_option_transform_1 = require(\"../schema-option-transform\");\n/**\n * A workflow specifically for Node tools.\n */\nclass NodeWorkflow extends schematics_1.workflow.BaseWorkflow {\n  constructor(hostOrRoot, options) {\n    let host;\n    let root;\n    if (typeof hostOrRoot === 'string') {\n      root = (0, core_1.normalize)(hostOrRoot);\n      host = new core_1.virtualFs.ScopedHost(new node_1.NodeJsSyncHost(), root);\n    } else {\n      host = hostOrRoot;\n      root = options.root;\n    }\n    const engineHost = options.engineHostCreator?.(options) || new node_module_engine_host_1.NodeModulesEngineHost(options.resolvePaths);\n    super({\n      host,\n      engineHost,\n      force: options.force,\n      dryRun: options.dryRun,\n      registry: options.registry\n    });\n    engineHost.registerTaskExecutor(node_2.BuiltinTaskExecutor.NodePackage, {\n      allowPackageManagerOverride: true,\n      packageManager: options.packageManager,\n      force: options.packageManagerForce,\n      rootDirectory: root && (0, core_1.getSystemPath)(root),\n      registry: options.packageRegistry\n    });\n    engineHost.registerTaskExecutor(node_2.BuiltinTaskExecutor.RepositoryInitializer, {\n      rootDirectory: root && (0, core_1.getSystemPath)(root)\n    });\n    engineHost.registerTaskExecutor(node_2.BuiltinTaskExecutor.RunSchematic);\n    if (options.optionTransforms) {\n      for (const transform of options.optionTransforms) {\n        engineHost.registerOptionsTransform(transform);\n      }\n    }\n    if (options.schemaValidation) {\n      engineHost.registerOptionsTransform((0, schema_option_transform_1.validateOptionsWithSchema)(this.registry));\n    }\n    this._context = [];\n  }\n  get engine() {\n    return this._engine;\n  }\n  get engineHost() {\n    return this._engineHost;\n  }\n}\nexports.NodeWorkflow = NodeWorkflow;","map":{"version":3,"names":["Object","defineProperty","exports","value","NodeWorkflow","core_1","require","node_1","schematics_1","node_2","node_module_engine_host_1","schema_option_transform_1","workflow","BaseWorkflow","constructor","hostOrRoot","options","host","root","normalize","virtualFs","ScopedHost","NodeJsSyncHost","engineHost","engineHostCreator","NodeModulesEngineHost","resolvePaths","force","dryRun","registry","registerTaskExecutor","BuiltinTaskExecutor","NodePackage","allowPackageManagerOverride","packageManager","packageManagerForce","rootDirectory","getSystemPath","packageRegistry","RepositoryInitializer","RunSchematic","optionTransforms","transform","registerOptionsTransform","schemaValidation","validateOptionsWithSchema","_context","engine","_engine","_engineHost"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@angular-devkit/schematics/tools/workflow/node-workflow.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeWorkflow = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst node_1 = require(\"@angular-devkit/core/node\");\nconst schematics_1 = require(\"@angular-devkit/schematics\");\nconst node_2 = require(\"../../tasks/node\");\nconst node_module_engine_host_1 = require(\"../node-module-engine-host\");\nconst schema_option_transform_1 = require(\"../schema-option-transform\");\n/**\n * A workflow specifically for Node tools.\n */\nclass NodeWorkflow extends schematics_1.workflow.BaseWorkflow {\n    constructor(hostOrRoot, options) {\n        let host;\n        let root;\n        if (typeof hostOrRoot === 'string') {\n            root = (0, core_1.normalize)(hostOrRoot);\n            host = new core_1.virtualFs.ScopedHost(new node_1.NodeJsSyncHost(), root);\n        }\n        else {\n            host = hostOrRoot;\n            root = options.root;\n        }\n        const engineHost = options.engineHostCreator?.(options) || new node_module_engine_host_1.NodeModulesEngineHost(options.resolvePaths);\n        super({\n            host,\n            engineHost,\n            force: options.force,\n            dryRun: options.dryRun,\n            registry: options.registry,\n        });\n        engineHost.registerTaskExecutor(node_2.BuiltinTaskExecutor.NodePackage, {\n            allowPackageManagerOverride: true,\n            packageManager: options.packageManager,\n            force: options.packageManagerForce,\n            rootDirectory: root && (0, core_1.getSystemPath)(root),\n            registry: options.packageRegistry,\n        });\n        engineHost.registerTaskExecutor(node_2.BuiltinTaskExecutor.RepositoryInitializer, {\n            rootDirectory: root && (0, core_1.getSystemPath)(root),\n        });\n        engineHost.registerTaskExecutor(node_2.BuiltinTaskExecutor.RunSchematic);\n        if (options.optionTransforms) {\n            for (const transform of options.optionTransforms) {\n                engineHost.registerOptionsTransform(transform);\n            }\n        }\n        if (options.schemaValidation) {\n            engineHost.registerOptionsTransform((0, schema_option_transform_1.validateOptionsWithSchema)(this.registry));\n        }\n        this._context = [];\n    }\n    get engine() {\n        return this._engine;\n    }\n    get engineHost() {\n        return this._engineHost;\n    }\n}\nexports.NodeWorkflow = NodeWorkflow;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}