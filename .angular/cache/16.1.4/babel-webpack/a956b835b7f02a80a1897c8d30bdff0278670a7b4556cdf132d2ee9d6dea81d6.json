{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst fs = require('fs/promises');\nconst fsm = require('fs-minipass');\nconst ssri = require('ssri');\nconst contentPath = require('./path');\nconst Pipeline = require('minipass-pipeline');\nmodule.exports = read;\nconst MAX_SINGLE_READ_SIZE = 64 * 1024 * 1024;\nfunction read(_x, _x2) {\n  return _read.apply(this, arguments);\n}\nfunction _read() {\n  _read = _asyncToGenerator(function* (cache, integrity, opts = {}) {\n    const {\n      size\n    } = opts;\n    const {\n      stat,\n      cpath,\n      sri\n    } = yield withContentSri(cache, integrity, /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (cpath, sri) {\n        // get size\n        const stat = yield fs.stat(cpath);\n        return {\n          stat,\n          cpath,\n          sri\n        };\n      });\n      return function (_x10, _x11) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    if (typeof size === 'number' && stat.size !== size) {\n      throw sizeError(size, stat.size);\n    }\n    if (stat.size > MAX_SINGLE_READ_SIZE) {\n      return readPipeline(cpath, stat.size, sri, new Pipeline()).concat();\n    }\n    const data = yield fs.readFile(cpath, {\n      encoding: null\n    });\n    if (!ssri.checkData(data, sri)) {\n      throw integrityError(sri, cpath);\n    }\n    return data;\n  });\n  return _read.apply(this, arguments);\n}\nconst readPipeline = (cpath, size, sri, stream) => {\n  stream.push(new fsm.ReadStream(cpath, {\n    size,\n    readSize: MAX_SINGLE_READ_SIZE\n  }), ssri.integrityStream({\n    integrity: sri,\n    size\n  }));\n  return stream;\n};\nmodule.exports.stream = readStream;\nmodule.exports.readStream = readStream;\nfunction readStream(cache, integrity, opts = {}) {\n  const {\n    size\n  } = opts;\n  const stream = new Pipeline();\n  // Set all this up to run on the stream and then just return the stream\n  Promise.resolve().then( /*#__PURE__*/_asyncToGenerator(function* () {\n    const {\n      stat,\n      cpath,\n      sri\n    } = yield withContentSri(cache, integrity, /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (cpath, sri) {\n        // just stat to ensure it exists\n        const stat = yield fs.stat(cpath);\n        return {\n          stat,\n          cpath,\n          sri\n        };\n      });\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    if (typeof size === 'number' && size !== stat.size) {\n      return stream.emit('error', sizeError(size, stat.size));\n    }\n    return readPipeline(cpath, stat.size, sri, stream);\n  })).catch(err => stream.emit('error', err));\n  return stream;\n}\nmodule.exports.copy = copy;\nfunction copy(cache, integrity, dest) {\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return fs.copyFile(cpath, dest);\n  });\n}\nmodule.exports.hasContent = hasContent;\nfunction hasContent(_x5, _x6) {\n  return _hasContent.apply(this, arguments);\n}\nfunction _hasContent() {\n  _hasContent = _asyncToGenerator(function* (cache, integrity) {\n    if (!integrity) {\n      return false;\n    }\n    try {\n      return yield withContentSri(cache, integrity, /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator(function* (cpath, sri) {\n          const stat = yield fs.stat(cpath);\n          return {\n            size: stat.size,\n            sri,\n            stat\n          };\n        });\n        return function (_x12, _x13) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    } catch (err) {\n      if (err.code === 'ENOENT') {\n        return false;\n      }\n      if (err.code === 'EPERM') {\n        /* istanbul ignore else */\n        if (process.platform !== 'win32') {\n          throw err;\n        } else {\n          return false;\n        }\n      }\n    }\n  });\n  return _hasContent.apply(this, arguments);\n}\nfunction withContentSri(_x7, _x8, _x9) {\n  return _withContentSri.apply(this, arguments);\n}\nfunction _withContentSri() {\n  _withContentSri = _asyncToGenerator(function* (cache, integrity, fn) {\n    const sri = ssri.parse(integrity);\n    // If `integrity` has multiple entries, pick the first digest\n    // with available local data.\n    const algo = sri.pickAlgorithm();\n    const digests = sri[algo];\n    if (digests.length <= 1) {\n      const cpath = contentPath(cache, digests[0]);\n      return fn(cpath, digests[0]);\n    } else {\n      // Can't use race here because a generic error can happen before\n      // a ENOENT error, and can happen before a valid result\n      const results = yield Promise.all(digests.map( /*#__PURE__*/function () {\n        var _ref5 = _asyncToGenerator(function* (meta) {\n          try {\n            return yield withContentSri(cache, meta, fn);\n          } catch (err) {\n            if (err.code === 'ENOENT') {\n              return Object.assign(new Error('No matching content found for ' + sri.toString()), {\n                code: 'ENOENT'\n              });\n            }\n            return err;\n          }\n        });\n        return function (_x14) {\n          return _ref5.apply(this, arguments);\n        };\n      }()));\n      // Return the first non error if it is found\n      const result = results.find(r => !(r instanceof Error));\n      if (result) {\n        return result;\n      }\n\n      // Throw the No matching content found error\n      const enoentError = results.find(r => r.code === 'ENOENT');\n      if (enoentError) {\n        throw enoentError;\n      }\n\n      // Throw generic error\n      throw results.find(r => r instanceof Error);\n    }\n  });\n  return _withContentSri.apply(this, arguments);\n}\nfunction sizeError(expected, found) {\n  /* eslint-disable-next-line max-len */\n  const err = new Error(`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`);\n  err.expected = expected;\n  err.found = found;\n  err.code = 'EBADSIZE';\n  return err;\n}\nfunction integrityError(sri, path) {\n  const err = new Error(`Integrity verification failed for ${sri} (${path})`);\n  err.code = 'EINTEGRITY';\n  err.sri = sri;\n  err.path = path;\n  return err;\n}","map":{"version":3,"names":["_asyncToGenerator","require","default","fs","fsm","ssri","contentPath","Pipeline","module","exports","read","MAX_SINGLE_READ_SIZE","_x","_x2","_read","apply","arguments","cache","integrity","opts","size","stat","cpath","sri","withContentSri","_ref3","_x10","_x11","sizeError","readPipeline","concat","data","readFile","encoding","checkData","integrityError","stream","push","ReadStream","readSize","integrityStream","readStream","Promise","resolve","then","_ref2","_x3","_x4","emit","catch","err","copy","dest","copyFile","hasContent","_x5","_x6","_hasContent","_ref4","_x12","_x13","code","process","platform","_x7","_x8","_x9","_withContentSri","fn","parse","algo","pickAlgorithm","digests","length","results","all","map","_ref5","meta","Object","assign","Error","toString","_x14","result","find","r","enoentError","expected","found","path"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/cacache/lib/content/read.js"],"sourcesContent":["'use strict'\n\nconst fs = require('fs/promises')\nconst fsm = require('fs-minipass')\nconst ssri = require('ssri')\nconst contentPath = require('./path')\nconst Pipeline = require('minipass-pipeline')\n\nmodule.exports = read\n\nconst MAX_SINGLE_READ_SIZE = 64 * 1024 * 1024\nasync function read (cache, integrity, opts = {}) {\n  const { size } = opts\n  const { stat, cpath, sri } = await withContentSri(cache, integrity, async (cpath, sri) => {\n    // get size\n    const stat = await fs.stat(cpath)\n    return { stat, cpath, sri }\n  })\n  if (typeof size === 'number' && stat.size !== size) {\n    throw sizeError(size, stat.size)\n  }\n\n  if (stat.size > MAX_SINGLE_READ_SIZE) {\n    return readPipeline(cpath, stat.size, sri, new Pipeline()).concat()\n  }\n\n  const data = await fs.readFile(cpath, { encoding: null })\n  if (!ssri.checkData(data, sri)) {\n    throw integrityError(sri, cpath)\n  }\n\n  return data\n}\n\nconst readPipeline = (cpath, size, sri, stream) => {\n  stream.push(\n    new fsm.ReadStream(cpath, {\n      size,\n      readSize: MAX_SINGLE_READ_SIZE,\n    }),\n    ssri.integrityStream({\n      integrity: sri,\n      size,\n    })\n  )\n  return stream\n}\n\nmodule.exports.stream = readStream\nmodule.exports.readStream = readStream\n\nfunction readStream (cache, integrity, opts = {}) {\n  const { size } = opts\n  const stream = new Pipeline()\n  // Set all this up to run on the stream and then just return the stream\n  Promise.resolve().then(async () => {\n    const { stat, cpath, sri } = await withContentSri(cache, integrity, async (cpath, sri) => {\n      // just stat to ensure it exists\n      const stat = await fs.stat(cpath)\n      return { stat, cpath, sri }\n    })\n    if (typeof size === 'number' && size !== stat.size) {\n      return stream.emit('error', sizeError(size, stat.size))\n    }\n\n    return readPipeline(cpath, stat.size, sri, stream)\n  }).catch(err => stream.emit('error', err))\n\n  return stream\n}\n\nmodule.exports.copy = copy\n\nfunction copy (cache, integrity, dest) {\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return fs.copyFile(cpath, dest)\n  })\n}\n\nmodule.exports.hasContent = hasContent\n\nasync function hasContent (cache, integrity) {\n  if (!integrity) {\n    return false\n  }\n\n  try {\n    return await withContentSri(cache, integrity, async (cpath, sri) => {\n      const stat = await fs.stat(cpath)\n      return { size: stat.size, sri, stat }\n    })\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      return false\n    }\n\n    if (err.code === 'EPERM') {\n      /* istanbul ignore else */\n      if (process.platform !== 'win32') {\n        throw err\n      } else {\n        return false\n      }\n    }\n  }\n}\n\nasync function withContentSri (cache, integrity, fn) {\n  const sri = ssri.parse(integrity)\n  // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n  const algo = sri.pickAlgorithm()\n  const digests = sri[algo]\n\n  if (digests.length <= 1) {\n    const cpath = contentPath(cache, digests[0])\n    return fn(cpath, digests[0])\n  } else {\n    // Can't use race here because a generic error can happen before\n    // a ENOENT error, and can happen before a valid result\n    const results = await Promise.all(digests.map(async (meta) => {\n      try {\n        return await withContentSri(cache, meta, fn)\n      } catch (err) {\n        if (err.code === 'ENOENT') {\n          return Object.assign(\n            new Error('No matching content found for ' + sri.toString()),\n            { code: 'ENOENT' }\n          )\n        }\n        return err\n      }\n    }))\n    // Return the first non error if it is found\n    const result = results.find((r) => !(r instanceof Error))\n    if (result) {\n      return result\n    }\n\n    // Throw the No matching content found error\n    const enoentError = results.find((r) => r.code === 'ENOENT')\n    if (enoentError) {\n      throw enoentError\n    }\n\n    // Throw generic error\n    throw results.find((r) => r instanceof Error)\n  }\n}\n\nfunction sizeError (expected, found) {\n  /* eslint-disable-next-line max-len */\n  const err = new Error(`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`)\n  err.expected = expected\n  err.found = found\n  err.code = 'EBADSIZE'\n  return err\n}\n\nfunction integrityError (sri, path) {\n  const err = new Error(`Integrity verification failed for ${sri} (${path})`)\n  err.code = 'EINTEGRITY'\n  err.sri = sri\n  err.path = path\n  return err\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}