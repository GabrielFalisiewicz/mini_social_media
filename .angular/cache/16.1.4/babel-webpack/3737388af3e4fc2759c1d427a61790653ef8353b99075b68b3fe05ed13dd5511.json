{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertValidBundle = void 0;\n/*\nCopyright 2023 The Sigstore Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nconst error_1 = require(\"../../error\");\n// Performs basic validation of a Sigstore bundle to ensure that all required\n// fields are populated. This is not a complete validation of the bundle, but\n// rather a check that the bundle is in a valid state to be processed by the\n// rest of the code.\nfunction assertValidBundle(b) {\n  const invalidValues = [];\n  // Content-related validation\n  if (b.content === undefined) {\n    invalidValues.push('content');\n  } else {\n    switch (b.content.$case) {\n      case 'messageSignature':\n        if (b.content.messageSignature.messageDigest === undefined) {\n          invalidValues.push('content.messageSignature.messageDigest');\n        } else {\n          if (b.content.messageSignature.messageDigest.digest.length === 0) {\n            invalidValues.push('content.messageSignature.messageDigest.digest');\n          }\n        }\n        if (b.content.messageSignature.signature.length === 0) {\n          invalidValues.push('content.messageSignature.signature');\n        }\n        break;\n      case 'dsseEnvelope':\n        if (b.content.dsseEnvelope.payload.length === 0) {\n          invalidValues.push('content.dsseEnvelope.payload');\n        }\n        if (b.content.dsseEnvelope.signatures.length !== 1) {\n          invalidValues.push('content.dsseEnvelope.signatures');\n        } else {\n          if (b.content.dsseEnvelope.signatures[0].sig.length === 0) {\n            invalidValues.push('content.dsseEnvelope.signatures[0].sig');\n          }\n        }\n        break;\n    }\n  }\n  // Verification material-related validation\n  if (b.verificationMaterial === undefined) {\n    invalidValues.push('verificationMaterial');\n  } else {\n    if (b.verificationMaterial.content === undefined) {\n      invalidValues.push('verificationMaterial.content');\n    } else {\n      switch (b.verificationMaterial.content.$case) {\n        case 'x509CertificateChain':\n          if (b.verificationMaterial.content.x509CertificateChain.certificates.length === 0) {\n            invalidValues.push('verificationMaterial.content.x509CertificateChain.certificates');\n          }\n          b.verificationMaterial.content.x509CertificateChain.certificates.forEach((cert, i) => {\n            if (cert.rawBytes.length === 0) {\n              invalidValues.push(`verificationMaterial.content.x509CertificateChain.certificates[${i}].rawBytes`);\n            }\n          });\n          break;\n      }\n    }\n  }\n  if (invalidValues.length > 0) {\n    throw new error_1.ValidationError(`invalid/missing bundle values: ${invalidValues.join(', ')}`);\n  }\n}\nexports.assertValidBundle = assertValidBundle;","map":{"version":3,"names":["Object","defineProperty","exports","value","assertValidBundle","error_1","require","b","invalidValues","content","undefined","push","$case","messageSignature","messageDigest","digest","length","signature","dsseEnvelope","payload","signatures","sig","verificationMaterial","x509CertificateChain","certificates","forEach","cert","i","rawBytes","ValidationError","join"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/sigstore/dist/types/sigstore/validate.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertValidBundle = void 0;\n/*\nCopyright 2023 The Sigstore Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nconst error_1 = require(\"../../error\");\n// Performs basic validation of a Sigstore bundle to ensure that all required\n// fields are populated. This is not a complete validation of the bundle, but\n// rather a check that the bundle is in a valid state to be processed by the\n// rest of the code.\nfunction assertValidBundle(b) {\n    const invalidValues = [];\n    // Content-related validation\n    if (b.content === undefined) {\n        invalidValues.push('content');\n    }\n    else {\n        switch (b.content.$case) {\n            case 'messageSignature':\n                if (b.content.messageSignature.messageDigest === undefined) {\n                    invalidValues.push('content.messageSignature.messageDigest');\n                }\n                else {\n                    if (b.content.messageSignature.messageDigest.digest.length === 0) {\n                        invalidValues.push('content.messageSignature.messageDigest.digest');\n                    }\n                }\n                if (b.content.messageSignature.signature.length === 0) {\n                    invalidValues.push('content.messageSignature.signature');\n                }\n                break;\n            case 'dsseEnvelope':\n                if (b.content.dsseEnvelope.payload.length === 0) {\n                    invalidValues.push('content.dsseEnvelope.payload');\n                }\n                if (b.content.dsseEnvelope.signatures.length !== 1) {\n                    invalidValues.push('content.dsseEnvelope.signatures');\n                }\n                else {\n                    if (b.content.dsseEnvelope.signatures[0].sig.length === 0) {\n                        invalidValues.push('content.dsseEnvelope.signatures[0].sig');\n                    }\n                }\n                break;\n        }\n    }\n    // Verification material-related validation\n    if (b.verificationMaterial === undefined) {\n        invalidValues.push('verificationMaterial');\n    }\n    else {\n        if (b.verificationMaterial.content === undefined) {\n            invalidValues.push('verificationMaterial.content');\n        }\n        else {\n            switch (b.verificationMaterial.content.$case) {\n                case 'x509CertificateChain':\n                    if (b.verificationMaterial.content.x509CertificateChain.certificates\n                        .length === 0) {\n                        invalidValues.push('verificationMaterial.content.x509CertificateChain.certificates');\n                    }\n                    b.verificationMaterial.content.x509CertificateChain.certificates.forEach((cert, i) => {\n                        if (cert.rawBytes.length === 0) {\n                            invalidValues.push(`verificationMaterial.content.x509CertificateChain.certificates[${i}].rawBytes`);\n                        }\n                    });\n                    break;\n            }\n        }\n    }\n    if (invalidValues.length > 0) {\n        throw new error_1.ValidationError(`invalid/missing bundle values: ${invalidValues.join(', ')}`);\n    }\n}\nexports.assertValidBundle = assertValidBundle;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}