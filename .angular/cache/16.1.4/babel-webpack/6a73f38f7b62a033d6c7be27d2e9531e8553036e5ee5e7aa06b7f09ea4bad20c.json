{"ast":null,"code":"const semver = require('semver');\nconst checkEngine = (target, npmVer, nodeVer, force = false) => {\n  const nodev = force ? null : nodeVer;\n  const eng = target.engines;\n  const opt = {\n    includePrerelease: true\n  };\n  if (!eng) {\n    return;\n  }\n  const nodeFail = nodev && eng.node && !semver.satisfies(nodev, eng.node, opt);\n  const npmFail = npmVer && eng.npm && !semver.satisfies(npmVer, eng.npm, opt);\n  if (nodeFail || npmFail) {\n    throw Object.assign(new Error('Unsupported engine'), {\n      pkgid: target._id,\n      current: {\n        node: nodeVer,\n        npm: npmVer\n      },\n      required: eng,\n      code: 'EBADENGINE'\n    });\n  }\n};\nconst isMusl = file => file.includes('libc.musl-') || file.includes('ld-musl-');\nconst checkPlatform = (target, force = false) => {\n  if (force) {\n    return;\n  }\n  const platform = process.platform;\n  const arch = process.arch;\n  const osOk = target.os ? checkList(platform, target.os) : true;\n  const cpuOk = target.cpu ? checkList(arch, target.cpu) : true;\n  let libcOk = true;\n  let libcFamily = null;\n  if (target.libc) {\n    // libc checks only work in linux, any value is a failure if we aren't\n    if (platform !== 'linux') {\n      libcOk = false;\n    } else {\n      const report = process.report.getReport();\n      if (report.header?.glibcVersionRuntime) {\n        libcFamily = 'glibc';\n      } else if (Array.isArray(report.sharedObjects) && report.sharedObjects.some(isMusl)) {\n        libcFamily = 'musl';\n      }\n      libcOk = libcFamily ? checkList(libcFamily, target.libc) : false;\n    }\n  }\n  if (!osOk || !cpuOk || !libcOk) {\n    throw Object.assign(new Error('Unsupported platform'), {\n      pkgid: target._id,\n      current: {\n        os: platform,\n        cpu: arch,\n        libc: libcFamily\n      },\n      required: {\n        os: target.os,\n        cpu: target.cpu,\n        libc: target.libc\n      },\n      code: 'EBADPLATFORM'\n    });\n  }\n};\nconst checkList = (value, list) => {\n  if (typeof list === 'string') {\n    list = [list];\n  }\n  if (list.length === 1 && list[0] === 'any') {\n    return true;\n  }\n  // match none of the negated values, and at least one of the\n  // non-negated values, if any are present.\n  let negated = 0;\n  let match = false;\n  for (const entry of list) {\n    const negate = entry.charAt(0) === '!';\n    const test = negate ? entry.slice(1) : entry;\n    if (negate) {\n      negated++;\n      if (value === test) {\n        return false;\n      }\n    } else {\n      match = match || value === test;\n    }\n  }\n  return match || negated === list.length;\n};\nmodule.exports = {\n  checkEngine,\n  checkPlatform\n};","map":{"version":3,"names":["semver","require","checkEngine","target","npmVer","nodeVer","force","nodev","eng","engines","opt","includePrerelease","nodeFail","node","satisfies","npmFail","npm","Object","assign","Error","pkgid","_id","current","required","code","isMusl","file","includes","checkPlatform","platform","process","arch","osOk","os","checkList","cpuOk","cpu","libcOk","libcFamily","libc","report","getReport","header","glibcVersionRuntime","Array","isArray","sharedObjects","some","value","list","length","negated","match","entry","negate","charAt","test","slice","module","exports"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/npm-install-checks/lib/index.js"],"sourcesContent":["const semver = require('semver')\n\nconst checkEngine = (target, npmVer, nodeVer, force = false) => {\n  const nodev = force ? null : nodeVer\n  const eng = target.engines\n  const opt = { includePrerelease: true }\n  if (!eng) {\n    return\n  }\n\n  const nodeFail = nodev && eng.node && !semver.satisfies(nodev, eng.node, opt)\n  const npmFail = npmVer && eng.npm && !semver.satisfies(npmVer, eng.npm, opt)\n  if (nodeFail || npmFail) {\n    throw Object.assign(new Error('Unsupported engine'), {\n      pkgid: target._id,\n      current: { node: nodeVer, npm: npmVer },\n      required: eng,\n      code: 'EBADENGINE',\n    })\n  }\n}\n\nconst isMusl = (file) => file.includes('libc.musl-') || file.includes('ld-musl-')\n\nconst checkPlatform = (target, force = false) => {\n  if (force) {\n    return\n  }\n\n  const platform = process.platform\n  const arch = process.arch\n  const osOk = target.os ? checkList(platform, target.os) : true\n  const cpuOk = target.cpu ? checkList(arch, target.cpu) : true\n\n  let libcOk = true\n  let libcFamily = null\n  if (target.libc) {\n    // libc checks only work in linux, any value is a failure if we aren't\n    if (platform !== 'linux') {\n      libcOk = false\n    } else {\n      const report = process.report.getReport()\n      if (report.header?.glibcVersionRuntime) {\n        libcFamily = 'glibc'\n      } else if (Array.isArray(report.sharedObjects) && report.sharedObjects.some(isMusl)) {\n        libcFamily = 'musl'\n      }\n      libcOk = libcFamily ? checkList(libcFamily, target.libc) : false\n    }\n  }\n\n  if (!osOk || !cpuOk || !libcOk) {\n    throw Object.assign(new Error('Unsupported platform'), {\n      pkgid: target._id,\n      current: {\n        os: platform,\n        cpu: arch,\n        libc: libcFamily,\n      },\n      required: {\n        os: target.os,\n        cpu: target.cpu,\n        libc: target.libc,\n      },\n      code: 'EBADPLATFORM',\n    })\n  }\n}\n\nconst checkList = (value, list) => {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n  if (list.length === 1 && list[0] === 'any') {\n    return true\n  }\n  // match none of the negated values, and at least one of the\n  // non-negated values, if any are present.\n  let negated = 0\n  let match = false\n  for (const entry of list) {\n    const negate = entry.charAt(0) === '!'\n    const test = negate ? entry.slice(1) : entry\n    if (negate) {\n      negated++\n      if (value === test) {\n        return false\n      }\n    } else {\n      match = match || value === test\n    }\n  }\n  return match || negated === list.length\n}\n\nmodule.exports = {\n  checkEngine,\n  checkPlatform,\n}\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAEhC,MAAMC,WAAW,GAAGA,CAACC,MAAM,EAAEC,MAAM,EAAEC,OAAO,EAAEC,KAAK,GAAG,KAAK,KAAK;EAC9D,MAAMC,KAAK,GAAGD,KAAK,GAAG,IAAI,GAAGD,OAAO;EACpC,MAAMG,GAAG,GAAGL,MAAM,CAACM,OAAO;EAC1B,MAAMC,GAAG,GAAG;IAAEC,iBAAiB,EAAE;EAAK,CAAC;EACvC,IAAI,CAACH,GAAG,EAAE;IACR;EACF;EAEA,MAAMI,QAAQ,GAAGL,KAAK,IAAIC,GAAG,CAACK,IAAI,IAAI,CAACb,MAAM,CAACc,SAAS,CAACP,KAAK,EAAEC,GAAG,CAACK,IAAI,EAAEH,GAAG,CAAC;EAC7E,MAAMK,OAAO,GAAGX,MAAM,IAAII,GAAG,CAACQ,GAAG,IAAI,CAAChB,MAAM,CAACc,SAAS,CAACV,MAAM,EAAEI,GAAG,CAACQ,GAAG,EAAEN,GAAG,CAAC;EAC5E,IAAIE,QAAQ,IAAIG,OAAO,EAAE;IACvB,MAAME,MAAM,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,oBAAoB,CAAC,EAAE;MACnDC,KAAK,EAAEjB,MAAM,CAACkB,GAAG;MACjBC,OAAO,EAAE;QAAET,IAAI,EAAER,OAAO;QAAEW,GAAG,EAAEZ;MAAO,CAAC;MACvCmB,QAAQ,EAAEf,GAAG;MACbgB,IAAI,EAAE;IACR,CAAC,CAAC;EACJ;AACF,CAAC;AAED,MAAMC,MAAM,GAAIC,IAAI,IAAKA,IAAI,CAACC,QAAQ,CAAC,YAAY,CAAC,IAAID,IAAI,CAACC,QAAQ,CAAC,UAAU,CAAC;AAEjF,MAAMC,aAAa,GAAGA,CAACzB,MAAM,EAAEG,KAAK,GAAG,KAAK,KAAK;EAC/C,IAAIA,KAAK,EAAE;IACT;EACF;EAEA,MAAMuB,QAAQ,GAAGC,OAAO,CAACD,QAAQ;EACjC,MAAME,IAAI,GAAGD,OAAO,CAACC,IAAI;EACzB,MAAMC,IAAI,GAAG7B,MAAM,CAAC8B,EAAE,GAAGC,SAAS,CAACL,QAAQ,EAAE1B,MAAM,CAAC8B,EAAE,CAAC,GAAG,IAAI;EAC9D,MAAME,KAAK,GAAGhC,MAAM,CAACiC,GAAG,GAAGF,SAAS,CAACH,IAAI,EAAE5B,MAAM,CAACiC,GAAG,CAAC,GAAG,IAAI;EAE7D,IAAIC,MAAM,GAAG,IAAI;EACjB,IAAIC,UAAU,GAAG,IAAI;EACrB,IAAInC,MAAM,CAACoC,IAAI,EAAE;IACf;IACA,IAAIV,QAAQ,KAAK,OAAO,EAAE;MACxBQ,MAAM,GAAG,KAAK;IAChB,CAAC,MAAM;MACL,MAAMG,MAAM,GAAGV,OAAO,CAACU,MAAM,CAACC,SAAS,CAAC,CAAC;MACzC,IAAID,MAAM,CAACE,MAAM,EAAEC,mBAAmB,EAAE;QACtCL,UAAU,GAAG,OAAO;MACtB,CAAC,MAAM,IAAIM,KAAK,CAACC,OAAO,CAACL,MAAM,CAACM,aAAa,CAAC,IAAIN,MAAM,CAACM,aAAa,CAACC,IAAI,CAACtB,MAAM,CAAC,EAAE;QACnFa,UAAU,GAAG,MAAM;MACrB;MACAD,MAAM,GAAGC,UAAU,GAAGJ,SAAS,CAACI,UAAU,EAAEnC,MAAM,CAACoC,IAAI,CAAC,GAAG,KAAK;IAClE;EACF;EAEA,IAAI,CAACP,IAAI,IAAI,CAACG,KAAK,IAAI,CAACE,MAAM,EAAE;IAC9B,MAAMpB,MAAM,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,sBAAsB,CAAC,EAAE;MACrDC,KAAK,EAAEjB,MAAM,CAACkB,GAAG;MACjBC,OAAO,EAAE;QACPW,EAAE,EAAEJ,QAAQ;QACZO,GAAG,EAAEL,IAAI;QACTQ,IAAI,EAAED;MACR,CAAC;MACDf,QAAQ,EAAE;QACRU,EAAE,EAAE9B,MAAM,CAAC8B,EAAE;QACbG,GAAG,EAAEjC,MAAM,CAACiC,GAAG;QACfG,IAAI,EAAEpC,MAAM,CAACoC;MACf,CAAC;MACDf,IAAI,EAAE;IACR,CAAC,CAAC;EACJ;AACF,CAAC;AAED,MAAMU,SAAS,GAAGA,CAACc,KAAK,EAAEC,IAAI,KAAK;EACjC,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5BA,IAAI,GAAG,CAACA,IAAI,CAAC;EACf;EACA,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,IAAID,IAAI,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE;IAC1C,OAAO,IAAI;EACb;EACA;EACA;EACA,IAAIE,OAAO,GAAG,CAAC;EACf,IAAIC,KAAK,GAAG,KAAK;EACjB,KAAK,MAAMC,KAAK,IAAIJ,IAAI,EAAE;IACxB,MAAMK,MAAM,GAAGD,KAAK,CAACE,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG;IACtC,MAAMC,IAAI,GAAGF,MAAM,GAAGD,KAAK,CAACI,KAAK,CAAC,CAAC,CAAC,GAAGJ,KAAK;IAC5C,IAAIC,MAAM,EAAE;MACVH,OAAO,EAAE;MACT,IAAIH,KAAK,KAAKQ,IAAI,EAAE;QAClB,OAAO,KAAK;MACd;IACF,CAAC,MAAM;MACLJ,KAAK,GAAGA,KAAK,IAAIJ,KAAK,KAAKQ,IAAI;IACjC;EACF;EACA,OAAOJ,KAAK,IAAID,OAAO,KAAKF,IAAI,CAACC,MAAM;AACzC,CAAC;AAEDQ,MAAM,CAACC,OAAO,GAAG;EACfzD,WAAW;EACX0B;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}