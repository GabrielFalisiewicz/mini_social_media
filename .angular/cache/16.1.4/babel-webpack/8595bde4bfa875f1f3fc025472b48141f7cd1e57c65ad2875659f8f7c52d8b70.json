{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UpdateBuffer = exports.UpdateBufferBase = exports.IndexOutOfBoundException = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst magic_string_1 = __importDefault(require(\"magic-string\"));\nconst node_util_1 = require(\"node:util\");\nclass IndexOutOfBoundException extends core_1.BaseException {\n  constructor(index, min, max = Infinity) {\n    super(`Index ${index} outside of range [${min}, ${max}].`);\n  }\n}\nexports.IndexOutOfBoundException = IndexOutOfBoundException;\n/**\n * Base class for an update buffer implementation that allows buffers to be inserted to the _right\n * or _left, or deleted, while keeping indices to the original buffer.\n */\nclass UpdateBufferBase {\n  constructor(_originalContent) {\n    this._originalContent = _originalContent;\n  }\n  /**\n   * Creates an UpdateBufferBase instance.\n   *\n   * @param contentPath The path of the update buffer instance.\n   * @param originalContent The original content of the update buffer instance.\n   * @returns An UpdateBufferBase instance.\n   */\n  static create(contentPath, originalContent) {\n    try {\n      // We only support utf8 encoding.\n      new node_util_1.TextDecoder('utf8', {\n        fatal: true\n      }).decode(originalContent);\n      return new UpdateBuffer(originalContent);\n    } catch (e) {\n      if (e instanceof TypeError) {\n        throw new Error(`Failed to decode \"${contentPath}\" as UTF-8 text.`);\n      }\n      throw e;\n    }\n  }\n}\nexports.UpdateBufferBase = UpdateBufferBase;\n/**\n * An utility class that allows buffers to be inserted to the _right or _left, or deleted, while\n * keeping indices to the original buffer.\n */\nclass UpdateBuffer extends UpdateBufferBase {\n  constructor() {\n    super(...arguments);\n    this._mutatableContent = new magic_string_1.default(this._originalContent.toString());\n  }\n  _assertIndex(index) {\n    if (index < 0 || index > this._originalContent.length) {\n      throw new IndexOutOfBoundException(index, 0, this._originalContent.length);\n    }\n  }\n  get length() {\n    return this._mutatableContent.length();\n  }\n  get original() {\n    return this._originalContent;\n  }\n  toString() {\n    return this._mutatableContent.toString();\n  }\n  generate() {\n    return Buffer.from(this.toString());\n  }\n  insertLeft(index, content) {\n    this._assertIndex(index);\n    this._mutatableContent.appendLeft(index, content.toString());\n  }\n  insertRight(index, content) {\n    this._assertIndex(index);\n    this._mutatableContent.appendRight(index, content.toString());\n  }\n  remove(index, length) {\n    this._assertIndex(index);\n    this._mutatableContent.remove(index, index + length);\n  }\n}\nexports.UpdateBuffer = UpdateBuffer;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","UpdateBuffer","UpdateBufferBase","IndexOutOfBoundException","core_1","require","magic_string_1","node_util_1","BaseException","constructor","index","min","max","Infinity","_originalContent","create","contentPath","originalContent","TextDecoder","fatal","decode","e","TypeError","Error","arguments","_mutatableContent","default","toString","_assertIndex","length","original","generate","Buffer","from","insertLeft","content","appendLeft","insertRight","appendRight","remove"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@angular-devkit/schematics/src/utility/update-buffer.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UpdateBuffer = exports.UpdateBufferBase = exports.IndexOutOfBoundException = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst magic_string_1 = __importDefault(require(\"magic-string\"));\nconst node_util_1 = require(\"node:util\");\nclass IndexOutOfBoundException extends core_1.BaseException {\n    constructor(index, min, max = Infinity) {\n        super(`Index ${index} outside of range [${min}, ${max}].`);\n    }\n}\nexports.IndexOutOfBoundException = IndexOutOfBoundException;\n/**\n * Base class for an update buffer implementation that allows buffers to be inserted to the _right\n * or _left, or deleted, while keeping indices to the original buffer.\n */\nclass UpdateBufferBase {\n    constructor(_originalContent) {\n        this._originalContent = _originalContent;\n    }\n    /**\n     * Creates an UpdateBufferBase instance.\n     *\n     * @param contentPath The path of the update buffer instance.\n     * @param originalContent The original content of the update buffer instance.\n     * @returns An UpdateBufferBase instance.\n     */\n    static create(contentPath, originalContent) {\n        try {\n            // We only support utf8 encoding.\n            new node_util_1.TextDecoder('utf8', { fatal: true }).decode(originalContent);\n            return new UpdateBuffer(originalContent);\n        }\n        catch (e) {\n            if (e instanceof TypeError) {\n                throw new Error(`Failed to decode \"${contentPath}\" as UTF-8 text.`);\n            }\n            throw e;\n        }\n    }\n}\nexports.UpdateBufferBase = UpdateBufferBase;\n/**\n * An utility class that allows buffers to be inserted to the _right or _left, or deleted, while\n * keeping indices to the original buffer.\n */\nclass UpdateBuffer extends UpdateBufferBase {\n    constructor() {\n        super(...arguments);\n        this._mutatableContent = new magic_string_1.default(this._originalContent.toString());\n    }\n    _assertIndex(index) {\n        if (index < 0 || index > this._originalContent.length) {\n            throw new IndexOutOfBoundException(index, 0, this._originalContent.length);\n        }\n    }\n    get length() {\n        return this._mutatableContent.length();\n    }\n    get original() {\n        return this._originalContent;\n    }\n    toString() {\n        return this._mutatableContent.toString();\n    }\n    generate() {\n        return Buffer.from(this.toString());\n    }\n    insertLeft(index, content) {\n        this._assertIndex(index);\n        this._mutatableContent.appendLeft(index, content.toString());\n    }\n    insertRight(index, content) {\n        this._assertIndex(index);\n        this._mutatableContent.appendRight(index, content.toString());\n    }\n    remove(index, length) {\n        this._assertIndex(index);\n        this._mutatableContent.remove(index, index + length);\n    }\n}\nexports.UpdateBuffer = UpdateBuffer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}