{"ast":null,"code":"const COMMA = ',';\nconst COLON = ':';\nconst LEFT_SQUARE_BRACKET = '[';\nconst RIGHT_SQUARE_BRACKET = ']';\nconst LEFT_CURLY_BRACKET = '{';\nconst RIGHT_CURLY_BRACKET = '}';\n\n// Recursively encodes the supplied object according to the canonical JSON form\n// as specified at http://wiki.laptop.org/go/Canonical_JSON. It's a restricted\n// dialect of JSON in which keys are lexically sorted, floats are not allowed,\n// and only double quotes and backslashes are escaped.\nfunction canonicalize(object) {\n  const buffer = [];\n  if (typeof object === 'string') {\n    buffer.push(canonicalizeString(object));\n  } else if (typeof object === 'boolean') {\n    buffer.push(JSON.stringify(object));\n  } else if (Number.isInteger(object)) {\n    buffer.push(JSON.stringify(object));\n  } else if (object === null) {\n    buffer.push(JSON.stringify(object));\n  } else if (Array.isArray(object)) {\n    buffer.push(LEFT_SQUARE_BRACKET);\n    let first = true;\n    object.forEach(element => {\n      if (!first) {\n        buffer.push(COMMA);\n      }\n      first = false;\n      buffer.push(canonicalize(element));\n    });\n    buffer.push(RIGHT_SQUARE_BRACKET);\n  } else if (typeof object === 'object') {\n    buffer.push(LEFT_CURLY_BRACKET);\n    let first = true;\n    Object.keys(object).sort().forEach(property => {\n      if (!first) {\n        buffer.push(COMMA);\n      }\n      first = false;\n      buffer.push(canonicalizeString(property));\n      buffer.push(COLON);\n      buffer.push(canonicalize(object[property]));\n    });\n    buffer.push(RIGHT_CURLY_BRACKET);\n  } else {\n    throw new TypeError('cannot encode ' + object.toString());\n  }\n  return buffer.join('');\n}\n\n// String canonicalization consists of escaping backslash (\\) and double\n// quote (\") characters and wrapping the resulting string in double quotes.\nfunction canonicalizeString(string) {\n  const escapedString = string.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"');\n  return '\"' + escapedString + '\"';\n}\nmodule.exports = {\n  canonicalize\n};","map":{"version":3,"names":["COMMA","COLON","LEFT_SQUARE_BRACKET","RIGHT_SQUARE_BRACKET","LEFT_CURLY_BRACKET","RIGHT_CURLY_BRACKET","canonicalize","object","buffer","push","canonicalizeString","JSON","stringify","Number","isInteger","Array","isArray","first","forEach","element","Object","keys","sort","property","TypeError","toString","join","string","escapedString","replace","module","exports"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@tufjs/canonical-json/lib/index.js"],"sourcesContent":["const COMMA = ',';\nconst COLON = ':';\nconst LEFT_SQUARE_BRACKET = '[';\nconst RIGHT_SQUARE_BRACKET = ']';\nconst LEFT_CURLY_BRACKET = '{';\nconst RIGHT_CURLY_BRACKET = '}';\n\n// Recursively encodes the supplied object according to the canonical JSON form\n// as specified at http://wiki.laptop.org/go/Canonical_JSON. It's a restricted\n// dialect of JSON in which keys are lexically sorted, floats are not allowed,\n// and only double quotes and backslashes are escaped.\nfunction canonicalize(object) {\n  const buffer = [];\n  if (typeof object === 'string') {\n    buffer.push(canonicalizeString(object));\n  } else if (typeof object === 'boolean') {\n    buffer.push(JSON.stringify(object));\n  } else if (Number.isInteger(object)) {\n    buffer.push(JSON.stringify(object));\n  } else if (object === null) {\n    buffer.push(JSON.stringify(object));\n  } else if (Array.isArray(object)) {\n    buffer.push(LEFT_SQUARE_BRACKET);\n    let first = true;\n    object.forEach((element) => {\n      if (!first) {\n        buffer.push(COMMA);\n      }\n      first = false;\n      buffer.push(canonicalize(element));\n    });\n    buffer.push(RIGHT_SQUARE_BRACKET);\n  } else if (typeof object === 'object') {\n    buffer.push(LEFT_CURLY_BRACKET);\n    let first = true;\n    Object.keys(object)\n      .sort()\n      .forEach((property) => {\n        if (!first) {\n          buffer.push(COMMA);\n        }\n        first = false;\n        buffer.push(canonicalizeString(property));\n        buffer.push(COLON);\n        buffer.push(canonicalize(object[property]));\n      });\n    buffer.push(RIGHT_CURLY_BRACKET);\n  } else {\n    throw new TypeError('cannot encode ' + object.toString());\n  }\n\n  return buffer.join('');\n}\n\n// String canonicalization consists of escaping backslash (\\) and double\n// quote (\") characters and wrapping the resulting string in double quotes.\nfunction canonicalizeString(string) {\n  const escapedString = string.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"');\n  return '\"' + escapedString + '\"';\n}\n\nmodule.exports = {\n  canonicalize,\n};\n"],"mappings":"AAAA,MAAMA,KAAK,GAAG,GAAG;AACjB,MAAMC,KAAK,GAAG,GAAG;AACjB,MAAMC,mBAAmB,GAAG,GAAG;AAC/B,MAAMC,oBAAoB,GAAG,GAAG;AAChC,MAAMC,kBAAkB,GAAG,GAAG;AAC9B,MAAMC,mBAAmB,GAAG,GAAG;;AAE/B;AACA;AACA;AACA;AACA,SAASC,YAAYA,CAACC,MAAM,EAAE;EAC5B,MAAMC,MAAM,GAAG,EAAE;EACjB,IAAI,OAAOD,MAAM,KAAK,QAAQ,EAAE;IAC9BC,MAAM,CAACC,IAAI,CAACC,kBAAkB,CAACH,MAAM,CAAC,CAAC;EACzC,CAAC,MAAM,IAAI,OAAOA,MAAM,KAAK,SAAS,EAAE;IACtCC,MAAM,CAACC,IAAI,CAACE,IAAI,CAACC,SAAS,CAACL,MAAM,CAAC,CAAC;EACrC,CAAC,MAAM,IAAIM,MAAM,CAACC,SAAS,CAACP,MAAM,CAAC,EAAE;IACnCC,MAAM,CAACC,IAAI,CAACE,IAAI,CAACC,SAAS,CAACL,MAAM,CAAC,CAAC;EACrC,CAAC,MAAM,IAAIA,MAAM,KAAK,IAAI,EAAE;IAC1BC,MAAM,CAACC,IAAI,CAACE,IAAI,CAACC,SAAS,CAACL,MAAM,CAAC,CAAC;EACrC,CAAC,MAAM,IAAIQ,KAAK,CAACC,OAAO,CAACT,MAAM,CAAC,EAAE;IAChCC,MAAM,CAACC,IAAI,CAACP,mBAAmB,CAAC;IAChC,IAAIe,KAAK,GAAG,IAAI;IAChBV,MAAM,CAACW,OAAO,CAAEC,OAAO,IAAK;MAC1B,IAAI,CAACF,KAAK,EAAE;QACVT,MAAM,CAACC,IAAI,CAACT,KAAK,CAAC;MACpB;MACAiB,KAAK,GAAG,KAAK;MACbT,MAAM,CAACC,IAAI,CAACH,YAAY,CAACa,OAAO,CAAC,CAAC;IACpC,CAAC,CAAC;IACFX,MAAM,CAACC,IAAI,CAACN,oBAAoB,CAAC;EACnC,CAAC,MAAM,IAAI,OAAOI,MAAM,KAAK,QAAQ,EAAE;IACrCC,MAAM,CAACC,IAAI,CAACL,kBAAkB,CAAC;IAC/B,IAAIa,KAAK,GAAG,IAAI;IAChBG,MAAM,CAACC,IAAI,CAACd,MAAM,CAAC,CAChBe,IAAI,CAAC,CAAC,CACNJ,OAAO,CAAEK,QAAQ,IAAK;MACrB,IAAI,CAACN,KAAK,EAAE;QACVT,MAAM,CAACC,IAAI,CAACT,KAAK,CAAC;MACpB;MACAiB,KAAK,GAAG,KAAK;MACbT,MAAM,CAACC,IAAI,CAACC,kBAAkB,CAACa,QAAQ,CAAC,CAAC;MACzCf,MAAM,CAACC,IAAI,CAACR,KAAK,CAAC;MAClBO,MAAM,CAACC,IAAI,CAACH,YAAY,CAACC,MAAM,CAACgB,QAAQ,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC;IACJf,MAAM,CAACC,IAAI,CAACJ,mBAAmB,CAAC;EAClC,CAAC,MAAM;IACL,MAAM,IAAImB,SAAS,CAAC,gBAAgB,GAAGjB,MAAM,CAACkB,QAAQ,CAAC,CAAC,CAAC;EAC3D;EAEA,OAAOjB,MAAM,CAACkB,IAAI,CAAC,EAAE,CAAC;AACxB;;AAEA;AACA;AACA,SAAShB,kBAAkBA,CAACiB,MAAM,EAAE;EAClC,MAAMC,aAAa,GAAGD,MAAM,CAACE,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC;EACxE,OAAO,GAAG,GAAGD,aAAa,GAAG,GAAG;AAClC;AAEAE,MAAM,CAACC,OAAO,GAAG;EACfzB;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}