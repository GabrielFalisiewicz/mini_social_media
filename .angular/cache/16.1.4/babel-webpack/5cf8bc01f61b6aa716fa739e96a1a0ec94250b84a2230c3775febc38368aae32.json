{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Updater = void 0;\nconst models_1 = require(\"@tufjs/models\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst fs = __importStar(require(\"fs\"));\nconst path = __importStar(require(\"path\"));\nconst config_1 = require(\"./config\");\nconst error_1 = require(\"./error\");\nconst fetcher_1 = require(\"./fetcher\");\nconst store_1 = require(\"./store\");\nconst url = __importStar(require(\"./utils/url\"));\nconst log = (0, debug_1.default)('tuf:cache');\nclass Updater {\n  constructor(options) {\n    const {\n      metadataDir,\n      metadataBaseUrl,\n      targetDir,\n      targetBaseUrl,\n      fetcher,\n      config\n    } = options;\n    this.dir = metadataDir;\n    this.metadataBaseUrl = metadataBaseUrl;\n    this.targetDir = targetDir;\n    this.targetBaseUrl = targetBaseUrl;\n    const data = this.loadLocalMetadata(models_1.MetadataKind.Root);\n    this.trustedSet = new store_1.TrustedMetadataStore(data);\n    this.config = {\n      ...config_1.defaultConfig,\n      ...config\n    };\n    this.fetcher = fetcher || new fetcher_1.DefaultFetcher({\n      timeout: this.config.fetchTimeout,\n      retries: this.config.fetchRetries\n    });\n  }\n  // refresh and load the metadata before downloading the target\n  // refresh should be called once after the client is initialized\n  refresh() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.loadRoot();\n      yield _this.loadTimestamp();\n      yield _this.loadSnapshot();\n      yield _this.loadTargets(models_1.MetadataKind.Targets, models_1.MetadataKind.Root);\n    })();\n  }\n  // Returns the TargetFile instance with information for the given target path.\n  //\n  // Implicitly calls refresh if it hasn't already been called.\n  getTargetInfo(targetPath) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this2.trustedSet.targets) {\n        yield _this2.refresh();\n      }\n      return _this2.preorderDepthFirstWalk(targetPath);\n    })();\n  }\n  downloadTarget(targetInfo, filePath, targetBaseUrl) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const targetPath = filePath || _this3.generateTargetPath(targetInfo);\n      if (!targetBaseUrl) {\n        if (!_this3.targetBaseUrl) {\n          throw new error_1.ValueError('Target base URL not set');\n        }\n        targetBaseUrl = _this3.targetBaseUrl;\n      }\n      let targetFilePath = targetInfo.path;\n      const consistentSnapshot = _this3.trustedSet.root.signed.consistentSnapshot;\n      if (consistentSnapshot && _this3.config.prefixTargetsWithHash) {\n        const hashes = Object.values(targetInfo.hashes);\n        const {\n          dir,\n          base\n        } = path.parse(targetFilePath);\n        const filename = `${hashes[0]}.${base}`;\n        targetFilePath = dir ? `${dir}/${filename}` : filename;\n      }\n      const targetUrl = url.join(targetBaseUrl, targetFilePath);\n      // Client workflow 5.7.3: download target file\n      yield _this3.fetcher.downloadFile(targetUrl, targetInfo.length, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (fileName) {\n          // Verify hashes and length of downloaded file\n          yield targetInfo.verify(fs.createReadStream(fileName));\n          // Copy file to target path\n          log('WRITE %s', targetPath);\n          fs.copyFileSync(fileName, targetPath);\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n      return targetPath;\n    })();\n  }\n  findCachedTarget(targetInfo, filePath) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (!filePath) {\n        filePath = _this4.generateTargetPath(targetInfo);\n      }\n      try {\n        if (fs.existsSync(filePath)) {\n          yield targetInfo.verify(fs.createReadStream(filePath));\n          return filePath;\n        }\n      } catch (error) {\n        return; // File not found\n      }\n\n      return; // File not found\n    })();\n  }\n\n  loadLocalMetadata(fileName) {\n    const filePath = path.join(this.dir, `${fileName}.json`);\n    log('READ %s', filePath);\n    return fs.readFileSync(filePath);\n  }\n  // Sequentially load and persist on local disk every newer root metadata\n  // version available on the remote.\n  // Client workflow 5.3: update root role\n  loadRoot() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      // Client workflow 5.3.2: version of trusted root metadata file\n      const rootVersion = _this5.trustedSet.root.signed.version;\n      const lowerBound = rootVersion + 1;\n      const upperBound = lowerBound + _this5.config.maxRootRotations;\n      for (let version = lowerBound; version <= upperBound; version++) {\n        const rootUrl = url.join(_this5.metadataBaseUrl, `${version}.root.json`);\n        try {\n          // Client workflow 5.3.3: download new root metadata file\n          const bytesData = yield _this5.fetcher.downloadBytes(rootUrl, _this5.config.rootMaxLength);\n          // Client workflow 5.3.4 - 5.4.7\n          _this5.trustedSet.updateRoot(bytesData);\n          // Client workflow 5.3.8: persist root metadata file\n          _this5.persistMetadata(models_1.MetadataKind.Root, bytesData);\n        } catch (error) {\n          break;\n        }\n      }\n    })();\n  }\n  // Load local and remote timestamp metadata.\n  // Client workflow 5.4: update timestamp role\n  loadTimestamp() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      // Load local and remote timestamp metadata\n      try {\n        const data = _this6.loadLocalMetadata(models_1.MetadataKind.Timestamp);\n        _this6.trustedSet.updateTimestamp(data);\n      } catch (error) {\n        // continue\n      }\n      //Load from remote (whether local load succeeded or not)\n      const timestampUrl = url.join(_this6.metadataBaseUrl, 'timestamp.json');\n      // Client workflow 5.4.1: download timestamp metadata file\n      const bytesData = yield _this6.fetcher.downloadBytes(timestampUrl, _this6.config.timestampMaxLength);\n      try {\n        // Client workflow 5.4.2 - 5.4.4\n        _this6.trustedSet.updateTimestamp(bytesData);\n      } catch (error) {\n        // If new timestamp version is same as current, discardd the new one.\n        // This is normal and should NOT raise an error.\n        if (error instanceof error_1.EqualVersionError) {\n          return;\n        }\n        // Re-raise any other error\n        throw error;\n      }\n      // Client workflow 5.4.5: persist timestamp metadata\n      _this6.persistMetadata(models_1.MetadataKind.Timestamp, bytesData);\n    })();\n  }\n  // Load local and remote snapshot metadata.\n  // Client workflow 5.5: update snapshot role\n  loadSnapshot() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      //Load local (and if needed remote) snapshot metadata\n      try {\n        const data = _this7.loadLocalMetadata(models_1.MetadataKind.Snapshot);\n        _this7.trustedSet.updateSnapshot(data, true);\n      } catch (error) {\n        if (!_this7.trustedSet.timestamp) {\n          throw new ReferenceError('No timestamp metadata');\n        }\n        const snapshotMeta = _this7.trustedSet.timestamp.signed.snapshotMeta;\n        const maxLength = snapshotMeta.length || _this7.config.snapshotMaxLength;\n        const version = _this7.trustedSet.root.signed.consistentSnapshot ? snapshotMeta.version : undefined;\n        const snapshotUrl = url.join(_this7.metadataBaseUrl, version ? `${version}.snapshot.json` : 'snapshot.json');\n        try {\n          // Client workflow 5.5.1: download snapshot metadata file\n          const bytesData = yield _this7.fetcher.downloadBytes(snapshotUrl, maxLength);\n          // Client workflow 5.5.2 - 5.5.6\n          _this7.trustedSet.updateSnapshot(bytesData);\n          // Client workflow 5.5.7: persist snapshot metadata file\n          _this7.persistMetadata(models_1.MetadataKind.Snapshot, bytesData);\n        } catch (error) {\n          throw new error_1.RuntimeError(`Unable to load snapshot metadata error ${error}`);\n        }\n      }\n    })();\n  }\n  // Load local and remote targets metadata.\n  // Client workflow 5.6: update targets role\n  loadTargets(role, parentRole) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      if (_this8.trustedSet.getRole(role)) {\n        return _this8.trustedSet.getRole(role);\n      }\n      try {\n        const buffer = _this8.loadLocalMetadata(role);\n        _this8.trustedSet.updateDelegatedTargets(buffer, role, parentRole);\n      } catch (error) {\n        // Local 'role' does not exist or is invalid: update from remote\n        if (!_this8.trustedSet.snapshot) {\n          throw new ReferenceError('No snapshot metadata');\n        }\n        const metaInfo = _this8.trustedSet.snapshot.signed.meta[`${role}.json`];\n        // TODO: use length for fetching\n        const maxLength = metaInfo.length || _this8.config.targetsMaxLength;\n        const version = _this8.trustedSet.root.signed.consistentSnapshot ? metaInfo.version : undefined;\n        const metadataUrl = url.join(_this8.metadataBaseUrl, version ? `${version}.${role}.json` : `${role}.json`);\n        try {\n          // Client workflow 5.6.1: download targets metadata file\n          const bytesData = yield _this8.fetcher.downloadBytes(metadataUrl, maxLength);\n          // Client workflow 5.6.2 - 5.6.6\n          _this8.trustedSet.updateDelegatedTargets(bytesData, role, parentRole);\n          // Client workflow 5.6.7: persist targets metadata file\n          _this8.persistMetadata(role, bytesData);\n        } catch (error) {\n          throw new error_1.RuntimeError(`Unable to load targets error ${error}`);\n        }\n      }\n      return _this8.trustedSet.getRole(role);\n    })();\n  }\n  preorderDepthFirstWalk(targetPath) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      // Interrogates the tree of target delegations in order of appearance\n      // (which implicitly order trustworthiness), and returns the matching\n      // target found in the most trusted role.\n      // List of delegations to be interrogated. A (role, parent role) pair\n      // is needed to load and verify the delegated targets metadata.\n      const delegationsToVisit = [{\n        roleName: models_1.MetadataKind.Targets,\n        parentRoleName: models_1.MetadataKind.Root\n      }];\n      const visitedRoleNames = new Set();\n      // Client workflow 5.6.7: preorder depth-first traversal of the graph of\n      // target delegations\n      while (visitedRoleNames.size <= _this9.config.maxDelegations && delegationsToVisit.length > 0) {\n        //  Pop the role name from the top of the stack.\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const {\n          roleName,\n          parentRoleName\n        } = delegationsToVisit.pop();\n        // Skip any visited current role to prevent cycles.\n        // Client workflow 5.6.7.1: skip already-visited roles\n        if (visitedRoleNames.has(roleName)) {\n          continue;\n        }\n        // The metadata for 'role_name' must be downloaded/updated before\n        // its targets, delegations, and child roles can be inspected.\n        const targets = (yield _this9.loadTargets(roleName, parentRoleName))?.signed;\n        if (!targets) {\n          continue;\n        }\n        const target = targets.targets?.[targetPath];\n        if (target) {\n          return target;\n        }\n        // After preorder check, add current role to set of visited roles.\n        visitedRoleNames.add(roleName);\n        if (targets.delegations) {\n          const childRolesToVisit = [];\n          // NOTE: This may be a slow operation if there are many delegated roles.\n          const rolesForTarget = targets.delegations.rolesForTarget(targetPath);\n          for (const {\n            role: childName,\n            terminating\n          } of rolesForTarget) {\n            childRolesToVisit.push({\n              roleName: childName,\n              parentRoleName: roleName\n            });\n            // Client workflow 5.6.7.2.1\n            if (terminating) {\n              delegationsToVisit.splice(0); // empty the array\n              break;\n            }\n          }\n          childRolesToVisit.reverse();\n          delegationsToVisit.push(...childRolesToVisit);\n        }\n      }\n      return; // no matching target found\n    })();\n  }\n\n  generateTargetPath(targetInfo) {\n    if (!this.targetDir) {\n      throw new error_1.ValueError('Target directory not set');\n    }\n    // URL encode target path\n    const filePath = encodeURIComponent(targetInfo.path);\n    return path.join(this.targetDir, filePath);\n  }\n  persistMetadata(metaDataName, bytesData) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const filePath = path.join(_this10.dir, `${metaDataName}.json`);\n        log('WRITE %s', filePath);\n        fs.writeFileSync(filePath, bytesData.toString('utf8'));\n      } catch (error) {\n        throw new error_1.PersistError(`Failed to persist metadata ${metaDataName} error: ${error}`);\n      }\n    })();\n  }\n}\nexports.Updater = Updater;","map":{"version":3,"names":["_asyncToGenerator","require","default","__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__importDefault","exports","Updater","models_1","debug_1","fs","path","config_1","error_1","fetcher_1","store_1","url","log","constructor","options","metadataDir","metadataBaseUrl","targetDir","targetBaseUrl","fetcher","config","dir","data","loadLocalMetadata","MetadataKind","Root","trustedSet","TrustedMetadataStore","defaultConfig","DefaultFetcher","timeout","fetchTimeout","retries","fetchRetries","refresh","_this","loadRoot","loadTimestamp","loadSnapshot","loadTargets","Targets","getTargetInfo","targetPath","_this2","targets","preorderDepthFirstWalk","downloadTarget","targetInfo","filePath","_this3","generateTargetPath","ValueError","targetFilePath","consistentSnapshot","root","signed","prefixTargetsWithHash","hashes","values","base","parse","filename","targetUrl","join","downloadFile","length","_ref","fileName","verify","createReadStream","copyFileSync","_x","apply","arguments","findCachedTarget","_this4","existsSync","error","readFileSync","_this5","rootVersion","version","lowerBound","upperBound","maxRootRotations","rootUrl","bytesData","downloadBytes","rootMaxLength","updateRoot","persistMetadata","_this6","Timestamp","updateTimestamp","timestampUrl","timestampMaxLength","EqualVersionError","_this7","Snapshot","updateSnapshot","timestamp","ReferenceError","snapshotMeta","maxLength","snapshotMaxLength","snapshotUrl","RuntimeError","role","parentRole","_this8","getRole","buffer","updateDelegatedTargets","snapshot","metaInfo","meta","targetsMaxLength","metadataUrl","_this9","delegationsToVisit","roleName","parentRoleName","visitedRoleNames","Set","size","maxDelegations","pop","has","target","add","delegations","childRolesToVisit","rolesForTarget","childName","terminating","push","splice","reverse","encodeURIComponent","metaDataName","_this10","writeFileSync","toString","PersistError"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/tuf-js/dist/updater.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Updater = void 0;\nconst models_1 = require(\"@tufjs/models\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst fs = __importStar(require(\"fs\"));\nconst path = __importStar(require(\"path\"));\nconst config_1 = require(\"./config\");\nconst error_1 = require(\"./error\");\nconst fetcher_1 = require(\"./fetcher\");\nconst store_1 = require(\"./store\");\nconst url = __importStar(require(\"./utils/url\"));\nconst log = (0, debug_1.default)('tuf:cache');\nclass Updater {\n    constructor(options) {\n        const { metadataDir, metadataBaseUrl, targetDir, targetBaseUrl, fetcher, config, } = options;\n        this.dir = metadataDir;\n        this.metadataBaseUrl = metadataBaseUrl;\n        this.targetDir = targetDir;\n        this.targetBaseUrl = targetBaseUrl;\n        const data = this.loadLocalMetadata(models_1.MetadataKind.Root);\n        this.trustedSet = new store_1.TrustedMetadataStore(data);\n        this.config = { ...config_1.defaultConfig, ...config };\n        this.fetcher =\n            fetcher ||\n                new fetcher_1.DefaultFetcher({\n                    timeout: this.config.fetchTimeout,\n                    retries: this.config.fetchRetries,\n                });\n    }\n    // refresh and load the metadata before downloading the target\n    // refresh should be called once after the client is initialized\n    async refresh() {\n        await this.loadRoot();\n        await this.loadTimestamp();\n        await this.loadSnapshot();\n        await this.loadTargets(models_1.MetadataKind.Targets, models_1.MetadataKind.Root);\n    }\n    // Returns the TargetFile instance with information for the given target path.\n    //\n    // Implicitly calls refresh if it hasn't already been called.\n    async getTargetInfo(targetPath) {\n        if (!this.trustedSet.targets) {\n            await this.refresh();\n        }\n        return this.preorderDepthFirstWalk(targetPath);\n    }\n    async downloadTarget(targetInfo, filePath, targetBaseUrl) {\n        const targetPath = filePath || this.generateTargetPath(targetInfo);\n        if (!targetBaseUrl) {\n            if (!this.targetBaseUrl) {\n                throw new error_1.ValueError('Target base URL not set');\n            }\n            targetBaseUrl = this.targetBaseUrl;\n        }\n        let targetFilePath = targetInfo.path;\n        const consistentSnapshot = this.trustedSet.root.signed.consistentSnapshot;\n        if (consistentSnapshot && this.config.prefixTargetsWithHash) {\n            const hashes = Object.values(targetInfo.hashes);\n            const { dir, base } = path.parse(targetFilePath);\n            const filename = `${hashes[0]}.${base}`;\n            targetFilePath = dir ? `${dir}/${filename}` : filename;\n        }\n        const targetUrl = url.join(targetBaseUrl, targetFilePath);\n        // Client workflow 5.7.3: download target file\n        await this.fetcher.downloadFile(targetUrl, targetInfo.length, async (fileName) => {\n            // Verify hashes and length of downloaded file\n            await targetInfo.verify(fs.createReadStream(fileName));\n            // Copy file to target path\n            log('WRITE %s', targetPath);\n            fs.copyFileSync(fileName, targetPath);\n        });\n        return targetPath;\n    }\n    async findCachedTarget(targetInfo, filePath) {\n        if (!filePath) {\n            filePath = this.generateTargetPath(targetInfo);\n        }\n        try {\n            if (fs.existsSync(filePath)) {\n                await targetInfo.verify(fs.createReadStream(filePath));\n                return filePath;\n            }\n        }\n        catch (error) {\n            return; // File not found\n        }\n        return; // File not found\n    }\n    loadLocalMetadata(fileName) {\n        const filePath = path.join(this.dir, `${fileName}.json`);\n        log('READ %s', filePath);\n        return fs.readFileSync(filePath);\n    }\n    // Sequentially load and persist on local disk every newer root metadata\n    // version available on the remote.\n    // Client workflow 5.3: update root role\n    async loadRoot() {\n        // Client workflow 5.3.2: version of trusted root metadata file\n        const rootVersion = this.trustedSet.root.signed.version;\n        const lowerBound = rootVersion + 1;\n        const upperBound = lowerBound + this.config.maxRootRotations;\n        for (let version = lowerBound; version <= upperBound; version++) {\n            const rootUrl = url.join(this.metadataBaseUrl, `${version}.root.json`);\n            try {\n                // Client workflow 5.3.3: download new root metadata file\n                const bytesData = await this.fetcher.downloadBytes(rootUrl, this.config.rootMaxLength);\n                // Client workflow 5.3.4 - 5.4.7\n                this.trustedSet.updateRoot(bytesData);\n                // Client workflow 5.3.8: persist root metadata file\n                this.persistMetadata(models_1.MetadataKind.Root, bytesData);\n            }\n            catch (error) {\n                break;\n            }\n        }\n    }\n    // Load local and remote timestamp metadata.\n    // Client workflow 5.4: update timestamp role\n    async loadTimestamp() {\n        // Load local and remote timestamp metadata\n        try {\n            const data = this.loadLocalMetadata(models_1.MetadataKind.Timestamp);\n            this.trustedSet.updateTimestamp(data);\n        }\n        catch (error) {\n            // continue\n        }\n        //Load from remote (whether local load succeeded or not)\n        const timestampUrl = url.join(this.metadataBaseUrl, 'timestamp.json');\n        // Client workflow 5.4.1: download timestamp metadata file\n        const bytesData = await this.fetcher.downloadBytes(timestampUrl, this.config.timestampMaxLength);\n        try {\n            // Client workflow 5.4.2 - 5.4.4\n            this.trustedSet.updateTimestamp(bytesData);\n        }\n        catch (error) {\n            // If new timestamp version is same as current, discardd the new one.\n            // This is normal and should NOT raise an error.\n            if (error instanceof error_1.EqualVersionError) {\n                return;\n            }\n            // Re-raise any other error\n            throw error;\n        }\n        // Client workflow 5.4.5: persist timestamp metadata\n        this.persistMetadata(models_1.MetadataKind.Timestamp, bytesData);\n    }\n    // Load local and remote snapshot metadata.\n    // Client workflow 5.5: update snapshot role\n    async loadSnapshot() {\n        //Load local (and if needed remote) snapshot metadata\n        try {\n            const data = this.loadLocalMetadata(models_1.MetadataKind.Snapshot);\n            this.trustedSet.updateSnapshot(data, true);\n        }\n        catch (error) {\n            if (!this.trustedSet.timestamp) {\n                throw new ReferenceError('No timestamp metadata');\n            }\n            const snapshotMeta = this.trustedSet.timestamp.signed.snapshotMeta;\n            const maxLength = snapshotMeta.length || this.config.snapshotMaxLength;\n            const version = this.trustedSet.root.signed.consistentSnapshot\n                ? snapshotMeta.version\n                : undefined;\n            const snapshotUrl = url.join(this.metadataBaseUrl, version ? `${version}.snapshot.json` : 'snapshot.json');\n            try {\n                // Client workflow 5.5.1: download snapshot metadata file\n                const bytesData = await this.fetcher.downloadBytes(snapshotUrl, maxLength);\n                // Client workflow 5.5.2 - 5.5.6\n                this.trustedSet.updateSnapshot(bytesData);\n                // Client workflow 5.5.7: persist snapshot metadata file\n                this.persistMetadata(models_1.MetadataKind.Snapshot, bytesData);\n            }\n            catch (error) {\n                throw new error_1.RuntimeError(`Unable to load snapshot metadata error ${error}`);\n            }\n        }\n    }\n    // Load local and remote targets metadata.\n    // Client workflow 5.6: update targets role\n    async loadTargets(role, parentRole) {\n        if (this.trustedSet.getRole(role)) {\n            return this.trustedSet.getRole(role);\n        }\n        try {\n            const buffer = this.loadLocalMetadata(role);\n            this.trustedSet.updateDelegatedTargets(buffer, role, parentRole);\n        }\n        catch (error) {\n            // Local 'role' does not exist or is invalid: update from remote\n            if (!this.trustedSet.snapshot) {\n                throw new ReferenceError('No snapshot metadata');\n            }\n            const metaInfo = this.trustedSet.snapshot.signed.meta[`${role}.json`];\n            // TODO: use length for fetching\n            const maxLength = metaInfo.length || this.config.targetsMaxLength;\n            const version = this.trustedSet.root.signed.consistentSnapshot\n                ? metaInfo.version\n                : undefined;\n            const metadataUrl = url.join(this.metadataBaseUrl, version ? `${version}.${role}.json` : `${role}.json`);\n            try {\n                // Client workflow 5.6.1: download targets metadata file\n                const bytesData = await this.fetcher.downloadBytes(metadataUrl, maxLength);\n                // Client workflow 5.6.2 - 5.6.6\n                this.trustedSet.updateDelegatedTargets(bytesData, role, parentRole);\n                // Client workflow 5.6.7: persist targets metadata file\n                this.persistMetadata(role, bytesData);\n            }\n            catch (error) {\n                throw new error_1.RuntimeError(`Unable to load targets error ${error}`);\n            }\n        }\n        return this.trustedSet.getRole(role);\n    }\n    async preorderDepthFirstWalk(targetPath) {\n        // Interrogates the tree of target delegations in order of appearance\n        // (which implicitly order trustworthiness), and returns the matching\n        // target found in the most trusted role.\n        // List of delegations to be interrogated. A (role, parent role) pair\n        // is needed to load and verify the delegated targets metadata.\n        const delegationsToVisit = [\n            {\n                roleName: models_1.MetadataKind.Targets,\n                parentRoleName: models_1.MetadataKind.Root,\n            },\n        ];\n        const visitedRoleNames = new Set();\n        // Client workflow 5.6.7: preorder depth-first traversal of the graph of\n        // target delegations\n        while (visitedRoleNames.size <= this.config.maxDelegations &&\n            delegationsToVisit.length > 0) {\n            //  Pop the role name from the top of the stack.\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const { roleName, parentRoleName } = delegationsToVisit.pop();\n            // Skip any visited current role to prevent cycles.\n            // Client workflow 5.6.7.1: skip already-visited roles\n            if (visitedRoleNames.has(roleName)) {\n                continue;\n            }\n            // The metadata for 'role_name' must be downloaded/updated before\n            // its targets, delegations, and child roles can be inspected.\n            const targets = (await this.loadTargets(roleName, parentRoleName))\n                ?.signed;\n            if (!targets) {\n                continue;\n            }\n            const target = targets.targets?.[targetPath];\n            if (target) {\n                return target;\n            }\n            // After preorder check, add current role to set of visited roles.\n            visitedRoleNames.add(roleName);\n            if (targets.delegations) {\n                const childRolesToVisit = [];\n                // NOTE: This may be a slow operation if there are many delegated roles.\n                const rolesForTarget = targets.delegations.rolesForTarget(targetPath);\n                for (const { role: childName, terminating } of rolesForTarget) {\n                    childRolesToVisit.push({\n                        roleName: childName,\n                        parentRoleName: roleName,\n                    });\n                    // Client workflow 5.6.7.2.1\n                    if (terminating) {\n                        delegationsToVisit.splice(0); // empty the array\n                        break;\n                    }\n                }\n                childRolesToVisit.reverse();\n                delegationsToVisit.push(...childRolesToVisit);\n            }\n        }\n        return; // no matching target found\n    }\n    generateTargetPath(targetInfo) {\n        if (!this.targetDir) {\n            throw new error_1.ValueError('Target directory not set');\n        }\n        // URL encode target path\n        const filePath = encodeURIComponent(targetInfo.path);\n        return path.join(this.targetDir, filePath);\n    }\n    async persistMetadata(metaDataName, bytesData) {\n        try {\n            const filePath = path.join(this.dir, `${metaDataName}.json`);\n            log('WRITE %s', filePath);\n            fs.writeFileSync(filePath, bytesData.toString('utf8'));\n        }\n        catch (error) {\n            throw new error_1.PersistError(`Failed to persist metadata ${metaDataName} error: ${error}`);\n        }\n    }\n}\nexports.Updater = Updater;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}