{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.verifyTLogEntries = void 0;\n/*\nCopyright 2023 The Sigstore Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nconst error_1 = require(\"../../error\");\nconst sigstore = __importStar(require(\"../../types/sigstore\"));\nconst cert_1 = require(\"../../x509/cert\");\nconst body_1 = require(\"./body\");\nconst set_1 = require(\"./set\");\n// Verifies that the number of tlog entries that pass offline verification\n// is greater than or equal to the threshold specified in the options.\nfunction verifyTLogEntries(bundle, trustedRoot, options) {\n  if (options.performOnlineVerification) {\n    throw new error_1.VerificationError('Online verification not implemented');\n  }\n  // Extract the signing cert, if available\n  const signingCert = signingCertificate(bundle);\n  // Iterate over the tlog entries and verify each one\n  const verifiedEntries = bundle.verificationMaterial.tlogEntries.filter(entry => verifyTLogEntryOffline(entry, bundle.content, trustedRoot.tlogs, signingCert));\n  if (verifiedEntries.length < options.threshold) {\n    throw new error_1.VerificationError('tlog verification failed');\n  }\n}\nexports.verifyTLogEntries = verifyTLogEntries;\nfunction verifyTLogEntryOffline(entry, bundleContent, tlogs, signingCert) {\n  // Check that the TLog entry has the fields necessary for verification\n  if (!sigstore.isVerifiableTransparencyLogEntry(entry)) {\n    return false;\n  }\n  // If there is a signing certificate availble, check that the tlog integrated\n  // time is within the certificate's validity period; otherwise, skip this\n  // check.\n  const verifyTLogIntegrationTime = signingCert ? () => signingCert.validForDate(new Date(Number(entry.integratedTime) * 1000)) : () => true;\n  return (0, body_1.verifyTLogBody)(entry, bundleContent) && (0, set_1.verifyTLogSET)(entry, tlogs) && verifyTLogIntegrationTime();\n}\nfunction signingCertificate(bundle) {\n  if (!sigstore.isBundleWithCertificateChain(bundle)) {\n    return undefined;\n  }\n  const signingCert = bundle.verificationMaterial.content.x509CertificateChain.certificates[0];\n  return cert_1.x509Certificate.parse(signingCert.rawBytes);\n}","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","verifyTLogEntries","error_1","require","sigstore","cert_1","body_1","set_1","bundle","trustedRoot","options","performOnlineVerification","VerificationError","signingCert","signingCertificate","verifiedEntries","verificationMaterial","tlogEntries","filter","entry","verifyTLogEntryOffline","content","tlogs","length","threshold","bundleContent","isVerifiableTransparencyLogEntry","verifyTLogIntegrationTime","validForDate","Date","Number","integratedTime","verifyTLogBody","verifyTLogSET","isBundleWithCertificateChain","x509CertificateChain","certificates","x509Certificate","parse","rawBytes"],"sources":["C:/Users/GabrielFalisiewiczS/OneDrive/Dokumenty/Udemy/backend/kurs1/node_modules/sigstore/dist/tlog/verify/index.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.verifyTLogEntries = void 0;\n/*\nCopyright 2023 The Sigstore Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nconst error_1 = require(\"../../error\");\nconst sigstore = __importStar(require(\"../../types/sigstore\"));\nconst cert_1 = require(\"../../x509/cert\");\nconst body_1 = require(\"./body\");\nconst set_1 = require(\"./set\");\n// Verifies that the number of tlog entries that pass offline verification\n// is greater than or equal to the threshold specified in the options.\nfunction verifyTLogEntries(bundle, trustedRoot, options) {\n    if (options.performOnlineVerification) {\n        throw new error_1.VerificationError('Online verification not implemented');\n    }\n    // Extract the signing cert, if available\n    const signingCert = signingCertificate(bundle);\n    // Iterate over the tlog entries and verify each one\n    const verifiedEntries = bundle.verificationMaterial.tlogEntries.filter((entry) => verifyTLogEntryOffline(entry, bundle.content, trustedRoot.tlogs, signingCert));\n    if (verifiedEntries.length < options.threshold) {\n        throw new error_1.VerificationError('tlog verification failed');\n    }\n}\nexports.verifyTLogEntries = verifyTLogEntries;\nfunction verifyTLogEntryOffline(entry, bundleContent, tlogs, signingCert) {\n    // Check that the TLog entry has the fields necessary for verification\n    if (!sigstore.isVerifiableTransparencyLogEntry(entry)) {\n        return false;\n    }\n    // If there is a signing certificate availble, check that the tlog integrated\n    // time is within the certificate's validity period; otherwise, skip this\n    // check.\n    const verifyTLogIntegrationTime = signingCert\n        ? () => signingCert.validForDate(new Date(Number(entry.integratedTime) * 1000))\n        : () => true;\n    return ((0, body_1.verifyTLogBody)(entry, bundleContent) &&\n        (0, set_1.verifyTLogSET)(entry, tlogs) &&\n        verifyTLogIntegrationTime());\n}\nfunction signingCertificate(bundle) {\n    if (!sigstore.isBundleWithCertificateChain(bundle)) {\n        return undefined;\n    }\n    const signingCert = bundle.verificationMaterial.content.x509CertificateChain.certificates[0];\n    return cert_1.x509Certificate.parse(signingCert.rawBytes);\n}\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,KAAMC,MAAM,CAACC,MAAM,GAAI,UAASC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAE;EAC5F,IAAIA,EAAE,KAAKC,SAAS,EAAED,EAAE,GAAGD,CAAC;EAC5B,IAAIG,IAAI,GAAGP,MAAM,CAACQ,wBAAwB,CAACL,CAAC,EAAEC,CAAC,CAAC;EAChD,IAAI,CAACG,IAAI,KAAK,KAAK,IAAIA,IAAI,GAAG,CAACJ,CAAC,CAACM,UAAU,GAAGF,IAAI,CAACG,QAAQ,IAAIH,IAAI,CAACI,YAAY,CAAC,EAAE;IACjFJ,IAAI,GAAG;MAAEK,UAAU,EAAE,IAAI;MAAEC,GAAG,EAAE,SAAAA,CAAA,EAAW;QAAE,OAAOV,CAAC,CAACC,CAAC,CAAC;MAAE;IAAE,CAAC;EAC/D;EACAJ,MAAM,CAACc,cAAc,CAACZ,CAAC,EAAEG,EAAE,EAAEE,IAAI,CAAC;AACtC,CAAC,GAAK,UAASL,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAE;EACxB,IAAIA,EAAE,KAAKC,SAAS,EAAED,EAAE,GAAGD,CAAC;EAC5BF,CAAC,CAACG,EAAE,CAAC,GAAGF,CAAC,CAACC,CAAC,CAAC;AAChB,CAAE,CAAC;AACH,IAAIW,kBAAkB,GAAI,IAAI,IAAI,IAAI,CAACA,kBAAkB,KAAMf,MAAM,CAACC,MAAM,GAAI,UAASC,CAAC,EAAEc,CAAC,EAAE;EAC3FhB,MAAM,CAACc,cAAc,CAACZ,CAAC,EAAE,SAAS,EAAE;IAAEU,UAAU,EAAE,IAAI;IAAEK,KAAK,EAAED;EAAE,CAAC,CAAC;AACvE,CAAC,GAAI,UAASd,CAAC,EAAEc,CAAC,EAAE;EAChBd,CAAC,CAAC,SAAS,CAAC,GAAGc,CAAC;AACpB,CAAC,CAAC;AACF,IAAIE,YAAY,GAAI,IAAI,IAAI,IAAI,CAACA,YAAY,IAAK,UAAUC,GAAG,EAAE;EAC7D,IAAIA,GAAG,IAAIA,GAAG,CAACV,UAAU,EAAE,OAAOU,GAAG;EACrC,IAAIC,MAAM,GAAG,CAAC,CAAC;EACf,IAAID,GAAG,IAAI,IAAI,EAAE,KAAK,IAAIf,CAAC,IAAIe,GAAG,EAAE,IAAIf,CAAC,KAAK,SAAS,IAAIJ,MAAM,CAACqB,SAAS,CAACC,cAAc,CAACC,IAAI,CAACJ,GAAG,EAAEf,CAAC,CAAC,EAAEL,eAAe,CAACqB,MAAM,EAAED,GAAG,EAAEf,CAAC,CAAC;EACxIW,kBAAkB,CAACK,MAAM,EAAED,GAAG,CAAC;EAC/B,OAAOC,MAAM;AACjB,CAAC;AACDpB,MAAM,CAACc,cAAc,CAACU,OAAO,EAAE,YAAY,EAAE;EAAEP,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DO,OAAO,CAACC,iBAAiB,GAAG,KAAK,CAAC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,aAAa,CAAC;AACtC,MAAMC,QAAQ,GAAGV,YAAY,CAACS,OAAO,CAAC,sBAAsB,CAAC,CAAC;AAC9D,MAAME,MAAM,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AACzC,MAAMG,MAAM,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMI,KAAK,GAAGJ,OAAO,CAAC,OAAO,CAAC;AAC9B;AACA;AACA,SAASF,iBAAiBA,CAACO,MAAM,EAAEC,WAAW,EAAEC,OAAO,EAAE;EACrD,IAAIA,OAAO,CAACC,yBAAyB,EAAE;IACnC,MAAM,IAAIT,OAAO,CAACU,iBAAiB,CAAC,qCAAqC,CAAC;EAC9E;EACA;EACA,MAAMC,WAAW,GAAGC,kBAAkB,CAACN,MAAM,CAAC;EAC9C;EACA,MAAMO,eAAe,GAAGP,MAAM,CAACQ,oBAAoB,CAACC,WAAW,CAACC,MAAM,CAAEC,KAAK,IAAKC,sBAAsB,CAACD,KAAK,EAAEX,MAAM,CAACa,OAAO,EAAEZ,WAAW,CAACa,KAAK,EAAET,WAAW,CAAC,CAAC;EAChK,IAAIE,eAAe,CAACQ,MAAM,GAAGb,OAAO,CAACc,SAAS,EAAE;IAC5C,MAAM,IAAItB,OAAO,CAACU,iBAAiB,CAAC,0BAA0B,CAAC;EACnE;AACJ;AACAZ,OAAO,CAACC,iBAAiB,GAAGA,iBAAiB;AAC7C,SAASmB,sBAAsBA,CAACD,KAAK,EAAEM,aAAa,EAAEH,KAAK,EAAET,WAAW,EAAE;EACtE;EACA,IAAI,CAACT,QAAQ,CAACsB,gCAAgC,CAACP,KAAK,CAAC,EAAE;IACnD,OAAO,KAAK;EAChB;EACA;EACA;EACA;EACA,MAAMQ,yBAAyB,GAAGd,WAAW,GACvC,MAAMA,WAAW,CAACe,YAAY,CAAC,IAAIC,IAAI,CAACC,MAAM,CAACX,KAAK,CAACY,cAAc,CAAC,GAAG,IAAI,CAAC,CAAC,GAC7E,MAAM,IAAI;EAChB,OAAQ,CAAC,CAAC,EAAEzB,MAAM,CAAC0B,cAAc,EAAEb,KAAK,EAAEM,aAAa,CAAC,IACpD,CAAC,CAAC,EAAElB,KAAK,CAAC0B,aAAa,EAAEd,KAAK,EAAEG,KAAK,CAAC,IACtCK,yBAAyB,CAAC,CAAC;AACnC;AACA,SAASb,kBAAkBA,CAACN,MAAM,EAAE;EAChC,IAAI,CAACJ,QAAQ,CAAC8B,4BAA4B,CAAC1B,MAAM,CAAC,EAAE;IAChD,OAAO1B,SAAS;EACpB;EACA,MAAM+B,WAAW,GAAGL,MAAM,CAACQ,oBAAoB,CAACK,OAAO,CAACc,oBAAoB,CAACC,YAAY,CAAC,CAAC,CAAC;EAC5F,OAAO/B,MAAM,CAACgC,eAAe,CAACC,KAAK,CAACzB,WAAW,CAAC0B,QAAQ,CAAC;AAC7D"},"metadata":{},"sourceType":"script","externalDependencies":[]}